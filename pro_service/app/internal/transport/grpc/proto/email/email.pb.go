// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/email.proto

/*
Package proto_email is a generated protocol buffer package.

It is generated from these files:
	proto/email.proto

It has these top-level messages:
	IdResponse
	SuccessResponse
	PingRequest
	PingResponse
	File
	FileData
	User
	InterviewData
	SendInterviewRequest
	OrderData
	SendOrderRequest
	ConfirmUserRequest
	RejectUserRequest
	JoinUserRequest
	SendTestRequest
*/
package proto_email

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SendTestRequest_Type int32

const (
	SendTestRequest_join      SendTestRequest_Type = 0
	SendTestRequest_confirm   SendTestRequest_Type = 1
	SendTestRequest_interview SendTestRequest_Type = 2
	SendTestRequest_order     SendTestRequest_Type = 3
	SendTestRequest_reject    SendTestRequest_Type = 4
)

var SendTestRequest_Type_name = map[int32]string{
	0: "join",
	1: "confirm",
	2: "interview",
	3: "order",
	4: "reject",
}
var SendTestRequest_Type_value = map[string]int32{
	"join":      0,
	"confirm":   1,
	"interview": 2,
	"order":     3,
	"reject":    4,
}

func (x SendTestRequest_Type) String() string {
	return proto.EnumName(SendTestRequest_Type_name, int32(x))
}
func (SendTestRequest_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{14, 0} }

type IdResponse struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *IdResponse) Reset()                    { *m = IdResponse{} }
func (m *IdResponse) String() string            { return proto.CompactTextString(m) }
func (*IdResponse) ProtoMessage()               {}
func (*IdResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *IdResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type SuccessResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *SuccessResponse) Reset()                    { *m = SuccessResponse{} }
func (m *SuccessResponse) String() string            { return proto.CompactTextString(m) }
func (*SuccessResponse) ProtoMessage()               {}
func (*SuccessResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SuccessResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type PingRequest struct {
}

func (m *PingRequest) Reset()                    { *m = PingRequest{} }
func (m *PingRequest) String() string            { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()               {}
func (*PingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type PingResponse struct {
	Ping string `protobuf:"bytes,1,opt,name=ping" json:"ping,omitempty"`
}

func (m *PingResponse) Reset()                    { *m = PingResponse{} }
func (m *PingResponse) String() string            { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()               {}
func (*PingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PingResponse) GetPing() string {
	if m != nil {
		return m.Ping
	}
	return ""
}

// Interview --------------------------------------------------
type File struct {
	Content []byte `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *File) Reset()                    { *m = File{} }
func (m *File) String() string            { return proto.CompactTextString(m) }
func (*File) ProtoMessage()               {}
func (*File) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *File) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type FileData struct {
	Name []string `protobuf:"bytes,1,rep,name=name" json:"name,omitempty"`
	Type string   `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Size int64    `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
}

func (m *FileData) Reset()                    { *m = FileData{} }
func (m *FileData) String() string            { return proto.CompactTextString(m) }
func (*FileData) ProtoMessage()               {}
func (*FileData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *FileData) GetName() []string {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *FileData) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *FileData) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

type User struct {
	Organization string `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Email        string `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	City         string `protobuf:"bytes,4,opt,name=city" json:"city,omitempty"`
	Position     string `protobuf:"bytes,5,opt,name=position" json:"position,omitempty"`
	Phone        string `protobuf:"bytes,6,opt,name=phone" json:"phone,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *User) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *User) GetPosition() string {
	if m != nil {
		return m.Position
	}
	return ""
}

func (m *User) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

type InterviewData struct {
	User *User     `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	File *FileData `protobuf:"bytes,2,opt,name=file" json:"file,omitempty"`
}

func (m *InterviewData) Reset()                    { *m = InterviewData{} }
func (m *InterviewData) String() string            { return proto.CompactTextString(m) }
func (*InterviewData) ProtoMessage()               {}
func (*InterviewData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *InterviewData) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *InterviewData) GetFile() *FileData {
	if m != nil {
		return m.File
	}
	return nil
}

type SendInterviewRequest struct {
	// Types that are valid to be assigned to Request:
	//	*SendInterviewRequest_Data
	//	*SendInterviewRequest_File
	Request isSendInterviewRequest_Request `protobuf_oneof:"request"`
}

func (m *SendInterviewRequest) Reset()                    { *m = SendInterviewRequest{} }
func (m *SendInterviewRequest) String() string            { return proto.CompactTextString(m) }
func (*SendInterviewRequest) ProtoMessage()               {}
func (*SendInterviewRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type isSendInterviewRequest_Request interface{ isSendInterviewRequest_Request() }

type SendInterviewRequest_Data struct {
	Data *InterviewData `protobuf:"bytes,2,opt,name=data,oneof"`
}
type SendInterviewRequest_File struct {
	File *File `protobuf:"bytes,1,opt,name=file,oneof"`
}

func (*SendInterviewRequest_Data) isSendInterviewRequest_Request() {}
func (*SendInterviewRequest_File) isSendInterviewRequest_Request() {}

func (m *SendInterviewRequest) GetRequest() isSendInterviewRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *SendInterviewRequest) GetData() *InterviewData {
	if x, ok := m.GetRequest().(*SendInterviewRequest_Data); ok {
		return x.Data
	}
	return nil
}

func (m *SendInterviewRequest) GetFile() *File {
	if x, ok := m.GetRequest().(*SendInterviewRequest_File); ok {
		return x.File
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SendInterviewRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SendInterviewRequest_OneofMarshaler, _SendInterviewRequest_OneofUnmarshaler, _SendInterviewRequest_OneofSizer, []interface{}{
		(*SendInterviewRequest_Data)(nil),
		(*SendInterviewRequest_File)(nil),
	}
}

func _SendInterviewRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SendInterviewRequest)
	// request
	switch x := m.Request.(type) {
	case *SendInterviewRequest_Data:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Data); err != nil {
			return err
		}
	case *SendInterviewRequest_File:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.File); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SendInterviewRequest.Request has unexpected type %T", x)
	}
	return nil
}

func _SendInterviewRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SendInterviewRequest)
	switch tag {
	case 2: // request.data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(InterviewData)
		err := b.DecodeMessage(msg)
		m.Request = &SendInterviewRequest_Data{msg}
		return true, err
	case 1: // request.file
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(File)
		err := b.DecodeMessage(msg)
		m.Request = &SendInterviewRequest_File{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SendInterviewRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SendInterviewRequest)
	// request
	switch x := m.Request.(type) {
	case *SendInterviewRequest_Data:
		s := proto.Size(x.Data)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SendInterviewRequest_File:
		s := proto.Size(x.File)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Order --------------------------------------------------
type OrderData struct {
	User *User     `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	File *FileData `protobuf:"bytes,2,opt,name=file" json:"file,omitempty"`
}

func (m *OrderData) Reset()                    { *m = OrderData{} }
func (m *OrderData) String() string            { return proto.CompactTextString(m) }
func (*OrderData) ProtoMessage()               {}
func (*OrderData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *OrderData) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *OrderData) GetFile() *FileData {
	if m != nil {
		return m.File
	}
	return nil
}

type SendOrderRequest struct {
	// Types that are valid to be assigned to Request:
	//	*SendOrderRequest_Data
	//	*SendOrderRequest_File
	Request isSendOrderRequest_Request `protobuf_oneof:"request"`
}

func (m *SendOrderRequest) Reset()                    { *m = SendOrderRequest{} }
func (m *SendOrderRequest) String() string            { return proto.CompactTextString(m) }
func (*SendOrderRequest) ProtoMessage()               {}
func (*SendOrderRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type isSendOrderRequest_Request interface{ isSendOrderRequest_Request() }

type SendOrderRequest_Data struct {
	Data *OrderData `protobuf:"bytes,2,opt,name=data,oneof"`
}
type SendOrderRequest_File struct {
	File *File `protobuf:"bytes,1,opt,name=file,oneof"`
}

func (*SendOrderRequest_Data) isSendOrderRequest_Request() {}
func (*SendOrderRequest_File) isSendOrderRequest_Request() {}

func (m *SendOrderRequest) GetRequest() isSendOrderRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *SendOrderRequest) GetData() *OrderData {
	if x, ok := m.GetRequest().(*SendOrderRequest_Data); ok {
		return x.Data
	}
	return nil
}

func (m *SendOrderRequest) GetFile() *File {
	if x, ok := m.GetRequest().(*SendOrderRequest_File); ok {
		return x.File
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SendOrderRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SendOrderRequest_OneofMarshaler, _SendOrderRequest_OneofUnmarshaler, _SendOrderRequest_OneofSizer, []interface{}{
		(*SendOrderRequest_Data)(nil),
		(*SendOrderRequest_File)(nil),
	}
}

func _SendOrderRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SendOrderRequest)
	// request
	switch x := m.Request.(type) {
	case *SendOrderRequest_Data:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Data); err != nil {
			return err
		}
	case *SendOrderRequest_File:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.File); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SendOrderRequest.Request has unexpected type %T", x)
	}
	return nil
}

func _SendOrderRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SendOrderRequest)
	switch tag {
	case 2: // request.data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(OrderData)
		err := b.DecodeMessage(msg)
		m.Request = &SendOrderRequest_Data{msg}
		return true, err
	case 1: // request.file
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(File)
		err := b.DecodeMessage(msg)
		m.Request = &SendOrderRequest_File{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SendOrderRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SendOrderRequest)
	// request
	switch x := m.Request.(type) {
	case *SendOrderRequest_Data:
		s := proto.Size(x.Data)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SendOrderRequest_File:
		s := proto.Size(x.File)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Confirm --------------------------------------------------
type ConfirmUserRequest struct {
	Organization string `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Position     string `protobuf:"bytes,3,opt,name=position" json:"position,omitempty"`
}

func (m *ConfirmUserRequest) Reset()                    { *m = ConfirmUserRequest{} }
func (m *ConfirmUserRequest) String() string            { return proto.CompactTextString(m) }
func (*ConfirmUserRequest) ProtoMessage()               {}
func (*ConfirmUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ConfirmUserRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *ConfirmUserRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ConfirmUserRequest) GetPosition() string {
	if m != nil {
		return m.Position
	}
	return ""
}

// Reject --------------------------------------------------
type RejectUserRequest struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Email string `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
}

func (m *RejectUserRequest) Reset()                    { *m = RejectUserRequest{} }
func (m *RejectUserRequest) String() string            { return proto.CompactTextString(m) }
func (*RejectUserRequest) ProtoMessage()               {}
func (*RejectUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *RejectUserRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RejectUserRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

// Join --------------------------------------------------
type JoinUserRequest struct {
	Name     string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Login    string   `protobuf:"bytes,2,opt,name=login" json:"login,omitempty"`
	Password string   `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
	Email    string   `protobuf:"bytes,4,opt,name=email" json:"email,omitempty"`
	Services []string `protobuf:"bytes,5,rep,name=services" json:"services,omitempty"`
}

func (m *JoinUserRequest) Reset()                    { *m = JoinUserRequest{} }
func (m *JoinUserRequest) String() string            { return proto.CompactTextString(m) }
func (*JoinUserRequest) ProtoMessage()               {}
func (*JoinUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *JoinUserRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *JoinUserRequest) GetLogin() string {
	if m != nil {
		return m.Login
	}
	return ""
}

func (m *JoinUserRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *JoinUserRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *JoinUserRequest) GetServices() []string {
	if m != nil {
		return m.Services
	}
	return nil
}

// TEST ---------------------------------------------------
type SendTestRequest struct {
	Type SendTestRequest_Type `protobuf:"varint,1,opt,name=type,enum=proto_email.SendTestRequest_Type" json:"type,omitempty"`
}

func (m *SendTestRequest) Reset()                    { *m = SendTestRequest{} }
func (m *SendTestRequest) String() string            { return proto.CompactTextString(m) }
func (*SendTestRequest) ProtoMessage()               {}
func (*SendTestRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *SendTestRequest) GetType() SendTestRequest_Type {
	if m != nil {
		return m.Type
	}
	return SendTestRequest_join
}

func init() {
	proto.RegisterType((*IdResponse)(nil), "proto_email.IdResponse")
	proto.RegisterType((*SuccessResponse)(nil), "proto_email.SuccessResponse")
	proto.RegisterType((*PingRequest)(nil), "proto_email.PingRequest")
	proto.RegisterType((*PingResponse)(nil), "proto_email.PingResponse")
	proto.RegisterType((*File)(nil), "proto_email.File")
	proto.RegisterType((*FileData)(nil), "proto_email.FileData")
	proto.RegisterType((*User)(nil), "proto_email.User")
	proto.RegisterType((*InterviewData)(nil), "proto_email.InterviewData")
	proto.RegisterType((*SendInterviewRequest)(nil), "proto_email.SendInterviewRequest")
	proto.RegisterType((*OrderData)(nil), "proto_email.OrderData")
	proto.RegisterType((*SendOrderRequest)(nil), "proto_email.SendOrderRequest")
	proto.RegisterType((*ConfirmUserRequest)(nil), "proto_email.ConfirmUserRequest")
	proto.RegisterType((*RejectUserRequest)(nil), "proto_email.RejectUserRequest")
	proto.RegisterType((*JoinUserRequest)(nil), "proto_email.JoinUserRequest")
	proto.RegisterType((*SendTestRequest)(nil), "proto_email.SendTestRequest")
	proto.RegisterEnum("proto_email.SendTestRequest_Type", SendTestRequest_Type_name, SendTestRequest_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EmailService service

type EmailServiceClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	// Interview --------------------------------------------------
	SendInterview(ctx context.Context, opts ...grpc.CallOption) (EmailService_SendInterviewClient, error)
	// Order --------------------------------------------------
	SendOrder(ctx context.Context, opts ...grpc.CallOption) (EmailService_SendOrderClient, error)
	// Confirm --------------------------------------------------
	SendConfirm(ctx context.Context, in *ConfirmUserRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	// Reject --------------------------------------------------
	SendReject(ctx context.Context, in *RejectUserRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	// Join --------------------------------------------------
	SendJoin(ctx context.Context, in *JoinUserRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	// TEST ---------------------------------------------------
	SendTest(ctx context.Context, in *SendTestRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
}

type emailServiceClient struct {
	cc *grpc.ClientConn
}

func NewEmailServiceClient(cc *grpc.ClientConn) EmailServiceClient {
	return &emailServiceClient{cc}
}

func (c *emailServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := grpc.Invoke(ctx, "/proto_email.EmailService/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) SendInterview(ctx context.Context, opts ...grpc.CallOption) (EmailService_SendInterviewClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_EmailService_serviceDesc.Streams[0], c.cc, "/proto_email.EmailService/SendInterview", opts...)
	if err != nil {
		return nil, err
	}
	x := &emailServiceSendInterviewClient{stream}
	return x, nil
}

type EmailService_SendInterviewClient interface {
	Send(*SendInterviewRequest) error
	CloseAndRecv() (*SuccessResponse, error)
	grpc.ClientStream
}

type emailServiceSendInterviewClient struct {
	grpc.ClientStream
}

func (x *emailServiceSendInterviewClient) Send(m *SendInterviewRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *emailServiceSendInterviewClient) CloseAndRecv() (*SuccessResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SuccessResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *emailServiceClient) SendOrder(ctx context.Context, opts ...grpc.CallOption) (EmailService_SendOrderClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_EmailService_serviceDesc.Streams[1], c.cc, "/proto_email.EmailService/SendOrder", opts...)
	if err != nil {
		return nil, err
	}
	x := &emailServiceSendOrderClient{stream}
	return x, nil
}

type EmailService_SendOrderClient interface {
	Send(*SendOrderRequest) error
	CloseAndRecv() (*SuccessResponse, error)
	grpc.ClientStream
}

type emailServiceSendOrderClient struct {
	grpc.ClientStream
}

func (x *emailServiceSendOrderClient) Send(m *SendOrderRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *emailServiceSendOrderClient) CloseAndRecv() (*SuccessResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SuccessResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *emailServiceClient) SendConfirm(ctx context.Context, in *ConfirmUserRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := grpc.Invoke(ctx, "/proto_email.EmailService/SendConfirm", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) SendReject(ctx context.Context, in *RejectUserRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := grpc.Invoke(ctx, "/proto_email.EmailService/SendReject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) SendJoin(ctx context.Context, in *JoinUserRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := grpc.Invoke(ctx, "/proto_email.EmailService/SendJoin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) SendTest(ctx context.Context, in *SendTestRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := grpc.Invoke(ctx, "/proto_email.EmailService/SendTest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EmailService service

type EmailServiceServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	// Interview --------------------------------------------------
	SendInterview(EmailService_SendInterviewServer) error
	// Order --------------------------------------------------
	SendOrder(EmailService_SendOrderServer) error
	// Confirm --------------------------------------------------
	SendConfirm(context.Context, *ConfirmUserRequest) (*SuccessResponse, error)
	// Reject --------------------------------------------------
	SendReject(context.Context, *RejectUserRequest) (*SuccessResponse, error)
	// Join --------------------------------------------------
	SendJoin(context.Context, *JoinUserRequest) (*SuccessResponse, error)
	// TEST ---------------------------------------------------
	SendTest(context.Context, *SendTestRequest) (*SuccessResponse, error)
}

func RegisterEmailServiceServer(s *grpc.Server, srv EmailServiceServer) {
	s.RegisterService(&_EmailService_serviceDesc, srv)
}

func _EmailService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_email.EmailService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_SendInterview_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EmailServiceServer).SendInterview(&emailServiceSendInterviewServer{stream})
}

type EmailService_SendInterviewServer interface {
	SendAndClose(*SuccessResponse) error
	Recv() (*SendInterviewRequest, error)
	grpc.ServerStream
}

type emailServiceSendInterviewServer struct {
	grpc.ServerStream
}

func (x *emailServiceSendInterviewServer) SendAndClose(m *SuccessResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *emailServiceSendInterviewServer) Recv() (*SendInterviewRequest, error) {
	m := new(SendInterviewRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _EmailService_SendOrder_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EmailServiceServer).SendOrder(&emailServiceSendOrderServer{stream})
}

type EmailService_SendOrderServer interface {
	SendAndClose(*SuccessResponse) error
	Recv() (*SendOrderRequest, error)
	grpc.ServerStream
}

type emailServiceSendOrderServer struct {
	grpc.ServerStream
}

func (x *emailServiceSendOrderServer) SendAndClose(m *SuccessResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *emailServiceSendOrderServer) Recv() (*SendOrderRequest, error) {
	m := new(SendOrderRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _EmailService_SendConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).SendConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_email.EmailService/SendConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).SendConfirm(ctx, req.(*ConfirmUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_SendReject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).SendReject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_email.EmailService/SendReject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).SendReject(ctx, req.(*RejectUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_SendJoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).SendJoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_email.EmailService/SendJoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).SendJoin(ctx, req.(*JoinUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_SendTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).SendTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_email.EmailService/SendTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).SendTest(ctx, req.(*SendTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EmailService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto_email.EmailService",
	HandlerType: (*EmailServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _EmailService_Ping_Handler,
		},
		{
			MethodName: "SendConfirm",
			Handler:    _EmailService_SendConfirm_Handler,
		},
		{
			MethodName: "SendReject",
			Handler:    _EmailService_SendReject_Handler,
		},
		{
			MethodName: "SendJoin",
			Handler:    _EmailService_SendJoin_Handler,
		},
		{
			MethodName: "SendTest",
			Handler:    _EmailService_SendTest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendInterview",
			Handler:       _EmailService_SendInterview_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SendOrder",
			Handler:       _EmailService_SendOrder_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/email.proto",
}

func init() { proto.RegisterFile("proto/email.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 691 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xdf, 0x4f, 0x13, 0x41,
	0x10, 0xe6, 0xda, 0x2b, 0xb4, 0xd3, 0x16, 0x8e, 0x0d, 0x9a, 0xb3, 0x41, 0xad, 0x9b, 0x18, 0x31,
	0x9a, 0x62, 0x6a, 0x7c, 0x22, 0xbe, 0x80, 0x12, 0x21, 0x26, 0x9a, 0x03, 0x5f, 0x4c, 0x8c, 0x39,
	0x7b, 0x4b, 0x59, 0x52, 0x76, 0xcf, 0xdb, 0x43, 0x02, 0xf1, 0x1f, 0xf0, 0xc1, 0x47, 0x5f, 0xfc,
	0x6b, 0xcd, 0xcc, 0xfd, 0xe0, 0xb6, 0x25, 0x40, 0x34, 0x3e, 0xdd, 0xce, 0xdc, 0xb7, 0xdf, 0x7c,
	0xb3, 0xfb, 0xcd, 0xc2, 0x72, 0x9c, 0xe8, 0x54, 0xaf, 0x8b, 0xe3, 0x50, 0x4e, 0x06, 0xb4, 0x66,
	0x6d, 0xfa, 0x7c, 0xa6, 0x14, 0x5f, 0x05, 0xd8, 0x89, 0x02, 0x61, 0x62, 0xad, 0x8c, 0x60, 0x8b,
	0x50, 0x93, 0x91, 0xef, 0xf4, 0x9d, 0xb5, 0x56, 0x50, 0x93, 0x11, 0x7f, 0x02, 0x4b, 0x7b, 0x27,
	0xa3, 0x91, 0x30, 0xa6, 0x84, 0xf8, 0xb0, 0x60, 0xb2, 0x14, 0xe1, 0x9a, 0x41, 0x11, 0xf2, 0x2e,
	0xb4, 0xdf, 0x4b, 0x35, 0x0e, 0xc4, 0xd7, 0x13, 0x61, 0x52, 0xce, 0xa1, 0x93, 0x85, 0xf9, 0x46,
	0x06, 0x6e, 0x2c, 0xd5, 0x38, 0x67, 0xa7, 0x35, 0xef, 0x83, 0xbb, 0x2d, 0x27, 0x44, 0x3a, 0xd2,
	0x2a, 0x15, 0x2a, 0xa5, 0xdf, 0x9d, 0xa0, 0x08, 0xf9, 0x36, 0x34, 0x11, 0xf1, 0x2a, 0x4c, 0x43,
	0x64, 0x50, 0xe1, 0xb1, 0xf0, 0x9d, 0x7e, 0x1d, 0x19, 0x70, 0x8d, 0xb9, 0xf4, 0x2c, 0x16, 0x7e,
	0x2d, 0x63, 0xc5, 0x35, 0xe6, 0x8c, 0x3c, 0x17, 0x7e, 0xbd, 0xef, 0xac, 0xd5, 0x03, 0x5a, 0xf3,
	0xdf, 0x0e, 0xb8, 0x1f, 0x8c, 0x48, 0x18, 0x87, 0x8e, 0x4e, 0xc6, 0xa1, 0x92, 0xe7, 0x61, 0x2a,
	0xb5, 0xca, 0xe5, 0x58, 0xb9, 0xb2, 0x50, 0x4e, 0x4a, 0x85, 0x56, 0xa0, 0x41, 0x27, 0x46, 0xac,
	0xad, 0x20, 0x0b, 0x10, 0x39, 0x92, 0xe9, 0x99, 0xef, 0x66, 0x48, 0x5c, 0xb3, 0x1e, 0x34, 0x63,
	0x6d, 0x24, 0xb1, 0x37, 0x28, 0x5f, 0xc6, 0xc8, 0x12, 0x1f, 0x6a, 0x25, 0xfc, 0xf9, 0x8c, 0x85,
	0x02, 0x1e, 0x42, 0x77, 0x47, 0xa5, 0x22, 0xf9, 0x26, 0xc5, 0x29, 0x75, 0xfa, 0x10, 0xdc, 0x13,
	0x23, 0x12, 0x12, 0xd7, 0x1e, 0x2e, 0x0f, 0x2a, 0x37, 0x36, 0xc0, 0x2e, 0x02, 0xfa, 0xcd, 0x1e,
	0x83, 0x7b, 0x20, 0x27, 0x99, 0xce, 0xf6, 0xf0, 0x96, 0x05, 0x2b, 0x4e, 0x2d, 0x20, 0x08, 0xff,
	0x0e, 0x2b, 0x7b, 0x42, 0x45, 0x65, 0x99, 0xfc, 0x96, 0xd8, 0x33, 0x70, 0xa3, 0x30, 0x0d, 0x73,
	0x8a, 0x9e, 0x45, 0x61, 0x69, 0x7a, 0x33, 0x17, 0x10, 0x92, 0x3d, 0xca, 0x8b, 0x5e, 0xa6, 0x0d,
	0x8b, 0x22, 0x10, 0x01, 0x9b, 0x2d, 0x58, 0x48, 0x72, 0x2f, 0x7c, 0x82, 0xd6, 0xbb, 0x24, 0x12,
	0xc9, 0x7f, 0x6a, 0x2e, 0x05, 0x0f, 0x9b, 0xa3, 0x12, 0x45, 0x63, 0x4f, 0xad, 0xc6, 0x6e, 0x5b,
	0xdb, 0x4b, 0x2d, 0xff, 0xd4, 0xd4, 0x21, 0xb0, 0x2d, 0xad, 0x0e, 0x64, 0x72, 0x4c, 0xaa, 0xf3,
	0xba, 0x7f, 0xeb, 0xaf, 0xaa, 0x6b, 0xea, 0xb6, 0x6b, 0xf8, 0x4b, 0x58, 0x0e, 0xc4, 0x91, 0x18,
	0xa5, 0xd5, 0x42, 0x17, 0xd3, 0x70, 0x89, 0x49, 0x6b, 0x15, 0x93, 0xf2, 0x1f, 0x0e, 0x2c, 0xed,
	0x6a, 0xa9, 0x6e, 0xb0, 0x7b, 0xa2, 0xc7, 0x52, 0x15, 0xbb, 0x29, 0x20, 0x61, 0xa1, 0x31, 0xa7,
	0x3a, 0x89, 0x4a, 0x61, 0x79, 0x7c, 0x51, 0xcf, 0xad, 0x0e, 0x45, 0x0f, 0x9a, 0x06, 0x8d, 0x33,
	0x12, 0xc6, 0x6f, 0xd0, 0xac, 0x96, 0x31, 0xff, 0xe9, 0xc0, 0x12, 0xde, 0xd5, 0xbe, 0x30, 0x69,
	0xa1, 0xe5, 0x45, 0x3e, 0xc3, 0xa8, 0x65, 0x71, 0xf8, 0xc0, 0x3a, 0xfc, 0x29, 0xec, 0x60, 0xff,
	0x2c, 0x16, 0xd9, 0x98, 0xf3, 0x2d, 0x70, 0x31, 0x62, 0x4d, 0x70, 0x8f, 0xb4, 0x54, 0xde, 0x1c,
	0x6b, 0xd3, 0x33, 0x82, 0x37, 0xe2, 0x39, 0xac, 0x0b, 0x2d, 0x59, 0x18, 0xd8, 0xab, 0xb1, 0x16,
	0x34, 0x34, 0x5e, 0xbb, 0x57, 0x67, 0x00, 0xf3, 0x09, 0x1d, 0xa7, 0xe7, 0x0e, 0x7f, 0xb9, 0xd0,
	0x79, 0x8d, 0x95, 0xf6, 0x32, 0x85, 0x6c, 0x03, 0x5c, 0x7c, 0xb6, 0x98, 0x6f, 0xc9, 0xa8, 0x3c,
	0x6c, 0xbd, 0x3b, 0x97, 0xfc, 0xc9, 0xdf, 0xb8, 0x00, 0xba, 0xd6, 0x94, 0xb1, 0xd9, 0x66, 0xa6,
	0x27, 0xb0, 0xb7, 0x6a, 0x43, 0xec, 0xe7, 0x76, 0xcd, 0x61, 0xbb, 0xd0, 0x2a, 0xcd, 0xcd, 0xee,
	0xce, 0xf0, 0x55, 0x4d, 0x7f, 0x2d, 0xd7, 0x5b, 0x68, 0xe3, 0x9e, 0xdc, 0xb6, 0xec, 0xbe, 0x05,
	0x9f, 0x35, 0xf3, 0xd5, 0x7c, 0x6c, 0x17, 0x00, 0xd9, 0x32, 0x6b, 0xb2, 0x7b, 0x16, 0x76, 0xc6,
	0xaf, 0xd7, 0x70, 0x6d, 0x43, 0x13, 0xb9, 0xd0, 0xa6, 0xcc, 0x46, 0x4e, 0x39, 0xf7, 0x66, 0x3c,
	0x68, 0x99, 0x29, 0x9e, 0x29, 0x27, 0x5d, 0xcd, 0xb3, 0xe9, 0x7d, 0x5c, 0x1c, 0xac, 0x6f, 0x54,
	0x10, 0x5f, 0xe6, 0x29, 0x78, 0xfe, 0x27, 0x00, 0x00, 0xff, 0xff, 0x54, 0x5f, 0x62, 0x70, 0x52,
	0x07, 0x00, 0x00,
}
