// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/stand.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	proto/stand.proto

It has these top-level messages:
	GetStands
	CreateStand
	UpdateStand
	DeleteStand
	Stand
	Id
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type GetStands struct {
}

func (m *GetStands) Reset()                    { *m = GetStands{} }
func (m *GetStands) String() string            { return proto1.CompactTextString(m) }
func (*GetStands) ProtoMessage()               {}
func (*GetStands) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type CreateStand struct {
	Title string `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
}

func (m *CreateStand) Reset()                    { *m = CreateStand{} }
func (m *CreateStand) String() string            { return proto1.CompactTextString(m) }
func (*CreateStand) ProtoMessage()               {}
func (*CreateStand) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CreateStand) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

type UpdateStand struct {
	Id    string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Title string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
}

func (m *UpdateStand) Reset()                    { *m = UpdateStand{} }
func (m *UpdateStand) String() string            { return proto1.CompactTextString(m) }
func (*UpdateStand) ProtoMessage()               {}
func (*UpdateStand) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UpdateStand) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateStand) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

type DeleteStand struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteStand) Reset()                    { *m = DeleteStand{} }
func (m *DeleteStand) String() string            { return proto1.CompactTextString(m) }
func (*DeleteStand) ProtoMessage()               {}
func (*DeleteStand) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DeleteStand) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Stand struct {
	Id    string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Title string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
}

func (m *Stand) Reset()                    { *m = Stand{} }
func (m *Stand) String() string            { return proto1.CompactTextString(m) }
func (*Stand) ProtoMessage()               {}
func (*Stand) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Stand) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Stand) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

type Id struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *Id) Reset()                    { *m = Id{} }
func (m *Id) String() string            { return proto1.CompactTextString(m) }
func (*Id) ProtoMessage()               {}
func (*Id) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Id) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto1.RegisterType((*GetStands)(nil), "proto.GetStands")
	proto1.RegisterType((*CreateStand)(nil), "proto.CreateStand")
	proto1.RegisterType((*UpdateStand)(nil), "proto.UpdateStand")
	proto1.RegisterType((*DeleteStand)(nil), "proto.DeleteStand")
	proto1.RegisterType((*Stand)(nil), "proto.Stand")
	proto1.RegisterType((*Id)(nil), "proto.Id")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for StandService service

type StandServiceClient interface {
	GetAll(ctx context.Context, in *GetStands, opts ...grpc.CallOption) (*Stand, error)
	Create(ctx context.Context, in *CreateStand, opts ...grpc.CallOption) (*Id, error)
	Update(ctx context.Context, in *UpdateStand, opts ...grpc.CallOption) (*Id, error)
	Delete(ctx context.Context, in *DeleteStand, opts ...grpc.CallOption) (*Id, error)
}

type standServiceClient struct {
	cc *grpc.ClientConn
}

func NewStandServiceClient(cc *grpc.ClientConn) StandServiceClient {
	return &standServiceClient{cc}
}

func (c *standServiceClient) GetAll(ctx context.Context, in *GetStands, opts ...grpc.CallOption) (*Stand, error) {
	out := new(Stand)
	err := grpc.Invoke(ctx, "/proto.StandService/GetAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *standServiceClient) Create(ctx context.Context, in *CreateStand, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := grpc.Invoke(ctx, "/proto.StandService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *standServiceClient) Update(ctx context.Context, in *UpdateStand, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := grpc.Invoke(ctx, "/proto.StandService/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *standServiceClient) Delete(ctx context.Context, in *DeleteStand, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := grpc.Invoke(ctx, "/proto.StandService/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for StandService service

type StandServiceServer interface {
	GetAll(context.Context, *GetStands) (*Stand, error)
	Create(context.Context, *CreateStand) (*Id, error)
	Update(context.Context, *UpdateStand) (*Id, error)
	Delete(context.Context, *DeleteStand) (*Id, error)
}

func RegisterStandServiceServer(s *grpc.Server, srv StandServiceServer) {
	s.RegisterService(&_StandService_serviceDesc, srv)
}

func _StandService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStands)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StandServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StandService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StandServiceServer).GetAll(ctx, req.(*GetStands))
	}
	return interceptor(ctx, in, info, handler)
}

func _StandService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StandServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StandService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StandServiceServer).Create(ctx, req.(*CreateStand))
	}
	return interceptor(ctx, in, info, handler)
}

func _StandService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StandServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StandService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StandServiceServer).Update(ctx, req.(*UpdateStand))
	}
	return interceptor(ctx, in, info, handler)
}

func _StandService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StandServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StandService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StandServiceServer).Delete(ctx, req.(*DeleteStand))
	}
	return interceptor(ctx, in, info, handler)
}

var _StandService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.StandService",
	HandlerType: (*StandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _StandService_GetAll_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _StandService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _StandService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _StandService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/stand.proto",
}

func init() { proto1.RegisterFile("proto/stand.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 216 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2c, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x2f, 0x2e, 0x49, 0xcc, 0x4b, 0xd1, 0x03, 0xb3, 0x85, 0x58, 0xc1, 0x94, 0x12, 0x37,
	0x17, 0xa7, 0x7b, 0x6a, 0x49, 0x30, 0x48, 0xa2, 0x58, 0x49, 0x99, 0x8b, 0xdb, 0xb9, 0x28, 0x35,
	0xb1, 0x24, 0x15, 0xcc, 0x17, 0x12, 0xe1, 0x62, 0x2d, 0xc9, 0x2c, 0xc9, 0x49, 0x95, 0x60, 0x54,
	0x60, 0xd4, 0xe0, 0x0c, 0x82, 0x70, 0x94, 0x8c, 0xb9, 0xb8, 0x43, 0x0b, 0x52, 0xe0, 0x8a, 0xf8,
	0xb8, 0x98, 0x32, 0x53, 0xa0, 0x2a, 0x98, 0x32, 0x91, 0x34, 0x31, 0x21, 0x6b, 0x92, 0xe5, 0xe2,
	0x76, 0x49, 0xcd, 0x49, 0xc5, 0xa1, 0x49, 0x49, 0x97, 0x8b, 0x95, 0x14, 0xd3, 0x44, 0xb8, 0x98,
	0x3c, 0x31, 0xd4, 0x1a, 0x6d, 0x66, 0xe4, 0xe2, 0x01, 0x9b, 0x12, 0x9c, 0x5a, 0x54, 0x96, 0x99,
	0x9c, 0x2a, 0xa4, 0xc1, 0xc5, 0xe6, 0x9e, 0x5a, 0xe2, 0x98, 0x93, 0x23, 0x24, 0x00, 0xf1, 0xb4,
	0x1e, 0xdc, 0xab, 0x52, 0x3c, 0x50, 0x11, 0x88, 0xb5, 0xea, 0x5c, 0x6c, 0x10, 0x8f, 0x0b, 0x09,
	0x41, 0xc5, 0x91, 0xc2, 0x41, 0x8a, 0x13, 0x2a, 0xe6, 0x09, 0x56, 0x08, 0xf1, 0x3c, 0x5c, 0x21,
	0x52, 0x58, 0xa0, 0x29, 0x84, 0x78, 0x18, 0xae, 0x10, 0xc9, 0xff, 0x48, 0x0a, 0x9d, 0xb8, 0xa2,
	0x38, 0xf4, 0xf4, 0xad, 0xc1, 0xdc, 0x24, 0x36, 0x30, 0x65, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff,
	0xca, 0x72, 0xd5, 0x70, 0xaf, 0x01, 0x00, 0x00,
}
