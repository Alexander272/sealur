// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/moment.proto

/*
Package moment_proto is a generated protocol buffer package.

It is generated from these files:
	proto/moment.proto

It has these top-level messages:
	PingRequest
	PingResponse
	Gasket
	FlangeData
	BoltData
	GasketData
	EmbedData
	FlangeRequest
	FlangeResult
	BoltResult
	GasketResult
	EmbedResult
	CalculatedFlange
	FlangeResponse
*/
package moment_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FlangeData_Type int32

const (
	FlangeData_welded FlangeData_Type = 0
	FlangeData_flat   FlangeData_Type = 1
	FlangeData_free   FlangeData_Type = 2
)

var FlangeData_Type_name = map[int32]string{
	0: "welded",
	1: "flat",
	2: "free",
}
var FlangeData_Type_value = map[string]int32{
	"welded": 0,
	"flat":   1,
	"free":   2,
}

func (x FlangeData_Type) String() string {
	return proto.EnumName(FlangeData_Type_name, int32(x))
}
func (FlangeData_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

type FlangeRequest_Flanges int32

const (
	FlangeRequest_isolated    FlangeRequest_Flanges = 0
	FlangeRequest_nonIsolated FlangeRequest_Flanges = 1
	FlangeRequest_manually    FlangeRequest_Flanges = 2
)

var FlangeRequest_Flanges_name = map[int32]string{
	0: "isolated",
	1: "nonIsolated",
	2: "manually",
}
var FlangeRequest_Flanges_value = map[string]int32{
	"isolated":    0,
	"nonIsolated": 1,
	"manually":    2,
}

func (x FlangeRequest_Flanges) String() string {
	return proto.EnumName(FlangeRequest_Flanges_name, int32(x))
}
func (FlangeRequest_Flanges) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{7, 0} }

type FlangeRequest_Type int32

const (
	FlangeRequest_bolt FlangeRequest_Type = 0
	FlangeRequest_pin  FlangeRequest_Type = 1
)

var FlangeRequest_Type_name = map[int32]string{
	0: "bolt",
	1: "pin",
}
var FlangeRequest_Type_value = map[string]int32{
	"bolt": 0,
	"pin":  1,
}

func (x FlangeRequest_Type) String() string {
	return proto.EnumName(FlangeRequest_Type_name, int32(x))
}
func (FlangeRequest_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{7, 1} }

type FlangeRequest_Condition int32

const (
	FlangeRequest_uncontrollable  FlangeRequest_Condition = 0
	FlangeRequest_controllable    FlangeRequest_Condition = 1
	FlangeRequest_controllablePin FlangeRequest_Condition = 2
)

var FlangeRequest_Condition_name = map[int32]string{
	0: "uncontrollable",
	1: "controllable",
	2: "controllablePin",
}
var FlangeRequest_Condition_value = map[string]int32{
	"uncontrollable":  0,
	"controllable":    1,
	"controllablePin": 2,
}

func (x FlangeRequest_Condition) String() string {
	return proto.EnumName(FlangeRequest_Condition_name, int32(x))
}
func (FlangeRequest_Condition) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{7, 2} }

type FlangeRequest_Calcutation int32

const (
	FlangeRequest_basis    FlangeRequest_Calcutation = 0
	FlangeRequest_strength FlangeRequest_Calcutation = 1
)

var FlangeRequest_Calcutation_name = map[int32]string{
	0: "basis",
	1: "strength",
}
var FlangeRequest_Calcutation_value = map[string]int32{
	"basis":    0,
	"strength": 1,
}

func (x FlangeRequest_Calcutation) String() string {
	return proto.EnumName(FlangeRequest_Calcutation_name, int32(x))
}
func (FlangeRequest_Calcutation) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{7, 3} }

type PingRequest struct {
}

func (m *PingRequest) Reset()                    { *m = PingRequest{} }
func (m *PingRequest) String() string            { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()               {}
func (*PingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type PingResponse struct {
	Ping string `protobuf:"bytes,1,opt,name=ping" json:"ping,omitempty"`
}

func (m *PingResponse) Reset()                    { *m = PingResponse{} }
func (m *PingResponse) String() string            { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()               {}
func (*PingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PingResponse) GetPing() string {
	if m != nil {
		return m.Ping
	}
	return ""
}

type Gasket struct {
}

func (m *Gasket) Reset()                    { *m = Gasket{} }
func (m *Gasket) String() string            { return proto.CompactTextString(m) }
func (*Gasket) ProtoMessage()               {}
func (*Gasket) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type FlangeData struct {
	Type       FlangeData_Type `protobuf:"varint,1,opt,name=type,enum=moment_proto.FlangeData_Type" json:"type,omitempty"`
	StandartId string          `protobuf:"bytes,2,opt,name=standartId" json:"standartId,omitempty"`
	MarkId     string          `protobuf:"bytes,3,opt,name=markId" json:"markId,omitempty"`
	Dy         int32           `protobuf:"varint,4,opt,name=dy" json:"dy,omitempty"`
	Py         float64         `protobuf:"fixed64,5,opt,name=py" json:"py,omitempty"`
	Corrosion  int32           `protobuf:"varint,6,opt,name=corrosion" json:"corrosion,omitempty"`
}

func (m *FlangeData) Reset()                    { *m = FlangeData{} }
func (m *FlangeData) String() string            { return proto.CompactTextString(m) }
func (*FlangeData) ProtoMessage()               {}
func (*FlangeData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *FlangeData) GetType() FlangeData_Type {
	if m != nil {
		return m.Type
	}
	return FlangeData_welded
}

func (m *FlangeData) GetStandartId() string {
	if m != nil {
		return m.StandartId
	}
	return ""
}

func (m *FlangeData) GetMarkId() string {
	if m != nil {
		return m.MarkId
	}
	return ""
}

func (m *FlangeData) GetDy() int32 {
	if m != nil {
		return m.Dy
	}
	return 0
}

func (m *FlangeData) GetPy() float64 {
	if m != nil {
		return m.Py
	}
	return 0
}

func (m *FlangeData) GetCorrosion() int32 {
	if m != nil {
		return m.Corrosion
	}
	return 0
}

type BoltData struct {
	MarkId string `protobuf:"bytes,1,opt,name=markId" json:"markId,omitempty"`
}

func (m *BoltData) Reset()                    { *m = BoltData{} }
func (m *BoltData) String() string            { return proto.CompactTextString(m) }
func (*BoltData) ProtoMessage()               {}
func (*BoltData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *BoltData) GetMarkId() string {
	if m != nil {
		return m.MarkId
	}
	return ""
}

type GasketData struct {
	GasketId  string  `protobuf:"bytes,1,opt,name=gasketId" json:"gasketId,omitempty"`
	EnvId     string  `protobuf:"bytes,2,opt,name=envId" json:"envId,omitempty"`
	Thickness float64 `protobuf:"fixed64,3,opt,name=thickness" json:"thickness,omitempty"`
	DOut      float64 `protobuf:"fixed64,4,opt,name=d_out,json=dOut" json:"d_out,omitempty"`
	DIn       float64 `protobuf:"fixed64,5,opt,name=d_in,json=dIn" json:"d_in,omitempty"`
}

func (m *GasketData) Reset()                    { *m = GasketData{} }
func (m *GasketData) String() string            { return proto.CompactTextString(m) }
func (*GasketData) ProtoMessage()               {}
func (*GasketData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GasketData) GetGasketId() string {
	if m != nil {
		return m.GasketId
	}
	return ""
}

func (m *GasketData) GetEnvId() string {
	if m != nil {
		return m.EnvId
	}
	return ""
}

func (m *GasketData) GetThickness() float64 {
	if m != nil {
		return m.Thickness
	}
	return 0
}

func (m *GasketData) GetDOut() float64 {
	if m != nil {
		return m.DOut
	}
	return 0
}

func (m *GasketData) GetDIn() float64 {
	if m != nil {
		return m.DIn
	}
	return 0
}

type EmbedData struct {
	MarkId    string  `protobuf:"bytes,1,opt,name=markId" json:"markId,omitempty"`
	Thickness float64 `protobuf:"fixed64,2,opt,name=thickness" json:"thickness,omitempty"`
}

func (m *EmbedData) Reset()                    { *m = EmbedData{} }
func (m *EmbedData) String() string            { return proto.CompactTextString(m) }
func (*EmbedData) ProtoMessage()               {}
func (*EmbedData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *EmbedData) GetMarkId() string {
	if m != nil {
		return m.MarkId
	}
	return ""
}

func (m *EmbedData) GetThickness() float64 {
	if m != nil {
		return m.Thickness
	}
	return 0
}

type FlangeRequest struct {
	Pressure      float64                   `protobuf:"fixed64,1,opt,name=pressure" json:"pressure,omitempty"`
	AxialForce    int32                     `protobuf:"varint,2,opt,name=axialForce" json:"axialForce,omitempty"`
	BendingMoment int32                     `protobuf:"varint,3,opt,name=bendingMoment" json:"bendingMoment,omitempty"`
	Temp          float64                   `protobuf:"fixed64,4,opt,name=temp" json:"temp,omitempty"`
	IsWork        bool                      `protobuf:"varint,5,opt,name=isWork" json:"isWork,omitempty"`
	Flanges       FlangeRequest_Flanges     `protobuf:"varint,6,opt,name=flanges,enum=moment_proto.FlangeRequest_Flanges" json:"flanges,omitempty"`
	IsSameFlange  bool                      `protobuf:"varint,7,opt,name=isSameFlange" json:"isSameFlange,omitempty"`
	IsEmbedded    bool                      `protobuf:"varint,8,opt,name=isEmbedded" json:"isEmbedded,omitempty"`
	Type          FlangeRequest_Type        `protobuf:"varint,9,opt,name=type,enum=moment_proto.FlangeRequest_Type" json:"type,omitempty"`
	Condition     FlangeRequest_Condition   `protobuf:"varint,10,opt,name=condition,enum=moment_proto.FlangeRequest_Condition" json:"condition,omitempty"`
	Calculation   FlangeRequest_Calcutation `protobuf:"varint,11,opt,name=calculation,enum=moment_proto.FlangeRequest_Calcutation" json:"calculation,omitempty"`
	FlangesData   []*FlangeData             `protobuf:"bytes,12,rep,name=flangesData" json:"flangesData,omitempty"`
	Bolts         *BoltData                 `protobuf:"bytes,13,opt,name=bolts" json:"bolts,omitempty"`
	Gasket        *GasketData               `protobuf:"bytes,14,opt,name=gasket" json:"gasket,omitempty"`
	Embed         *EmbedData                `protobuf:"bytes,15,opt,name=embed" json:"embed,omitempty"`
}

func (m *FlangeRequest) Reset()                    { *m = FlangeRequest{} }
func (m *FlangeRequest) String() string            { return proto.CompactTextString(m) }
func (*FlangeRequest) ProtoMessage()               {}
func (*FlangeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *FlangeRequest) GetPressure() float64 {
	if m != nil {
		return m.Pressure
	}
	return 0
}

func (m *FlangeRequest) GetAxialForce() int32 {
	if m != nil {
		return m.AxialForce
	}
	return 0
}

func (m *FlangeRequest) GetBendingMoment() int32 {
	if m != nil {
		return m.BendingMoment
	}
	return 0
}

func (m *FlangeRequest) GetTemp() float64 {
	if m != nil {
		return m.Temp
	}
	return 0
}

func (m *FlangeRequest) GetIsWork() bool {
	if m != nil {
		return m.IsWork
	}
	return false
}

func (m *FlangeRequest) GetFlanges() FlangeRequest_Flanges {
	if m != nil {
		return m.Flanges
	}
	return FlangeRequest_isolated
}

func (m *FlangeRequest) GetIsSameFlange() bool {
	if m != nil {
		return m.IsSameFlange
	}
	return false
}

func (m *FlangeRequest) GetIsEmbedded() bool {
	if m != nil {
		return m.IsEmbedded
	}
	return false
}

func (m *FlangeRequest) GetType() FlangeRequest_Type {
	if m != nil {
		return m.Type
	}
	return FlangeRequest_bolt
}

func (m *FlangeRequest) GetCondition() FlangeRequest_Condition {
	if m != nil {
		return m.Condition
	}
	return FlangeRequest_uncontrollable
}

func (m *FlangeRequest) GetCalculation() FlangeRequest_Calcutation {
	if m != nil {
		return m.Calculation
	}
	return FlangeRequest_basis
}

func (m *FlangeRequest) GetFlangesData() []*FlangeData {
	if m != nil {
		return m.FlangesData
	}
	return nil
}

func (m *FlangeRequest) GetBolts() *BoltData {
	if m != nil {
		return m.Bolts
	}
	return nil
}

func (m *FlangeRequest) GetGasket() *GasketData {
	if m != nil {
		return m.Gasket
	}
	return nil
}

func (m *FlangeRequest) GetEmbed() *EmbedData {
	if m != nil {
		return m.Embed
	}
	return nil
}

type FlangeResult struct {
	DOut         float64 `protobuf:"fixed64,1,opt,name=dOut" json:"dOut,omitempty"`
	D            float64 `protobuf:"fixed64,2,opt,name=d" json:"d,omitempty"`
	Dk           float64 `protobuf:"fixed64,3,opt,name=dk" json:"dk,omitempty"`
	Dnk          float64 `protobuf:"fixed64,4,opt,name=dnk" json:"dnk,omitempty"`
	Ds           float64 `protobuf:"fixed64,5,opt,name=ds" json:"ds,omitempty"`
	H            float64 `protobuf:"fixed64,6,opt,name=h" json:"h,omitempty"`
	Hk           float64 `protobuf:"fixed64,7,opt,name=hk" json:"hk,omitempty"`
	S0           float64 `protobuf:"fixed64,8,opt,name=s0" json:"s0,omitempty"`
	S1           float64 `protobuf:"fixed64,9,opt,name=s1" json:"s1,omitempty"`
	L            float64 `protobuf:"fixed64,10,opt,name=l" json:"l,omitempty"`
	D6           float64 `protobuf:"fixed64,11,opt,name=d6" json:"d6,omitempty"`
	C            float64 `protobuf:"fixed64,12,opt,name=c" json:"c,omitempty"`
	Tf           float64 `protobuf:"fixed64,13,opt,name=tf" json:"tf,omitempty"`
	Tk           float64 `protobuf:"fixed64,14,opt,name=tk" json:"tk,omitempty"`
	AlphaK       float64 `protobuf:"fixed64,15,opt,name=alphaK" json:"alphaK,omitempty"`
	EpsilonKAt20 float64 `protobuf:"fixed64,16,opt,name=epsilonKAt20" json:"epsilonKAt20,omitempty"`
	EpsilonK     float64 `protobuf:"fixed64,17,opt,name=epsilonK" json:"epsilonK,omitempty"`
	SigmaKAt20   float64 `protobuf:"fixed64,18,opt,name=sigmaKAt20" json:"sigmaKAt20,omitempty"`
	SigmaK       float64 `protobuf:"fixed64,19,opt,name=sigmaK" json:"sigmaK,omitempty"`
	AlphaF       float64 `protobuf:"fixed64,20,opt,name=alphaF" json:"alphaF,omitempty"`
	EpsilonAt20  float64 `protobuf:"fixed64,21,opt,name=epsilonAt20" json:"epsilonAt20,omitempty"`
	Epsilon      float64 `protobuf:"fixed64,22,opt,name=epsilon" json:"epsilon,omitempty"`
	SigmaAt20    float64 `protobuf:"fixed64,23,opt,name=sigmaAt20" json:"sigmaAt20,omitempty"`
	Sigma        float64 `protobuf:"fixed64,24,opt,name=sigma" json:"sigma,omitempty"`
	SigmaM       float64 `protobuf:"fixed64,25,opt,name=sigmaM" json:"sigmaM,omitempty"`
	SigmaMAt20   float64 `protobuf:"fixed64,26,opt,name=sigmaMAt20" json:"sigmaMAt20,omitempty"`
	SigmaR       float64 `protobuf:"fixed64,27,opt,name=sigmaR" json:"sigmaR,omitempty"`
	SigmaRAt20   float64 `protobuf:"fixed64,28,opt,name=sigmaRAt20" json:"sigmaRAt20,omitempty"`
	Material     string  `protobuf:"bytes,29,opt,name=material" json:"material,omitempty"`
}

func (m *FlangeResult) Reset()                    { *m = FlangeResult{} }
func (m *FlangeResult) String() string            { return proto.CompactTextString(m) }
func (*FlangeResult) ProtoMessage()               {}
func (*FlangeResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *FlangeResult) GetDOut() float64 {
	if m != nil {
		return m.DOut
	}
	return 0
}

func (m *FlangeResult) GetD() float64 {
	if m != nil {
		return m.D
	}
	return 0
}

func (m *FlangeResult) GetDk() float64 {
	if m != nil {
		return m.Dk
	}
	return 0
}

func (m *FlangeResult) GetDnk() float64 {
	if m != nil {
		return m.Dnk
	}
	return 0
}

func (m *FlangeResult) GetDs() float64 {
	if m != nil {
		return m.Ds
	}
	return 0
}

func (m *FlangeResult) GetH() float64 {
	if m != nil {
		return m.H
	}
	return 0
}

func (m *FlangeResult) GetHk() float64 {
	if m != nil {
		return m.Hk
	}
	return 0
}

func (m *FlangeResult) GetS0() float64 {
	if m != nil {
		return m.S0
	}
	return 0
}

func (m *FlangeResult) GetS1() float64 {
	if m != nil {
		return m.S1
	}
	return 0
}

func (m *FlangeResult) GetL() float64 {
	if m != nil {
		return m.L
	}
	return 0
}

func (m *FlangeResult) GetD6() float64 {
	if m != nil {
		return m.D6
	}
	return 0
}

func (m *FlangeResult) GetC() float64 {
	if m != nil {
		return m.C
	}
	return 0
}

func (m *FlangeResult) GetTf() float64 {
	if m != nil {
		return m.Tf
	}
	return 0
}

func (m *FlangeResult) GetTk() float64 {
	if m != nil {
		return m.Tk
	}
	return 0
}

func (m *FlangeResult) GetAlphaK() float64 {
	if m != nil {
		return m.AlphaK
	}
	return 0
}

func (m *FlangeResult) GetEpsilonKAt20() float64 {
	if m != nil {
		return m.EpsilonKAt20
	}
	return 0
}

func (m *FlangeResult) GetEpsilonK() float64 {
	if m != nil {
		return m.EpsilonK
	}
	return 0
}

func (m *FlangeResult) GetSigmaKAt20() float64 {
	if m != nil {
		return m.SigmaKAt20
	}
	return 0
}

func (m *FlangeResult) GetSigmaK() float64 {
	if m != nil {
		return m.SigmaK
	}
	return 0
}

func (m *FlangeResult) GetAlphaF() float64 {
	if m != nil {
		return m.AlphaF
	}
	return 0
}

func (m *FlangeResult) GetEpsilonAt20() float64 {
	if m != nil {
		return m.EpsilonAt20
	}
	return 0
}

func (m *FlangeResult) GetEpsilon() float64 {
	if m != nil {
		return m.Epsilon
	}
	return 0
}

func (m *FlangeResult) GetSigmaAt20() float64 {
	if m != nil {
		return m.SigmaAt20
	}
	return 0
}

func (m *FlangeResult) GetSigma() float64 {
	if m != nil {
		return m.Sigma
	}
	return 0
}

func (m *FlangeResult) GetSigmaM() float64 {
	if m != nil {
		return m.SigmaM
	}
	return 0
}

func (m *FlangeResult) GetSigmaMAt20() float64 {
	if m != nil {
		return m.SigmaMAt20
	}
	return 0
}

func (m *FlangeResult) GetSigmaR() float64 {
	if m != nil {
		return m.SigmaR
	}
	return 0
}

func (m *FlangeResult) GetSigmaRAt20() float64 {
	if m != nil {
		return m.SigmaRAt20
	}
	return 0
}

func (m *FlangeResult) GetMaterial() string {
	if m != nil {
		return m.Material
	}
	return ""
}

type BoltResult struct {
	Diameter    int32   `protobuf:"varint,1,opt,name=diameter" json:"diameter,omitempty"`
	Area        float64 `protobuf:"fixed64,2,opt,name=area" json:"area,omitempty"`
	Count       int32   `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	Lenght      float64 `protobuf:"fixed64,4,opt,name=lenght" json:"lenght,omitempty"`
	Temp        float64 `protobuf:"fixed64,5,opt,name=temp" json:"temp,omitempty"`
	Alpha       float64 `protobuf:"fixed64,6,opt,name=alpha" json:"alpha,omitempty"`
	EpsilonAt20 float64 `protobuf:"fixed64,7,opt,name=epsilonAt20" json:"epsilonAt20,omitempty"`
	Epsilon     float64 `protobuf:"fixed64,8,opt,name=epsilon" json:"epsilon,omitempty"`
	SigmaAt20   float64 `protobuf:"fixed64,9,opt,name=sigmaAt20" json:"sigmaAt20,omitempty"`
	Sigma       float64 `protobuf:"fixed64,10,opt,name=sigma" json:"sigma,omitempty"`
}

func (m *BoltResult) Reset()                    { *m = BoltResult{} }
func (m *BoltResult) String() string            { return proto.CompactTextString(m) }
func (*BoltResult) ProtoMessage()               {}
func (*BoltResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *BoltResult) GetDiameter() int32 {
	if m != nil {
		return m.Diameter
	}
	return 0
}

func (m *BoltResult) GetArea() float64 {
	if m != nil {
		return m.Area
	}
	return 0
}

func (m *BoltResult) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *BoltResult) GetLenght() float64 {
	if m != nil {
		return m.Lenght
	}
	return 0
}

func (m *BoltResult) GetTemp() float64 {
	if m != nil {
		return m.Temp
	}
	return 0
}

func (m *BoltResult) GetAlpha() float64 {
	if m != nil {
		return m.Alpha
	}
	return 0
}

func (m *BoltResult) GetEpsilonAt20() float64 {
	if m != nil {
		return m.EpsilonAt20
	}
	return 0
}

func (m *BoltResult) GetEpsilon() float64 {
	if m != nil {
		return m.Epsilon
	}
	return 0
}

func (m *BoltResult) GetSigmaAt20() float64 {
	if m != nil {
		return m.SigmaAt20
	}
	return 0
}

func (m *BoltResult) GetSigma() float64 {
	if m != nil {
		return m.Sigma
	}
	return 0
}

type GasketResult struct {
	GasketId        string  `protobuf:"bytes,1,opt,name=gasketId" json:"gasketId,omitempty"`
	EnvId           string  `protobuf:"bytes,2,opt,name=envId" json:"envId,omitempty"`
	Thickness       float64 `protobuf:"fixed64,3,opt,name=thickness" json:"thickness,omitempty"`
	DOut            float64 `protobuf:"fixed64,4,opt,name=d_out,json=dOut" json:"d_out,omitempty"`
	Width           float64 `protobuf:"fixed64,5,opt,name=width" json:"width,omitempty"`
	M               float64 `protobuf:"fixed64,6,opt,name=m" json:"m,omitempty"`
	Pres            float64 `protobuf:"fixed64,7,opt,name=pres" json:"pres,omitempty"`
	Compression     float64 `protobuf:"fixed64,8,opt,name=compression" json:"compression,omitempty"`
	Epsilon         float64 `protobuf:"fixed64,9,opt,name=epsilon" json:"epsilon,omitempty"`
	PermissiblePres float64 `protobuf:"fixed64,10,opt,name=permissiblePres" json:"permissiblePres,omitempty"`
}

func (m *GasketResult) Reset()                    { *m = GasketResult{} }
func (m *GasketResult) String() string            { return proto.CompactTextString(m) }
func (*GasketResult) ProtoMessage()               {}
func (*GasketResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *GasketResult) GetGasketId() string {
	if m != nil {
		return m.GasketId
	}
	return ""
}

func (m *GasketResult) GetEnvId() string {
	if m != nil {
		return m.EnvId
	}
	return ""
}

func (m *GasketResult) GetThickness() float64 {
	if m != nil {
		return m.Thickness
	}
	return 0
}

func (m *GasketResult) GetDOut() float64 {
	if m != nil {
		return m.DOut
	}
	return 0
}

func (m *GasketResult) GetWidth() float64 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *GasketResult) GetM() float64 {
	if m != nil {
		return m.M
	}
	return 0
}

func (m *GasketResult) GetPres() float64 {
	if m != nil {
		return m.Pres
	}
	return 0
}

func (m *GasketResult) GetCompression() float64 {
	if m != nil {
		return m.Compression
	}
	return 0
}

func (m *GasketResult) GetEpsilon() float64 {
	if m != nil {
		return m.Epsilon
	}
	return 0
}

func (m *GasketResult) GetPermissiblePres() float64 {
	if m != nil {
		return m.PermissiblePres
	}
	return 0
}

type EmbedResult struct {
	MarkId    string  `protobuf:"bytes,1,opt,name=markId" json:"markId,omitempty"`
	Thickness float64 `protobuf:"fixed64,2,opt,name=thickness" json:"thickness,omitempty"`
	Alpfa     float64 `protobuf:"fixed64,3,opt,name=alpfa" json:"alpfa,omitempty"`
	Temp      float64 `protobuf:"fixed64,4,opt,name=temp" json:"temp,omitempty"`
}

func (m *EmbedResult) Reset()                    { *m = EmbedResult{} }
func (m *EmbedResult) String() string            { return proto.CompactTextString(m) }
func (*EmbedResult) ProtoMessage()               {}
func (*EmbedResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *EmbedResult) GetMarkId() string {
	if m != nil {
		return m.MarkId
	}
	return ""
}

func (m *EmbedResult) GetThickness() float64 {
	if m != nil {
		return m.Thickness
	}
	return 0
}

func (m *EmbedResult) GetAlpfa() float64 {
	if m != nil {
		return m.Alpfa
	}
	return 0
}

func (m *EmbedResult) GetTemp() float64 {
	if m != nil {
		return m.Temp
	}
	return 0
}

type CalculatedFlange struct {
	B0      float64 `protobuf:"fixed64,1,opt,name=b0" json:"b0,omitempty"`
	Dsp     float64 `protobuf:"fixed64,2,opt,name=Dsp,json=dsp" json:"Dsp,omitempty"`
	Po      float64 `protobuf:"fixed64,3,opt,name=Po,json=po" json:"Po,omitempty"`
	Rp      float64 `protobuf:"fixed64,4,opt,name=Rp,json=rp" json:"Rp,omitempty"`
	A       float64 `protobuf:"fixed64,5,opt,name=A,json=a" json:"A,omitempty"`
	Qd      float64 `protobuf:"fixed64,6,opt,name=Qd,json=qd" json:"Qd,omitempty"`
	Qfm     float64 `protobuf:"fixed64,7,opt,name=Qfm,json=qfm" json:"Qfm,omitempty"`
	Qt      float64 `protobuf:"fixed64,8,opt,name=Qt,json=qt" json:"Qt,omitempty"`
	Pb      float64 `protobuf:"fixed64,9,opt,name=Pb,json=pb" json:"Pb,omitempty"`
	Alpha   float64 `protobuf:"fixed64,10,opt,name=alpha" json:"alpha,omitempty"`
	AlphaM  float64 `protobuf:"fixed64,11,opt,name=alphaM" json:"alphaM,omitempty"`
	Pb1     float64 `protobuf:"fixed64,12,opt,name=Pb1,json=pb1" json:"Pb1,omitempty"`
	Pb2     float64 `protobuf:"fixed64,13,opt,name=Pb2,json=pb2" json:"Pb2,omitempty"`
	Pbr     float64 `protobuf:"fixed64,14,opt,name=Pbr,json=pbr" json:"Pbr,omitempty"`
	SigmaB1 float64 `protobuf:"fixed64,15,opt,name=sigmaB1" json:"sigmaB1,omitempty"`
	SigmaB2 float64 `protobuf:"fixed64,16,opt,name=sigmaB2" json:"sigmaB2,omitempty"`
	DSigmaM float64 `protobuf:"fixed64,17,opt,name=dSigmaM" json:"dSigmaM,omitempty"`
	DSigmaR float64 `protobuf:"fixed64,18,opt,name=dSigmaR" json:"dSigmaR,omitempty"`
	Q       float64 `protobuf:"fixed64,19,opt,name=q" json:"q,omitempty"`
	QP      float64 `protobuf:"fixed64,20,opt,name=qP" json:"qP,omitempty"`
	Mkp     float64 `protobuf:"fixed64,21,opt,name=Mkp,json=mkp" json:"Mkp,omitempty"`
	Mkp1    float64 `protobuf:"fixed64,22,opt,name=Mkp1,json=mkp1" json:"Mkp1,omitempty"`
	Mrek    float64 `protobuf:"fixed64,23,opt,name=Mrek,json=mrek" json:"Mrek,omitempty"`
	Qrek    float64 `protobuf:"fixed64,24,opt,name=Qrek,json=qrek" json:"Qrek,omitempty"`
	Mmax    float64 `protobuf:"fixed64,25,opt,name=Mmax,json=mmax" json:"Mmax,omitempty"`
	Qmax    float64 `protobuf:"fixed64,26,opt,name=Qmax,json=qmax" json:"Qmax,omitempty"`
}

func (m *CalculatedFlange) Reset()                    { *m = CalculatedFlange{} }
func (m *CalculatedFlange) String() string            { return proto.CompactTextString(m) }
func (*CalculatedFlange) ProtoMessage()               {}
func (*CalculatedFlange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *CalculatedFlange) GetB0() float64 {
	if m != nil {
		return m.B0
	}
	return 0
}

func (m *CalculatedFlange) GetDsp() float64 {
	if m != nil {
		return m.Dsp
	}
	return 0
}

func (m *CalculatedFlange) GetPo() float64 {
	if m != nil {
		return m.Po
	}
	return 0
}

func (m *CalculatedFlange) GetRp() float64 {
	if m != nil {
		return m.Rp
	}
	return 0
}

func (m *CalculatedFlange) GetA() float64 {
	if m != nil {
		return m.A
	}
	return 0
}

func (m *CalculatedFlange) GetQd() float64 {
	if m != nil {
		return m.Qd
	}
	return 0
}

func (m *CalculatedFlange) GetQfm() float64 {
	if m != nil {
		return m.Qfm
	}
	return 0
}

func (m *CalculatedFlange) GetQt() float64 {
	if m != nil {
		return m.Qt
	}
	return 0
}

func (m *CalculatedFlange) GetPb() float64 {
	if m != nil {
		return m.Pb
	}
	return 0
}

func (m *CalculatedFlange) GetAlpha() float64 {
	if m != nil {
		return m.Alpha
	}
	return 0
}

func (m *CalculatedFlange) GetAlphaM() float64 {
	if m != nil {
		return m.AlphaM
	}
	return 0
}

func (m *CalculatedFlange) GetPb1() float64 {
	if m != nil {
		return m.Pb1
	}
	return 0
}

func (m *CalculatedFlange) GetPb2() float64 {
	if m != nil {
		return m.Pb2
	}
	return 0
}

func (m *CalculatedFlange) GetPbr() float64 {
	if m != nil {
		return m.Pbr
	}
	return 0
}

func (m *CalculatedFlange) GetSigmaB1() float64 {
	if m != nil {
		return m.SigmaB1
	}
	return 0
}

func (m *CalculatedFlange) GetSigmaB2() float64 {
	if m != nil {
		return m.SigmaB2
	}
	return 0
}

func (m *CalculatedFlange) GetDSigmaM() float64 {
	if m != nil {
		return m.DSigmaM
	}
	return 0
}

func (m *CalculatedFlange) GetDSigmaR() float64 {
	if m != nil {
		return m.DSigmaR
	}
	return 0
}

func (m *CalculatedFlange) GetQ() float64 {
	if m != nil {
		return m.Q
	}
	return 0
}

func (m *CalculatedFlange) GetQP() float64 {
	if m != nil {
		return m.QP
	}
	return 0
}

func (m *CalculatedFlange) GetMkp() float64 {
	if m != nil {
		return m.Mkp
	}
	return 0
}

func (m *CalculatedFlange) GetMkp1() float64 {
	if m != nil {
		return m.Mkp1
	}
	return 0
}

func (m *CalculatedFlange) GetMrek() float64 {
	if m != nil {
		return m.Mrek
	}
	return 0
}

func (m *CalculatedFlange) GetQrek() float64 {
	if m != nil {
		return m.Qrek
	}
	return 0
}

func (m *CalculatedFlange) GetMmax() float64 {
	if m != nil {
		return m.Mmax
	}
	return 0
}

func (m *CalculatedFlange) GetQmax() float64 {
	if m != nil {
		return m.Qmax
	}
	return 0
}

type FlangeResponse struct {
	IsSameFlange bool              `protobuf:"varint,1,opt,name=isSameFlange" json:"isSameFlange,omitempty"`
	Flanges      []*FlangeResult   `protobuf:"bytes,2,rep,name=flanges" json:"flanges,omitempty"`
	Bolt         *BoltResult       `protobuf:"bytes,3,opt,name=bolt" json:"bolt,omitempty"`
	Gasket       *GasketResult     `protobuf:"bytes,4,opt,name=gasket" json:"gasket,omitempty"`
	Embed        *EmbedResult      `protobuf:"bytes,5,opt,name=embed" json:"embed,omitempty"`
	Calc         *CalculatedFlange `protobuf:"bytes,6,opt,name=calc" json:"calc,omitempty"`
}

func (m *FlangeResponse) Reset()                    { *m = FlangeResponse{} }
func (m *FlangeResponse) String() string            { return proto.CompactTextString(m) }
func (*FlangeResponse) ProtoMessage()               {}
func (*FlangeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *FlangeResponse) GetIsSameFlange() bool {
	if m != nil {
		return m.IsSameFlange
	}
	return false
}

func (m *FlangeResponse) GetFlanges() []*FlangeResult {
	if m != nil {
		return m.Flanges
	}
	return nil
}

func (m *FlangeResponse) GetBolt() *BoltResult {
	if m != nil {
		return m.Bolt
	}
	return nil
}

func (m *FlangeResponse) GetGasket() *GasketResult {
	if m != nil {
		return m.Gasket
	}
	return nil
}

func (m *FlangeResponse) GetEmbed() *EmbedResult {
	if m != nil {
		return m.Embed
	}
	return nil
}

func (m *FlangeResponse) GetCalc() *CalculatedFlange {
	if m != nil {
		return m.Calc
	}
	return nil
}

func init() {
	proto.RegisterType((*PingRequest)(nil), "moment_proto.PingRequest")
	proto.RegisterType((*PingResponse)(nil), "moment_proto.PingResponse")
	proto.RegisterType((*Gasket)(nil), "moment_proto.Gasket")
	proto.RegisterType((*FlangeData)(nil), "moment_proto.FlangeData")
	proto.RegisterType((*BoltData)(nil), "moment_proto.BoltData")
	proto.RegisterType((*GasketData)(nil), "moment_proto.GasketData")
	proto.RegisterType((*EmbedData)(nil), "moment_proto.EmbedData")
	proto.RegisterType((*FlangeRequest)(nil), "moment_proto.FlangeRequest")
	proto.RegisterType((*FlangeResult)(nil), "moment_proto.FlangeResult")
	proto.RegisterType((*BoltResult)(nil), "moment_proto.BoltResult")
	proto.RegisterType((*GasketResult)(nil), "moment_proto.GasketResult")
	proto.RegisterType((*EmbedResult)(nil), "moment_proto.EmbedResult")
	proto.RegisterType((*CalculatedFlange)(nil), "moment_proto.CalculatedFlange")
	proto.RegisterType((*FlangeResponse)(nil), "moment_proto.FlangeResponse")
	proto.RegisterEnum("moment_proto.FlangeData_Type", FlangeData_Type_name, FlangeData_Type_value)
	proto.RegisterEnum("moment_proto.FlangeRequest_Flanges", FlangeRequest_Flanges_name, FlangeRequest_Flanges_value)
	proto.RegisterEnum("moment_proto.FlangeRequest_Type", FlangeRequest_Type_name, FlangeRequest_Type_value)
	proto.RegisterEnum("moment_proto.FlangeRequest_Condition", FlangeRequest_Condition_name, FlangeRequest_Condition_value)
	proto.RegisterEnum("moment_proto.FlangeRequest_Calcutation", FlangeRequest_Calcutation_name, FlangeRequest_Calcutation_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PingService service

type PingServiceClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
}

type pingServiceClient struct {
	cc *grpc.ClientConn
}

func NewPingServiceClient(cc *grpc.ClientConn) PingServiceClient {
	return &pingServiceClient{cc}
}

func (c *pingServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := grpc.Invoke(ctx, "/moment_proto.PingService/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PingService service

type PingServiceServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
}

func RegisterPingServiceServer(s *grpc.Server, srv PingServiceServer) {
	s.RegisterService(&_PingService_serviceDesc, srv)
}

func _PingService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PingServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_proto.PingService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PingServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "moment_proto.PingService",
	HandlerType: (*PingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _PingService_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/moment.proto",
}

// Client API for FlangeService service

type FlangeServiceClient interface {
	CalculateFlange(ctx context.Context, in *FlangeRequest, opts ...grpc.CallOption) (*FlangeResponse, error)
}

type flangeServiceClient struct {
	cc *grpc.ClientConn
}

func NewFlangeServiceClient(cc *grpc.ClientConn) FlangeServiceClient {
	return &flangeServiceClient{cc}
}

func (c *flangeServiceClient) CalculateFlange(ctx context.Context, in *FlangeRequest, opts ...grpc.CallOption) (*FlangeResponse, error) {
	out := new(FlangeResponse)
	err := grpc.Invoke(ctx, "/moment_proto.FlangeService/CalculateFlange", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FlangeService service

type FlangeServiceServer interface {
	CalculateFlange(context.Context, *FlangeRequest) (*FlangeResponse, error)
}

func RegisterFlangeServiceServer(s *grpc.Server, srv FlangeServiceServer) {
	s.RegisterService(&_FlangeService_serviceDesc, srv)
}

func _FlangeService_CalculateFlange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlangeServiceServer).CalculateFlange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_proto.FlangeService/CalculateFlange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlangeServiceServer).CalculateFlange(ctx, req.(*FlangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FlangeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "moment_proto.FlangeService",
	HandlerType: (*FlangeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CalculateFlange",
			Handler:    _FlangeService_CalculateFlange_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/moment.proto",
}

func init() { proto.RegisterFile("proto/moment.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1527 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0xdb, 0x6e, 0xdb, 0x46,
	0x13, 0xf6, 0x52, 0xa4, 0x2d, 0x8d, 0x64, 0x5b, 0xd9, 0xf8, 0x4f, 0x18, 0xe5, 0x00, 0x83, 0x7f,
	0x9b, 0xfa, 0x22, 0x75, 0x2c, 0x35, 0xc8, 0x45, 0x8b, 0x5c, 0xe4, 0x50, 0x17, 0x46, 0x22, 0xd4,
	0xd9, 0x14, 0x28, 0x50, 0xa0, 0x08, 0x56, 0xe2, 0x5a, 0x22, 0x78, 0x14, 0x49, 0x25, 0xf6, 0x7d,
	0x1e, 0xa0, 0x7d, 0x94, 0x3e, 0x50, 0xdf, 0xa2, 0x0f, 0x50, 0xcc, 0xec, 0x92, 0xa2, 0x5c, 0xc7,
	0x17, 0x05, 0x7a, 0x25, 0x7e, 0xb3, 0x33, 0xb3, 0xbb, 0x73, 0xf8, 0x76, 0x04, 0x3c, 0xcb, 0xd3,
	0x32, 0x7d, 0x1c, 0xa7, 0xb1, 0x4a, 0xca, 0x43, 0x02, 0xbc, 0xa7, 0xd1, 0x7b, 0x42, 0xde, 0x36,
	0x74, 0x4f, 0x83, 0x64, 0x26, 0xd4, 0x62, 0xa9, 0x8a, 0xd2, 0xf3, 0xa0, 0xa7, 0x61, 0x91, 0xa5,
	0x49, 0xa1, 0x38, 0x07, 0x3b, 0x0b, 0x92, 0x99, 0xcb, 0xf6, 0xd9, 0x41, 0x47, 0xd0, 0xb7, 0xd7,
	0x86, 0xcd, 0x1f, 0x64, 0x11, 0xaa, 0xd2, 0xfb, 0x93, 0x01, 0x1c, 0x47, 0x32, 0x99, 0xa9, 0x57,
	0xb2, 0x94, 0x7c, 0x08, 0x76, 0x79, 0x91, 0x29, 0x52, 0xde, 0x19, 0xdd, 0x3f, 0x6c, 0x6e, 0x74,
	0xb8, 0xd2, 0x3b, 0xfc, 0xe9, 0x22, 0x53, 0x82, 0x54, 0xf9, 0x03, 0x80, 0xa2, 0x94, 0x89, 0x2f,
	0xf3, 0xf2, 0xc4, 0x77, 0x2d, 0xda, 0xa5, 0x21, 0xe1, 0xb7, 0x60, 0x33, 0x96, 0x79, 0x78, 0xe2,
	0xbb, 0x2d, 0x5a, 0x33, 0x88, 0xef, 0x80, 0xe5, 0x5f, 0xb8, 0xf6, 0x3e, 0x3b, 0x70, 0x84, 0xe5,
	0x5f, 0x20, 0xce, 0x2e, 0x5c, 0x67, 0x9f, 0x1d, 0x30, 0x61, 0x65, 0x17, 0xfc, 0x1e, 0x74, 0xa6,
	0x69, 0x9e, 0xa7, 0x45, 0x90, 0x26, 0xee, 0x26, 0xa9, 0xad, 0x04, 0xde, 0x43, 0xb0, 0xf1, 0x0c,
	0x1c, 0x60, 0xf3, 0xa3, 0x8a, 0x7c, 0xe5, 0xf7, 0x37, 0x78, 0x1b, 0xec, 0xb3, 0x48, 0x96, 0x7d,
	0x46, 0x5f, 0xb9, 0x52, 0x7d, 0xcb, 0xf3, 0xa0, 0xfd, 0x22, 0x8d, 0x4a, 0xba, 0xdc, 0xea, 0x24,
	0xac, 0x79, 0x12, 0xef, 0x13, 0x03, 0xd0, 0xe1, 0x20, 0xb5, 0x01, 0xb4, 0x67, 0x84, 0x6a, 0xc5,
	0x1a, 0xf3, 0x3d, 0x70, 0x54, 0xf2, 0xa1, 0xbe, 0xa7, 0x06, 0x78, 0xd4, 0x72, 0x1e, 0x4c, 0xc3,
	0x44, 0x15, 0x05, 0xdd, 0x92, 0x89, 0x95, 0x80, 0xdf, 0x04, 0xc7, 0x7f, 0x9f, 0x2e, 0x4b, 0xba,
	0x2b, 0x13, 0xb6, 0xff, 0xe3, 0xb2, 0xe4, 0x37, 0xc0, 0xf6, 0xdf, 0x07, 0x89, 0xb9, 0x6f, 0xcb,
	0x3f, 0x49, 0xbc, 0xe7, 0xd0, 0xf9, 0x3e, 0x9e, 0x28, 0xff, 0xba, 0xb3, 0xae, 0x6f, 0x65, 0x5d,
	0xda, 0xca, 0xfb, 0x6b, 0x13, 0xb6, 0x75, 0x96, 0x4c, 0x35, 0xe0, 0x65, 0xb2, 0x5c, 0x15, 0xc5,
	0x32, 0xd7, 0x49, 0x65, 0xa2, 0xc6, 0x98, 0x39, 0x79, 0x1e, 0xc8, 0xe8, 0x38, 0xcd, 0xa7, 0x8a,
	0x9c, 0x39, 0xa2, 0x21, 0xe1, 0x5f, 0xc0, 0xf6, 0x44, 0x25, 0x7e, 0x90, 0xcc, 0xc6, 0x54, 0x06,
	0x74, 0x35, 0x47, 0xac, 0x0b, 0xb1, 0xbe, 0x4a, 0x15, 0x67, 0xd5, 0xed, 0xf0, 0x1b, 0x4f, 0x1f,
	0x14, 0x3f, 0xa7, 0x79, 0x48, 0xf7, 0x6b, 0x0b, 0x83, 0xf8, 0x33, 0xd8, 0x3a, 0xa3, 0xe3, 0x15,
	0x94, 0xd1, 0x9d, 0xd1, 0xff, 0xaf, 0xaa, 0x30, 0x73, 0x76, 0x83, 0x0a, 0x51, 0xd9, 0x70, 0x0f,
	0x7a, 0x41, 0xf1, 0x4e, 0xc6, 0x4a, 0xaf, 0xb8, 0x5b, 0xe4, 0x7c, 0x4d, 0x86, 0x97, 0x0a, 0x0a,
	0x8a, 0xa3, 0xaf, 0x7c, 0xb7, 0x4d, 0x1a, 0x0d, 0x09, 0x7f, 0x62, 0x2a, 0xbc, 0x43, 0xfb, 0xef,
	0x5f, 0xb7, 0x7f, 0xa3, 0xc8, 0x5f, 0x62, 0x31, 0x26, 0x7e, 0x50, 0x62, 0x31, 0x02, 0x99, 0x7e,
	0x79, 0x9d, 0xe9, 0xcb, 0x4a, 0x59, 0xac, 0xec, 0xf8, 0x09, 0x74, 0xa7, 0x32, 0x9a, 0x2e, 0x23,
	0x49, 0x6e, 0xba, 0xe4, 0xe6, 0xab, 0x6b, 0xdd, 0xa0, 0x7a, 0x49, 0xea, 0xa2, 0x69, 0xcb, 0xbf,
	0x85, 0xae, 0x09, 0x0a, 0x56, 0x8b, 0xdb, 0xdb, 0x6f, 0x1d, 0x74, 0x47, 0xee, 0xe7, 0xda, 0x55,
	0x34, 0x95, 0xf9, 0x23, 0x70, 0x26, 0x69, 0x54, 0x16, 0xee, 0xf6, 0x3e, 0x3b, 0xe8, 0x8e, 0x6e,
	0xad, 0x5b, 0x55, 0xdd, 0x22, 0xb4, 0x12, 0x3f, 0x82, 0x4d, 0x5d, 0xfd, 0xee, 0x0e, 0xa9, 0x5f,
	0xda, 0x64, 0xd5, 0x37, 0xc2, 0xe8, 0xf1, 0xaf, 0xc1, 0x51, 0x18, 0x6d, 0x77, 0x97, 0x0c, 0x6e,
	0xaf, 0x1b, 0xd4, 0x25, 0x2e, 0xb4, 0x96, 0xf7, 0x14, 0xb6, 0x4c, 0xa2, 0x79, 0x0f, 0xda, 0x41,
	0x91, 0x46, 0xb2, 0xa4, 0x76, 0xde, 0x85, 0x6e, 0x92, 0x26, 0x27, 0x95, 0x80, 0xe1, 0x72, 0x2c,
	0x93, 0xa5, 0x8c, 0xa2, 0x8b, 0xbe, 0xe5, 0xdd, 0x31, 0x0c, 0xd0, 0x06, 0x1b, 0x4f, 0xda, 0xdf,
	0xe0, 0x5b, 0xd0, 0xca, 0x82, 0xa4, 0xcf, 0xbc, 0x63, 0xe8, 0xd4, 0x09, 0xe0, 0x1c, 0x76, 0x96,
	0xc9, 0x34, 0x4d, 0xca, 0x3c, 0x8d, 0x22, 0x39, 0x89, 0x54, 0x7f, 0x83, 0xf7, 0xa1, 0xb7, 0x26,
	0x61, 0xfc, 0x26, 0xec, 0x36, 0x25, 0xa7, 0x41, 0xd2, 0xb7, 0xbc, 0x87, 0xd0, 0x6d, 0x64, 0x80,
	0x77, 0xc0, 0x99, 0xc8, 0x22, 0x28, 0xfa, 0x1b, 0x78, 0x94, 0xa2, 0xcc, 0x55, 0x32, 0x2b, 0xe7,
	0x7d, 0xe6, 0xfd, 0xe6, 0x40, 0xaf, 0x4a, 0x5c, 0xb1, 0x8c, 0xa8, 0x27, 0xb0, 0xcb, 0x4d, 0xc7,
	0xe9, 0x8e, 0xef, 0x01, 0xf3, 0x4d, 0xc7, 0x32, 0xcd, 0x7e, 0xa1, 0xe1, 0x0a, 0xcb, 0x0f, 0x79,
	0x1f, 0x5a, 0x7e, 0x12, 0x9a, 0x26, 0xc2, 0x4f, 0xd2, 0x28, 0x2a, 0x3e, 0xf4, 0x31, 0x38, 0x6c,
	0x4e, 0x5d, 0xc3, 0x04, 0x9b, 0xe3, 0xea, 0x3c, 0xa4, 0x06, 0x60, 0xc2, 0x9a, 0x93, 0x76, 0x71,
	0x44, 0xe5, 0xce, 0x84, 0x55, 0x1c, 0x11, 0x1e, 0x52, 0x91, 0x23, 0x1e, 0xa2, 0x75, 0x44, 0x85,
	0xcb, 0x04, 0x8b, 0xc8, 0xf7, 0x53, 0x2a, 0x40, 0xf4, 0xfd, 0x14, 0x57, 0xa7, 0x6e, 0x4f, 0xaf,
	0x4e, 0x71, 0xb5, 0x3c, 0xa3, 0xea, 0x60, 0xc2, 0x2a, 0xcf, 0x08, 0x87, 0x94, 0x7e, 0xc4, 0x21,
	0x76, 0xb7, 0x8c, 0xb2, 0xb9, 0x7c, 0x4d, 0x19, 0x66, 0xc2, 0x20, 0x6c, 0x4f, 0x95, 0x15, 0x41,
	0x94, 0x26, 0xaf, 0x9f, 0x97, 0xa3, 0x23, 0xb7, 0x4f, 0xab, 0x6b, 0x32, 0xe4, 0xa3, 0x0a, 0xbb,
	0x37, 0x34, 0x1f, 0x55, 0x98, 0x5e, 0x92, 0x60, 0x16, 0x4b, 0x6d, 0xcd, 0x69, 0xb5, 0x21, 0xc1,
	0x7d, 0x35, 0x72, 0x6f, 0xea, 0x7d, 0x35, 0xaa, 0xcf, 0x73, 0xec, 0xee, 0x35, 0xce, 0x73, 0xcc,
	0xf7, 0xa1, 0x6b, 0x7c, 0x93, 0xc3, 0xff, 0xd1, 0x62, 0x53, 0xc4, 0x5d, 0xd8, 0x32, 0xd0, 0xbd,
	0x45, 0xab, 0x15, 0x44, 0x9e, 0x25, 0xef, 0x64, 0x79, 0x5b, 0xf3, 0x6c, 0x2d, 0xc0, 0x67, 0x80,
	0x80, 0xeb, 0xd2, 0x8a, 0x06, 0xf5, 0xf9, 0xc6, 0xee, 0x9d, 0xc6, 0xf9, 0xc6, 0xf5, 0xbd, 0xc6,
	0xe4, 0x6c, 0xd0, 0xb8, 0xd7, 0x78, 0xed, 0x5e, 0xc2, 0xbd, 0xdb, 0xb0, 0x13, 0xb5, 0x9d, 0x20,
	0xbb, 0x7b, 0x0d, 0x3b, 0x51, 0xc5, 0x32, 0x96, 0xa5, 0xca, 0x03, 0x19, 0xb9, 0xf7, 0xf5, 0x43,
	0x55, 0x61, 0xef, 0x93, 0x05, 0x80, 0xad, 0x6c, 0x0a, 0x72, 0x00, 0x6d, 0x3f, 0x90, 0xb1, 0x2a,
	0x55, 0x4e, 0x45, 0xe9, 0x88, 0x1a, 0x63, 0xb1, 0xca, 0x5c, 0x49, 0x53, 0x9b, 0xf4, 0x8d, 0x17,
	0x9c, 0xa6, 0xcb, 0x9a, 0xf2, 0x35, 0xc0, 0x83, 0x46, 0x2a, 0x99, 0xcd, 0xab, 0xa7, 0xcc, 0xa0,
	0xfa, 0x09, 0x70, 0x1a, 0x4f, 0xc0, 0x1e, 0x38, 0x94, 0x06, 0x53, 0xb2, 0x1a, 0x5c, 0x4e, 0xc9,
	0xd6, 0xb5, 0x29, 0x69, 0x5f, 0x93, 0x92, 0xce, 0x67, 0x53, 0x02, 0x8d, 0x94, 0x78, 0xbf, 0x5b,
	0xd0, 0xd3, 0x14, 0xb5, 0x0a, 0xc4, 0x7f, 0xff, 0xb8, 0xef, 0x81, 0xf3, 0x31, 0xf0, 0xcb, 0xb9,
	0x09, 0x88, 0x06, 0xd8, 0x64, 0x71, 0xd5, 0xc0, 0x31, 0x8d, 0x65, 0xb9, 0x2a, 0x4c, 0x08, 0xe8,
	0x1b, 0xa3, 0x33, 0x4d, 0x63, 0x7a, 0x9f, 0x83, 0xfa, 0xfe, 0x4d, 0x51, 0x33, 0x3a, 0x9d, 0xf5,
	0xe8, 0x1c, 0xc0, 0x6e, 0xa6, 0xf2, 0x38, 0x28, 0x8a, 0x00, 0xf9, 0x0b, 0x5d, 0xeb, 0x48, 0x5c,
	0x16, 0x7b, 0x31, 0x74, 0x89, 0x84, 0x4d, 0x44, 0xfe, 0xd5, 0xa4, 0x61, 0xd2, 0x7b, 0x26, 0x4d,
	0x44, 0x34, 0xb8, 0x6a, 0x16, 0xf0, 0x3e, 0xd9, 0xd0, 0x7f, 0x69, 0x9e, 0x2e, 0xe5, 0x9b, 0x57,
	0x7a, 0x07, 0xac, 0xc9, 0x91, 0xa1, 0x47, 0x6b, 0x72, 0x84, 0xf4, 0xf7, 0xaa, 0xc8, 0xcc, 0x36,
	0x2d, 0xbf, 0xc8, 0x50, 0xe3, 0x34, 0xad, 0x08, 0x32, 0x4b, 0x11, 0x8b, 0xca, 0xb1, 0x95, 0x67,
	0x18, 0xcd, 0xe7, 0x26, 0xbe, 0x4c, 0xe2, 0xea, 0x5b, 0xdf, 0x04, 0xd7, 0x5a, 0xf8, 0xe8, 0xef,
	0xed, 0x59, 0x6c, 0x82, 0xdb, 0x5a, 0x9c, 0xc5, 0xa4, 0x51, 0x56, 0x04, 0xb9, 0x28, 0xc9, 0xff,
	0xa4, 0x22, 0xc8, 0x6c, 0xb2, 0xaa, 0x57, 0x68, 0xd6, 0x6b, 0x45, 0x2d, 0x63, 0x43, 0x96, 0x06,
	0xa1, 0xff, 0xd3, 0xc9, 0xd0, 0x50, 0x66, 0x2b, 0x9b, 0x0c, 0xb5, 0x64, 0x64, 0x58, 0xb3, 0x95,
	0x4d, 0x46, 0x5a, 0x92, 0x1b, 0xde, 0x6c, 0x65, 0x93, 0x1c, 0xb3, 0x47, 0x65, 0xf9, 0x62, 0x68,
	0x98, 0xb3, 0x82, 0xab, 0x95, 0x91, 0x61, 0xcd, 0x0a, 0xe2, 0x8a, 0xff, 0x4e, 0xb3, 0x8a, 0xe6,
	0xcb, 0x0a, 0xae, 0x56, 0x84, 0xe1, 0xca, 0x0a, 0x62, 0x6c, 0x16, 0x86, 0x23, 0xd9, 0x02, 0x6f,
	0xba, 0x38, 0x35, 0xd4, 0x68, 0x2d, 0x4e, 0xf1, 0x5c, 0xe3, 0x30, 0x33, 0x74, 0xd8, 0x8a, 0xc3,
	0x0c, 0xd3, 0x36, 0x0e, 0xb3, 0xa1, 0xe1, 0x40, 0x3b, 0x0e, 0xb3, 0x21, 0xc9, 0x72, 0x15, 0x1a,
	0xee, 0xb3, 0xe3, 0x5c, 0x85, 0x28, 0x7b, 0x8b, 0x32, 0xcd, 0x7a, 0xf6, 0xc2, 0xc8, 0xc6, 0xb1,
	0x3c, 0x37, 0x94, 0x67, 0xc7, 0xb1, 0x3c, 0x27, 0x3d, 0x94, 0x0d, 0x8c, 0x5e, 0x2c, 0xcf, 0xbd,
	0x3f, 0x2c, 0xd8, 0xa9, 0xdf, 0x48, 0xfd, 0xcf, 0xe4, 0xf2, 0x38, 0xc7, 0xae, 0x18, 0xe7, 0x9e,
	0xac, 0x26, 0x46, 0x8b, 0x86, 0x9c, 0xc1, 0xd5, 0xf3, 0x12, 0x96, 0xf2, 0x6a, 0x50, 0x7c, 0xa4,
	0x67, 0x02, 0x2a, 0x9f, 0x7f, 0x8c, 0x2c, 0x2b, 0x5a, 0x14, 0xa4, 0xc5, 0x47, 0xf5, 0x88, 0x63,
	0x93, 0xfe, 0xe0, 0xaa, 0x11, 0xc7, 0x58, 0x54, 0x43, 0xce, 0xe3, 0x6a, 0xc8, 0x71, 0xc8, 0xe4,
	0xce, 0x15, 0x43, 0x8e, 0xb1, 0xd0, 0x7a, 0x7c, 0x04, 0x36, 0x0e, 0x70, 0x54, 0xa3, 0xdd, 0xd1,
	0x83, 0x75, 0xfd, 0xcb, 0xfd, 0x21, 0x48, 0x77, 0xf4, 0x46, 0xff, 0xb3, 0x7b, 0xa7, 0xf2, 0x0f,
	0xc1, 0x54, 0xf1, 0x67, 0x60, 0x23, 0xe4, 0x97, 0x36, 0x6b, 0xfc, 0xf9, 0x1b, 0x0c, 0xae, 0x5a,
	0xd2, 0xe1, 0x1e, 0xfd, 0x5a, 0xfd, 0x37, 0xa8, 0xfc, 0xbd, 0x81, 0xdd, 0x7a, 0x63, 0x13, 0xee,
	0xbb, 0xd7, 0x4c, 0xa3, 0x83, 0x7b, 0x9f, 0x09, 0x3d, 0xb9, 0x7f, 0x71, 0xe3, 0x97, 0xdd, 0xc3,
	0xc7, 0xdf, 0x35, 0x35, 0x26, 0x9b, 0xf4, 0xf3, 0xcd, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x76,
	0xe5, 0xe9, 0x7f, 0xc4, 0x0e, 0x00, 0x00,
}
