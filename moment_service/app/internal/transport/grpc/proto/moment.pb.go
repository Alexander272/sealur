// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/moment.proto

/*
Package moment_proto is a generated protocol buffer package.

It is generated from these files:
	proto/moment.proto

It has these top-level messages:
	PingRequest
	PingResponse
	IdResponse
	Response
	Material
	MaterialWithIsEmpty
	GetMaterialsRequest
	CreateMaterialRequest
	UpdateMaterialRequest
	DeleteMaterialRequest
	MaterialsResponse
	MaterialsWithIsEmptyResponse
	GetMaterialsDataRequest
	MaterialsDataResponse
	Voltage
	CreateVoltageRequest
	UpdateVoltageRequest
	DeleteVoltageRequest
	Elasticity
	CreateElasticityRequest
	UpdateElasticityRequest
	DeleteElasticityRequest
	Alpha
	CreateAlphaRequest
	UpdateAlphaRequest
	DeleteAlphaRequest
	Gasket
	GetGasketRequest
	CreateGasketRequest
	UpdateGasketRequest
	DeleteGasketRequest
	GasketResponse
	GasketType
	GetGasketTypeRequest
	CreateGasketTypeRequest
	UpdateGasketTypeRequest
	DeleteGasketTypeRequest
	GasketTypeResponse
	Env
	GetEnvRequest
	CreateEnvRequest
	UpdateEnvRequest
	DeleteEnvRequest
	EnvResponse
	CreateEnvDataRequest
	UpdateEnvDataRequest
	DeleteEnvDataRequest
	CreateGasketDataRequest
	UpdateGasketDataRequest
	DeleteGasketDataRequest
	FlangeData
	BoltData
	GasketData
	EmbedData
	FlangeRequest
	FlangeResult
	BoltResult
	GasketResult
	EmbedResult
	StrengthResult
	CalcMomentStrength
	CalcMomentBasis
	CalculatedFlange
	CalcFormulas
	FlangeResponse
*/
package moment_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FlangeData_Type int32

const (
	FlangeData_welded FlangeData_Type = 0
	FlangeData_flat   FlangeData_Type = 1
	FlangeData_free   FlangeData_Type = 2
)

var FlangeData_Type_name = map[int32]string{
	0: "welded",
	1: "flat",
	2: "free",
}
var FlangeData_Type_value = map[string]int32{
	"welded": 0,
	"flat":   1,
	"free":   2,
}

func (x FlangeData_Type) String() string {
	return proto.EnumName(FlangeData_Type_name, int32(x))
}
func (FlangeData_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{50, 0} }

type FlangeRequest_Flanges int32

const (
	FlangeRequest_isolated    FlangeRequest_Flanges = 0
	FlangeRequest_nonIsolated FlangeRequest_Flanges = 1
	FlangeRequest_manually    FlangeRequest_Flanges = 2
)

var FlangeRequest_Flanges_name = map[int32]string{
	0: "isolated",
	1: "nonIsolated",
	2: "manually",
}
var FlangeRequest_Flanges_value = map[string]int32{
	"isolated":    0,
	"nonIsolated": 1,
	"manually":    2,
}

func (x FlangeRequest_Flanges) String() string {
	return proto.EnumName(FlangeRequest_Flanges_name, int32(x))
}
func (FlangeRequest_Flanges) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{54, 0} }

type FlangeRequest_Type int32

const (
	FlangeRequest_bolt FlangeRequest_Type = 0
	FlangeRequest_pin  FlangeRequest_Type = 1
)

var FlangeRequest_Type_name = map[int32]string{
	0: "bolt",
	1: "pin",
}
var FlangeRequest_Type_value = map[string]int32{
	"bolt": 0,
	"pin":  1,
}

func (x FlangeRequest_Type) String() string {
	return proto.EnumName(FlangeRequest_Type_name, int32(x))
}
func (FlangeRequest_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{54, 1} }

type FlangeRequest_Condition int32

const (
	FlangeRequest_uncontrollable  FlangeRequest_Condition = 0
	FlangeRequest_controllable    FlangeRequest_Condition = 1
	FlangeRequest_controllablePin FlangeRequest_Condition = 2
)

var FlangeRequest_Condition_name = map[int32]string{
	0: "uncontrollable",
	1: "controllable",
	2: "controllablePin",
}
var FlangeRequest_Condition_value = map[string]int32{
	"uncontrollable":  0,
	"controllable":    1,
	"controllablePin": 2,
}

func (x FlangeRequest_Condition) String() string {
	return proto.EnumName(FlangeRequest_Condition_name, int32(x))
}
func (FlangeRequest_Condition) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{54, 2} }

type FlangeRequest_Calcutation int32

const (
	FlangeRequest_basis    FlangeRequest_Calcutation = 0
	FlangeRequest_strength FlangeRequest_Calcutation = 1
)

var FlangeRequest_Calcutation_name = map[int32]string{
	0: "basis",
	1: "strength",
}
var FlangeRequest_Calcutation_value = map[string]int32{
	"basis":    0,
	"strength": 1,
}

func (x FlangeRequest_Calcutation) String() string {
	return proto.EnumName(FlangeRequest_Calcutation_name, int32(x))
}
func (FlangeRequest_Calcutation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{54, 3}
}

type PingRequest struct {
}

func (m *PingRequest) Reset()                    { *m = PingRequest{} }
func (m *PingRequest) String() string            { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()               {}
func (*PingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type PingResponse struct {
	Ping string `protobuf:"bytes,1,opt,name=ping" json:"ping,omitempty"`
}

func (m *PingResponse) Reset()                    { *m = PingResponse{} }
func (m *PingResponse) String() string            { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()               {}
func (*PingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PingResponse) GetPing() string {
	if m != nil {
		return m.Ping
	}
	return ""
}

type IdResponse struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *IdResponse) Reset()                    { *m = IdResponse{} }
func (m *IdResponse) String() string            { return proto.CompactTextString(m) }
func (*IdResponse) ProtoMessage()               {}
func (*IdResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *IdResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Response struct {
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type Material struct {
	Id    string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Title string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
}

func (m *Material) Reset()                    { *m = Material{} }
func (m *Material) String() string            { return proto.CompactTextString(m) }
func (*Material) ProtoMessage()               {}
func (*Material) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Material) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Material) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

type MaterialWithIsEmpty struct {
	Id                string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Title             string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	IsEmptyAlpha      bool   `protobuf:"varint,3,opt,name=IsEmptyAlpha,json=isEmptyAlpha" json:"IsEmptyAlpha,omitempty"`
	IsEmptyElasticity bool   `protobuf:"varint,4,opt,name=IsEmptyElasticity,json=isEmptyElasticity" json:"IsEmptyElasticity,omitempty"`
	IsEmptyVoltage    bool   `protobuf:"varint,5,opt,name=IsEmptyVoltage,json=isEmptyVoltage" json:"IsEmptyVoltage,omitempty"`
}

func (m *MaterialWithIsEmpty) Reset()                    { *m = MaterialWithIsEmpty{} }
func (m *MaterialWithIsEmpty) String() string            { return proto.CompactTextString(m) }
func (*MaterialWithIsEmpty) ProtoMessage()               {}
func (*MaterialWithIsEmpty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *MaterialWithIsEmpty) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MaterialWithIsEmpty) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *MaterialWithIsEmpty) GetIsEmptyAlpha() bool {
	if m != nil {
		return m.IsEmptyAlpha
	}
	return false
}

func (m *MaterialWithIsEmpty) GetIsEmptyElasticity() bool {
	if m != nil {
		return m.IsEmptyElasticity
	}
	return false
}

func (m *MaterialWithIsEmpty) GetIsEmptyVoltage() bool {
	if m != nil {
		return m.IsEmptyVoltage
	}
	return false
}

type GetMaterialsRequest struct {
}

func (m *GetMaterialsRequest) Reset()                    { *m = GetMaterialsRequest{} }
func (m *GetMaterialsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetMaterialsRequest) ProtoMessage()               {}
func (*GetMaterialsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type CreateMaterialRequest struct {
	Title string `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
}

func (m *CreateMaterialRequest) Reset()                    { *m = CreateMaterialRequest{} }
func (m *CreateMaterialRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateMaterialRequest) ProtoMessage()               {}
func (*CreateMaterialRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *CreateMaterialRequest) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

type UpdateMaterialRequest struct {
	Id    string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Title string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
}

func (m *UpdateMaterialRequest) Reset()                    { *m = UpdateMaterialRequest{} }
func (m *UpdateMaterialRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateMaterialRequest) ProtoMessage()               {}
func (*UpdateMaterialRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *UpdateMaterialRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateMaterialRequest) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

type DeleteMaterialRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteMaterialRequest) Reset()                    { *m = DeleteMaterialRequest{} }
func (m *DeleteMaterialRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteMaterialRequest) ProtoMessage()               {}
func (*DeleteMaterialRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *DeleteMaterialRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type MaterialsResponse struct {
	Materials []*Material `protobuf:"bytes,1,rep,name=materials" json:"materials,omitempty"`
}

func (m *MaterialsResponse) Reset()                    { *m = MaterialsResponse{} }
func (m *MaterialsResponse) String() string            { return proto.CompactTextString(m) }
func (*MaterialsResponse) ProtoMessage()               {}
func (*MaterialsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *MaterialsResponse) GetMaterials() []*Material {
	if m != nil {
		return m.Materials
	}
	return nil
}

type MaterialsWithIsEmptyResponse struct {
	Materials []*MaterialWithIsEmpty `protobuf:"bytes,1,rep,name=materials" json:"materials,omitempty"`
}

func (m *MaterialsWithIsEmptyResponse) Reset()                    { *m = MaterialsWithIsEmptyResponse{} }
func (m *MaterialsWithIsEmptyResponse) String() string            { return proto.CompactTextString(m) }
func (*MaterialsWithIsEmptyResponse) ProtoMessage()               {}
func (*MaterialsWithIsEmptyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *MaterialsWithIsEmptyResponse) GetMaterials() []*MaterialWithIsEmpty {
	if m != nil {
		return m.Materials
	}
	return nil
}

type GetMaterialsDataRequest struct {
	MarkId string `protobuf:"bytes,1,opt,name=markId" json:"markId,omitempty"`
}

func (m *GetMaterialsDataRequest) Reset()                    { *m = GetMaterialsDataRequest{} }
func (m *GetMaterialsDataRequest) String() string            { return proto.CompactTextString(m) }
func (*GetMaterialsDataRequest) ProtoMessage()               {}
func (*GetMaterialsDataRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *GetMaterialsDataRequest) GetMarkId() string {
	if m != nil {
		return m.MarkId
	}
	return ""
}

type MaterialsDataResponse struct {
	Voltage    []*MaterialsDataResponse_Voltage    `protobuf:"bytes,1,rep,name=voltage" json:"voltage,omitempty"`
	Elasticity []*MaterialsDataResponse_Elasticity `protobuf:"bytes,2,rep,name=elasticity" json:"elasticity,omitempty"`
	Alpha      []*MaterialsDataResponse_Alpha      `protobuf:"bytes,3,rep,name=alpha" json:"alpha,omitempty"`
}

func (m *MaterialsDataResponse) Reset()                    { *m = MaterialsDataResponse{} }
func (m *MaterialsDataResponse) String() string            { return proto.CompactTextString(m) }
func (*MaterialsDataResponse) ProtoMessage()               {}
func (*MaterialsDataResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *MaterialsDataResponse) GetVoltage() []*MaterialsDataResponse_Voltage {
	if m != nil {
		return m.Voltage
	}
	return nil
}

func (m *MaterialsDataResponse) GetElasticity() []*MaterialsDataResponse_Elasticity {
	if m != nil {
		return m.Elasticity
	}
	return nil
}

func (m *MaterialsDataResponse) GetAlpha() []*MaterialsDataResponse_Alpha {
	if m != nil {
		return m.Alpha
	}
	return nil
}

type MaterialsDataResponse_Voltage struct {
	Id          string  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Temperature float64 `protobuf:"fixed64,2,opt,name=temperature" json:"temperature,omitempty"`
	Voltage     float64 `protobuf:"fixed64,3,opt,name=voltage" json:"voltage,omitempty"`
}

func (m *MaterialsDataResponse_Voltage) Reset()         { *m = MaterialsDataResponse_Voltage{} }
func (m *MaterialsDataResponse_Voltage) String() string { return proto.CompactTextString(m) }
func (*MaterialsDataResponse_Voltage) ProtoMessage()    {}
func (*MaterialsDataResponse_Voltage) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{13, 0}
}

func (m *MaterialsDataResponse_Voltage) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MaterialsDataResponse_Voltage) GetTemperature() float64 {
	if m != nil {
		return m.Temperature
	}
	return 0
}

func (m *MaterialsDataResponse_Voltage) GetVoltage() float64 {
	if m != nil {
		return m.Voltage
	}
	return 0
}

type MaterialsDataResponse_Elasticity struct {
	Id          string  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Temperature float64 `protobuf:"fixed64,2,opt,name=temperature" json:"temperature,omitempty"`
	Elasticity  float64 `protobuf:"fixed64,3,opt,name=elasticity" json:"elasticity,omitempty"`
}

func (m *MaterialsDataResponse_Elasticity) Reset()         { *m = MaterialsDataResponse_Elasticity{} }
func (m *MaterialsDataResponse_Elasticity) String() string { return proto.CompactTextString(m) }
func (*MaterialsDataResponse_Elasticity) ProtoMessage()    {}
func (*MaterialsDataResponse_Elasticity) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{13, 1}
}

func (m *MaterialsDataResponse_Elasticity) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MaterialsDataResponse_Elasticity) GetTemperature() float64 {
	if m != nil {
		return m.Temperature
	}
	return 0
}

func (m *MaterialsDataResponse_Elasticity) GetElasticity() float64 {
	if m != nil {
		return m.Elasticity
	}
	return 0
}

type MaterialsDataResponse_Alpha struct {
	Id          string  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Temperature float64 `protobuf:"fixed64,2,opt,name=temperature" json:"temperature,omitempty"`
	Alpha       float64 `protobuf:"fixed64,3,opt,name=alpha" json:"alpha,omitempty"`
}

func (m *MaterialsDataResponse_Alpha) Reset()                    { *m = MaterialsDataResponse_Alpha{} }
func (m *MaterialsDataResponse_Alpha) String() string            { return proto.CompactTextString(m) }
func (*MaterialsDataResponse_Alpha) ProtoMessage()               {}
func (*MaterialsDataResponse_Alpha) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13, 2} }

func (m *MaterialsDataResponse_Alpha) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MaterialsDataResponse_Alpha) GetTemperature() float64 {
	if m != nil {
		return m.Temperature
	}
	return 0
}

func (m *MaterialsDataResponse_Alpha) GetAlpha() float64 {
	if m != nil {
		return m.Alpha
	}
	return 0
}

type Voltage struct {
	Temperature float64 `protobuf:"fixed64,1,opt,name=temperature" json:"temperature,omitempty"`
	Voltage     float64 `protobuf:"fixed64,2,opt,name=voltage" json:"voltage,omitempty"`
}

func (m *Voltage) Reset()                    { *m = Voltage{} }
func (m *Voltage) String() string            { return proto.CompactTextString(m) }
func (*Voltage) ProtoMessage()               {}
func (*Voltage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *Voltage) GetTemperature() float64 {
	if m != nil {
		return m.Temperature
	}
	return 0
}

func (m *Voltage) GetVoltage() float64 {
	if m != nil {
		return m.Voltage
	}
	return 0
}

type CreateVoltageRequest struct {
	MarkId  string     `protobuf:"bytes,1,opt,name=markId" json:"markId,omitempty"`
	Voltage []*Voltage `protobuf:"bytes,2,rep,name=voltage" json:"voltage,omitempty"`
}

func (m *CreateVoltageRequest) Reset()                    { *m = CreateVoltageRequest{} }
func (m *CreateVoltageRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateVoltageRequest) ProtoMessage()               {}
func (*CreateVoltageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *CreateVoltageRequest) GetMarkId() string {
	if m != nil {
		return m.MarkId
	}
	return ""
}

func (m *CreateVoltageRequest) GetVoltage() []*Voltage {
	if m != nil {
		return m.Voltage
	}
	return nil
}

type UpdateVoltageRequest struct {
	Id          string  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	MarkId      string  `protobuf:"bytes,2,opt,name=markId" json:"markId,omitempty"`
	Temperature float64 `protobuf:"fixed64,3,opt,name=temperature" json:"temperature,omitempty"`
	Voltage     float64 `protobuf:"fixed64,4,opt,name=voltage" json:"voltage,omitempty"`
}

func (m *UpdateVoltageRequest) Reset()                    { *m = UpdateVoltageRequest{} }
func (m *UpdateVoltageRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateVoltageRequest) ProtoMessage()               {}
func (*UpdateVoltageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *UpdateVoltageRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateVoltageRequest) GetMarkId() string {
	if m != nil {
		return m.MarkId
	}
	return ""
}

func (m *UpdateVoltageRequest) GetTemperature() float64 {
	if m != nil {
		return m.Temperature
	}
	return 0
}

func (m *UpdateVoltageRequest) GetVoltage() float64 {
	if m != nil {
		return m.Voltage
	}
	return 0
}

type DeleteVoltageRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteVoltageRequest) Reset()                    { *m = DeleteVoltageRequest{} }
func (m *DeleteVoltageRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteVoltageRequest) ProtoMessage()               {}
func (*DeleteVoltageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *DeleteVoltageRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Elasticity struct {
	Temperature float64 `protobuf:"fixed64,1,opt,name=temperature" json:"temperature,omitempty"`
	Elasticity  float64 `protobuf:"fixed64,2,opt,name=elasticity" json:"elasticity,omitempty"`
}

func (m *Elasticity) Reset()                    { *m = Elasticity{} }
func (m *Elasticity) String() string            { return proto.CompactTextString(m) }
func (*Elasticity) ProtoMessage()               {}
func (*Elasticity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *Elasticity) GetTemperature() float64 {
	if m != nil {
		return m.Temperature
	}
	return 0
}

func (m *Elasticity) GetElasticity() float64 {
	if m != nil {
		return m.Elasticity
	}
	return 0
}

type CreateElasticityRequest struct {
	MarkId     string        `protobuf:"bytes,1,opt,name=markId" json:"markId,omitempty"`
	Elasticity []*Elasticity `protobuf:"bytes,2,rep,name=elasticity" json:"elasticity,omitempty"`
}

func (m *CreateElasticityRequest) Reset()                    { *m = CreateElasticityRequest{} }
func (m *CreateElasticityRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateElasticityRequest) ProtoMessage()               {}
func (*CreateElasticityRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *CreateElasticityRequest) GetMarkId() string {
	if m != nil {
		return m.MarkId
	}
	return ""
}

func (m *CreateElasticityRequest) GetElasticity() []*Elasticity {
	if m != nil {
		return m.Elasticity
	}
	return nil
}

type UpdateElasticityRequest struct {
	Id          string  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	MarkId      string  `protobuf:"bytes,2,opt,name=markId" json:"markId,omitempty"`
	Temperature float64 `protobuf:"fixed64,3,opt,name=temperature" json:"temperature,omitempty"`
	Elasticity  float64 `protobuf:"fixed64,4,opt,name=elasticity" json:"elasticity,omitempty"`
}

func (m *UpdateElasticityRequest) Reset()                    { *m = UpdateElasticityRequest{} }
func (m *UpdateElasticityRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateElasticityRequest) ProtoMessage()               {}
func (*UpdateElasticityRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *UpdateElasticityRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateElasticityRequest) GetMarkId() string {
	if m != nil {
		return m.MarkId
	}
	return ""
}

func (m *UpdateElasticityRequest) GetTemperature() float64 {
	if m != nil {
		return m.Temperature
	}
	return 0
}

func (m *UpdateElasticityRequest) GetElasticity() float64 {
	if m != nil {
		return m.Elasticity
	}
	return 0
}

type DeleteElasticityRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteElasticityRequest) Reset()                    { *m = DeleteElasticityRequest{} }
func (m *DeleteElasticityRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteElasticityRequest) ProtoMessage()               {}
func (*DeleteElasticityRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *DeleteElasticityRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Alpha struct {
	Temperature float64 `protobuf:"fixed64,1,opt,name=temperature" json:"temperature,omitempty"`
	Alpha       float64 `protobuf:"fixed64,2,opt,name=alpha" json:"alpha,omitempty"`
}

func (m *Alpha) Reset()                    { *m = Alpha{} }
func (m *Alpha) String() string            { return proto.CompactTextString(m) }
func (*Alpha) ProtoMessage()               {}
func (*Alpha) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *Alpha) GetTemperature() float64 {
	if m != nil {
		return m.Temperature
	}
	return 0
}

func (m *Alpha) GetAlpha() float64 {
	if m != nil {
		return m.Alpha
	}
	return 0
}

type CreateAlphaRequest struct {
	MarkId string   `protobuf:"bytes,1,opt,name=markId" json:"markId,omitempty"`
	Alpha  []*Alpha `protobuf:"bytes,2,rep,name=alpha" json:"alpha,omitempty"`
}

func (m *CreateAlphaRequest) Reset()                    { *m = CreateAlphaRequest{} }
func (m *CreateAlphaRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateAlphaRequest) ProtoMessage()               {}
func (*CreateAlphaRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *CreateAlphaRequest) GetMarkId() string {
	if m != nil {
		return m.MarkId
	}
	return ""
}

func (m *CreateAlphaRequest) GetAlpha() []*Alpha {
	if m != nil {
		return m.Alpha
	}
	return nil
}

type UpdateAlphaRequest struct {
	Id          string  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	MarkId      string  `protobuf:"bytes,2,opt,name=markId" json:"markId,omitempty"`
	Temperature float64 `protobuf:"fixed64,3,opt,name=temperature" json:"temperature,omitempty"`
	Alpha       float64 `protobuf:"fixed64,4,opt,name=alpha" json:"alpha,omitempty"`
}

func (m *UpdateAlphaRequest) Reset()                    { *m = UpdateAlphaRequest{} }
func (m *UpdateAlphaRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateAlphaRequest) ProtoMessage()               {}
func (*UpdateAlphaRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *UpdateAlphaRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateAlphaRequest) GetMarkId() string {
	if m != nil {
		return m.MarkId
	}
	return ""
}

func (m *UpdateAlphaRequest) GetTemperature() float64 {
	if m != nil {
		return m.Temperature
	}
	return 0
}

func (m *UpdateAlphaRequest) GetAlpha() float64 {
	if m != nil {
		return m.Alpha
	}
	return 0
}

type DeleteAlphaRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteAlphaRequest) Reset()                    { *m = DeleteAlphaRequest{} }
func (m *DeleteAlphaRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteAlphaRequest) ProtoMessage()               {}
func (*DeleteAlphaRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *DeleteAlphaRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Gasket struct {
	Id    string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Title string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
}

func (m *Gasket) Reset()                    { *m = Gasket{} }
func (m *Gasket) String() string            { return proto.CompactTextString(m) }
func (*Gasket) ProtoMessage()               {}
func (*Gasket) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *Gasket) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Gasket) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

type GetGasketRequest struct {
}

func (m *GetGasketRequest) Reset()                    { *m = GetGasketRequest{} }
func (m *GetGasketRequest) String() string            { return proto.CompactTextString(m) }
func (*GetGasketRequest) ProtoMessage()               {}
func (*GetGasketRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

type CreateGasketRequest struct {
	Title string `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
}

func (m *CreateGasketRequest) Reset()                    { *m = CreateGasketRequest{} }
func (m *CreateGasketRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateGasketRequest) ProtoMessage()               {}
func (*CreateGasketRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *CreateGasketRequest) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

type UpdateGasketRequest struct {
	Id    string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Title string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
}

func (m *UpdateGasketRequest) Reset()                    { *m = UpdateGasketRequest{} }
func (m *UpdateGasketRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateGasketRequest) ProtoMessage()               {}
func (*UpdateGasketRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *UpdateGasketRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateGasketRequest) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

type DeleteGasketRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteGasketRequest) Reset()                    { *m = DeleteGasketRequest{} }
func (m *DeleteGasketRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteGasketRequest) ProtoMessage()               {}
func (*DeleteGasketRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *DeleteGasketRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GasketResponse struct {
	Gasket []*Gasket `protobuf:"bytes,1,rep,name=gasket" json:"gasket,omitempty"`
}

func (m *GasketResponse) Reset()                    { *m = GasketResponse{} }
func (m *GasketResponse) String() string            { return proto.CompactTextString(m) }
func (*GasketResponse) ProtoMessage()               {}
func (*GasketResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *GasketResponse) GetGasket() []*Gasket {
	if m != nil {
		return m.Gasket
	}
	return nil
}

type GasketType struct {
	Id    string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Title string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
}

func (m *GasketType) Reset()                    { *m = GasketType{} }
func (m *GasketType) String() string            { return proto.CompactTextString(m) }
func (*GasketType) ProtoMessage()               {}
func (*GasketType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *GasketType) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GasketType) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

type GetGasketTypeRequest struct {
}

func (m *GetGasketTypeRequest) Reset()                    { *m = GetGasketTypeRequest{} }
func (m *GetGasketTypeRequest) String() string            { return proto.CompactTextString(m) }
func (*GetGasketTypeRequest) ProtoMessage()               {}
func (*GetGasketTypeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

type CreateGasketTypeRequest struct {
	Title string `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
}

func (m *CreateGasketTypeRequest) Reset()                    { *m = CreateGasketTypeRequest{} }
func (m *CreateGasketTypeRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateGasketTypeRequest) ProtoMessage()               {}
func (*CreateGasketTypeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *CreateGasketTypeRequest) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

type UpdateGasketTypeRequest struct {
	Id    string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Title string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
}

func (m *UpdateGasketTypeRequest) Reset()                    { *m = UpdateGasketTypeRequest{} }
func (m *UpdateGasketTypeRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateGasketTypeRequest) ProtoMessage()               {}
func (*UpdateGasketTypeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *UpdateGasketTypeRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateGasketTypeRequest) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

type DeleteGasketTypeRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteGasketTypeRequest) Reset()                    { *m = DeleteGasketTypeRequest{} }
func (m *DeleteGasketTypeRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteGasketTypeRequest) ProtoMessage()               {}
func (*DeleteGasketTypeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *DeleteGasketTypeRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GasketTypeResponse struct {
	GasketType []*GasketType `protobuf:"bytes,1,rep,name=gasketType" json:"gasketType,omitempty"`
}

func (m *GasketTypeResponse) Reset()                    { *m = GasketTypeResponse{} }
func (m *GasketTypeResponse) String() string            { return proto.CompactTextString(m) }
func (*GasketTypeResponse) ProtoMessage()               {}
func (*GasketTypeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *GasketTypeResponse) GetGasketType() []*GasketType {
	if m != nil {
		return m.GasketType
	}
	return nil
}

type Env struct {
	Id    string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Title string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
}

func (m *Env) Reset()                    { *m = Env{} }
func (m *Env) String() string            { return proto.CompactTextString(m) }
func (*Env) ProtoMessage()               {}
func (*Env) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *Env) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Env) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

type GetEnvRequest struct {
}

func (m *GetEnvRequest) Reset()                    { *m = GetEnvRequest{} }
func (m *GetEnvRequest) String() string            { return proto.CompactTextString(m) }
func (*GetEnvRequest) ProtoMessage()               {}
func (*GetEnvRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

type CreateEnvRequest struct {
	Title string `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
}

func (m *CreateEnvRequest) Reset()                    { *m = CreateEnvRequest{} }
func (m *CreateEnvRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateEnvRequest) ProtoMessage()               {}
func (*CreateEnvRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *CreateEnvRequest) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

type UpdateEnvRequest struct {
	Id    string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Title string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
}

func (m *UpdateEnvRequest) Reset()                    { *m = UpdateEnvRequest{} }
func (m *UpdateEnvRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateEnvRequest) ProtoMessage()               {}
func (*UpdateEnvRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *UpdateEnvRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateEnvRequest) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

type DeleteEnvRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteEnvRequest) Reset()                    { *m = DeleteEnvRequest{} }
func (m *DeleteEnvRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteEnvRequest) ProtoMessage()               {}
func (*DeleteEnvRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *DeleteEnvRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type EnvResponse struct {
	Env []*Env `protobuf:"bytes,1,rep,name=env" json:"env,omitempty"`
}

func (m *EnvResponse) Reset()                    { *m = EnvResponse{} }
func (m *EnvResponse) String() string            { return proto.CompactTextString(m) }
func (*EnvResponse) ProtoMessage()               {}
func (*EnvResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *EnvResponse) GetEnv() []*Env {
	if m != nil {
		return m.Env
	}
	return nil
}

type CreateEnvDataRequest struct {
	EnvId        string  `protobuf:"bytes,1,opt,name=envId" json:"envId,omitempty"`
	GasketId     string  `protobuf:"bytes,2,opt,name=gasketId" json:"gasketId,omitempty"`
	M            float64 `protobuf:"fixed64,3,opt,name=m" json:"m,omitempty"`
	SpecificPres float64 `protobuf:"fixed64,4,opt,name=specificPres" json:"specificPres,omitempty"`
}

func (m *CreateEnvDataRequest) Reset()                    { *m = CreateEnvDataRequest{} }
func (m *CreateEnvDataRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateEnvDataRequest) ProtoMessage()               {}
func (*CreateEnvDataRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *CreateEnvDataRequest) GetEnvId() string {
	if m != nil {
		return m.EnvId
	}
	return ""
}

func (m *CreateEnvDataRequest) GetGasketId() string {
	if m != nil {
		return m.GasketId
	}
	return ""
}

func (m *CreateEnvDataRequest) GetM() float64 {
	if m != nil {
		return m.M
	}
	return 0
}

func (m *CreateEnvDataRequest) GetSpecificPres() float64 {
	if m != nil {
		return m.SpecificPres
	}
	return 0
}

type UpdateEnvDataRequest struct {
	Id           string  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	EnvId        string  `protobuf:"bytes,2,opt,name=envId" json:"envId,omitempty"`
	GasketId     string  `protobuf:"bytes,3,opt,name=gasketId" json:"gasketId,omitempty"`
	M            float64 `protobuf:"fixed64,4,opt,name=m" json:"m,omitempty"`
	SpecificPres float64 `protobuf:"fixed64,5,opt,name=specificPres" json:"specificPres,omitempty"`
}

func (m *UpdateEnvDataRequest) Reset()                    { *m = UpdateEnvDataRequest{} }
func (m *UpdateEnvDataRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateEnvDataRequest) ProtoMessage()               {}
func (*UpdateEnvDataRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *UpdateEnvDataRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateEnvDataRequest) GetEnvId() string {
	if m != nil {
		return m.EnvId
	}
	return ""
}

func (m *UpdateEnvDataRequest) GetGasketId() string {
	if m != nil {
		return m.GasketId
	}
	return ""
}

func (m *UpdateEnvDataRequest) GetM() float64 {
	if m != nil {
		return m.M
	}
	return 0
}

func (m *UpdateEnvDataRequest) GetSpecificPres() float64 {
	if m != nil {
		return m.SpecificPres
	}
	return 0
}

type DeleteEnvDataRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteEnvDataRequest) Reset()                    { *m = DeleteEnvDataRequest{} }
func (m *DeleteEnvDataRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteEnvDataRequest) ProtoMessage()               {}
func (*DeleteEnvDataRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *DeleteEnvDataRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type CreateGasketDataRequest struct {
	GasketId        string  `protobuf:"bytes,1,opt,name=gasketId" json:"gasketId,omitempty"`
	PermissiblePres float64 `protobuf:"fixed64,2,opt,name=permissiblePres" json:"permissiblePres,omitempty"`
	Compression     float64 `protobuf:"fixed64,3,opt,name=compression" json:"compression,omitempty"`
	Epsilon         float64 `protobuf:"fixed64,4,opt,name=epsilon" json:"epsilon,omitempty"`
	Thickness       float64 `protobuf:"fixed64,5,opt,name=thickness" json:"thickness,omitempty"`
	TypeId          string  `protobuf:"bytes,6,opt,name=typeId" json:"typeId,omitempty"`
}

func (m *CreateGasketDataRequest) Reset()                    { *m = CreateGasketDataRequest{} }
func (m *CreateGasketDataRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateGasketDataRequest) ProtoMessage()               {}
func (*CreateGasketDataRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *CreateGasketDataRequest) GetGasketId() string {
	if m != nil {
		return m.GasketId
	}
	return ""
}

func (m *CreateGasketDataRequest) GetPermissiblePres() float64 {
	if m != nil {
		return m.PermissiblePres
	}
	return 0
}

func (m *CreateGasketDataRequest) GetCompression() float64 {
	if m != nil {
		return m.Compression
	}
	return 0
}

func (m *CreateGasketDataRequest) GetEpsilon() float64 {
	if m != nil {
		return m.Epsilon
	}
	return 0
}

func (m *CreateGasketDataRequest) GetThickness() float64 {
	if m != nil {
		return m.Thickness
	}
	return 0
}

func (m *CreateGasketDataRequest) GetTypeId() string {
	if m != nil {
		return m.TypeId
	}
	return ""
}

type UpdateGasketDataRequest struct {
	Id              string  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	GasketId        string  `protobuf:"bytes,2,opt,name=gasketId" json:"gasketId,omitempty"`
	PermissiblePres float64 `protobuf:"fixed64,3,opt,name=permissiblePres" json:"permissiblePres,omitempty"`
	Compression     float64 `protobuf:"fixed64,4,opt,name=compression" json:"compression,omitempty"`
	Epsilon         float64 `protobuf:"fixed64,5,opt,name=epsilon" json:"epsilon,omitempty"`
	Thickness       float64 `protobuf:"fixed64,6,opt,name=thickness" json:"thickness,omitempty"`
	TypeId          string  `protobuf:"bytes,7,opt,name=typeId" json:"typeId,omitempty"`
}

func (m *UpdateGasketDataRequest) Reset()                    { *m = UpdateGasketDataRequest{} }
func (m *UpdateGasketDataRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateGasketDataRequest) ProtoMessage()               {}
func (*UpdateGasketDataRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *UpdateGasketDataRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateGasketDataRequest) GetGasketId() string {
	if m != nil {
		return m.GasketId
	}
	return ""
}

func (m *UpdateGasketDataRequest) GetPermissiblePres() float64 {
	if m != nil {
		return m.PermissiblePres
	}
	return 0
}

func (m *UpdateGasketDataRequest) GetCompression() float64 {
	if m != nil {
		return m.Compression
	}
	return 0
}

func (m *UpdateGasketDataRequest) GetEpsilon() float64 {
	if m != nil {
		return m.Epsilon
	}
	return 0
}

func (m *UpdateGasketDataRequest) GetThickness() float64 {
	if m != nil {
		return m.Thickness
	}
	return 0
}

func (m *UpdateGasketDataRequest) GetTypeId() string {
	if m != nil {
		return m.TypeId
	}
	return ""
}

type DeleteGasketDataRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteGasketDataRequest) Reset()                    { *m = DeleteGasketDataRequest{} }
func (m *DeleteGasketDataRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteGasketDataRequest) ProtoMessage()               {}
func (*DeleteGasketDataRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func (m *DeleteGasketDataRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type FlangeData struct {
	Type       FlangeData_Type `protobuf:"varint,1,opt,name=type,enum=moment_proto.FlangeData_Type" json:"type,omitempty"`
	StandartId string          `protobuf:"bytes,2,opt,name=standartId" json:"standartId,omitempty"`
	MarkId     string          `protobuf:"bytes,3,opt,name=markId" json:"markId,omitempty"`
	Dy         int32           `protobuf:"varint,4,opt,name=dy" json:"dy,omitempty"`
	Py         float64         `protobuf:"fixed64,5,opt,name=py" json:"py,omitempty"`
	Corrosion  float64         `protobuf:"fixed64,6,opt,name=corrosion" json:"corrosion,omitempty"`
}

func (m *FlangeData) Reset()                    { *m = FlangeData{} }
func (m *FlangeData) String() string            { return proto.CompactTextString(m) }
func (*FlangeData) ProtoMessage()               {}
func (*FlangeData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *FlangeData) GetType() FlangeData_Type {
	if m != nil {
		return m.Type
	}
	return FlangeData_welded
}

func (m *FlangeData) GetStandartId() string {
	if m != nil {
		return m.StandartId
	}
	return ""
}

func (m *FlangeData) GetMarkId() string {
	if m != nil {
		return m.MarkId
	}
	return ""
}

func (m *FlangeData) GetDy() int32 {
	if m != nil {
		return m.Dy
	}
	return 0
}

func (m *FlangeData) GetPy() float64 {
	if m != nil {
		return m.Py
	}
	return 0
}

func (m *FlangeData) GetCorrosion() float64 {
	if m != nil {
		return m.Corrosion
	}
	return 0
}

type BoltData struct {
	MarkId string `protobuf:"bytes,1,opt,name=markId" json:"markId,omitempty"`
}

func (m *BoltData) Reset()                    { *m = BoltData{} }
func (m *BoltData) String() string            { return proto.CompactTextString(m) }
func (*BoltData) ProtoMessage()               {}
func (*BoltData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

func (m *BoltData) GetMarkId() string {
	if m != nil {
		return m.MarkId
	}
	return ""
}

type GasketData struct {
	GasketId  string  `protobuf:"bytes,1,opt,name=gasketId" json:"gasketId,omitempty"`
	EnvId     string  `protobuf:"bytes,2,opt,name=envId" json:"envId,omitempty"`
	Thickness float64 `protobuf:"fixed64,3,opt,name=thickness" json:"thickness,omitempty"`
	DOut      float64 `protobuf:"fixed64,4,opt,name=d_out,json=dOut" json:"d_out,omitempty"`
	DIn       float64 `protobuf:"fixed64,5,opt,name=d_in,json=dIn" json:"d_in,omitempty"`
}

func (m *GasketData) Reset()                    { *m = GasketData{} }
func (m *GasketData) String() string            { return proto.CompactTextString(m) }
func (*GasketData) ProtoMessage()               {}
func (*GasketData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{52} }

func (m *GasketData) GetGasketId() string {
	if m != nil {
		return m.GasketId
	}
	return ""
}

func (m *GasketData) GetEnvId() string {
	if m != nil {
		return m.EnvId
	}
	return ""
}

func (m *GasketData) GetThickness() float64 {
	if m != nil {
		return m.Thickness
	}
	return 0
}

func (m *GasketData) GetDOut() float64 {
	if m != nil {
		return m.DOut
	}
	return 0
}

func (m *GasketData) GetDIn() float64 {
	if m != nil {
		return m.DIn
	}
	return 0
}

type EmbedData struct {
	MarkId    string  `protobuf:"bytes,1,opt,name=markId" json:"markId,omitempty"`
	Thickness float64 `protobuf:"fixed64,2,opt,name=thickness" json:"thickness,omitempty"`
}

func (m *EmbedData) Reset()                    { *m = EmbedData{} }
func (m *EmbedData) String() string            { return proto.CompactTextString(m) }
func (*EmbedData) ProtoMessage()               {}
func (*EmbedData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53} }

func (m *EmbedData) GetMarkId() string {
	if m != nil {
		return m.MarkId
	}
	return ""
}

func (m *EmbedData) GetThickness() float64 {
	if m != nil {
		return m.Thickness
	}
	return 0
}

type FlangeRequest struct {
	Pressure       float64                   `protobuf:"fixed64,1,opt,name=pressure" json:"pressure,omitempty"`
	AxialForce     int32                     `protobuf:"varint,2,opt,name=axialForce" json:"axialForce,omitempty"`
	BendingMoment  int32                     `protobuf:"varint,3,opt,name=bendingMoment" json:"bendingMoment,omitempty"`
	Temp           float64                   `protobuf:"fixed64,4,opt,name=temp" json:"temp,omitempty"`
	IsWork         bool                      `protobuf:"varint,5,opt,name=isWork" json:"isWork,omitempty"`
	Flanges        FlangeRequest_Flanges     `protobuf:"varint,6,opt,name=flanges,enum=moment_proto.FlangeRequest_Flanges" json:"flanges,omitempty"`
	IsSameFlange   bool                      `protobuf:"varint,7,opt,name=isSameFlange" json:"isSameFlange,omitempty"`
	IsEmbedded     bool                      `protobuf:"varint,8,opt,name=isEmbedded" json:"isEmbedded,omitempty"`
	Type           FlangeRequest_Type        `protobuf:"varint,9,opt,name=type,enum=moment_proto.FlangeRequest_Type" json:"type,omitempty"`
	Condition      FlangeRequest_Condition   `protobuf:"varint,10,opt,name=condition,enum=moment_proto.FlangeRequest_Condition" json:"condition,omitempty"`
	Calculation    FlangeRequest_Calcutation `protobuf:"varint,11,opt,name=calculation,enum=moment_proto.FlangeRequest_Calcutation" json:"calculation,omitempty"`
	FlangesData    []*FlangeData             `protobuf:"bytes,12,rep,name=flangesData" json:"flangesData,omitempty"`
	Bolts          *BoltData                 `protobuf:"bytes,13,opt,name=bolts" json:"bolts,omitempty"`
	Gasket         *GasketData               `protobuf:"bytes,14,opt,name=gasket" json:"gasket,omitempty"`
	Embed          *EmbedData                `protobuf:"bytes,15,opt,name=embed" json:"embed,omitempty"`
	IsNeedFormulas bool                      `protobuf:"varint,16,opt,name=isNeedFormulas" json:"isNeedFormulas,omitempty"`
}

func (m *FlangeRequest) Reset()                    { *m = FlangeRequest{} }
func (m *FlangeRequest) String() string            { return proto.CompactTextString(m) }
func (*FlangeRequest) ProtoMessage()               {}
func (*FlangeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{54} }

func (m *FlangeRequest) GetPressure() float64 {
	if m != nil {
		return m.Pressure
	}
	return 0
}

func (m *FlangeRequest) GetAxialForce() int32 {
	if m != nil {
		return m.AxialForce
	}
	return 0
}

func (m *FlangeRequest) GetBendingMoment() int32 {
	if m != nil {
		return m.BendingMoment
	}
	return 0
}

func (m *FlangeRequest) GetTemp() float64 {
	if m != nil {
		return m.Temp
	}
	return 0
}

func (m *FlangeRequest) GetIsWork() bool {
	if m != nil {
		return m.IsWork
	}
	return false
}

func (m *FlangeRequest) GetFlanges() FlangeRequest_Flanges {
	if m != nil {
		return m.Flanges
	}
	return FlangeRequest_isolated
}

func (m *FlangeRequest) GetIsSameFlange() bool {
	if m != nil {
		return m.IsSameFlange
	}
	return false
}

func (m *FlangeRequest) GetIsEmbedded() bool {
	if m != nil {
		return m.IsEmbedded
	}
	return false
}

func (m *FlangeRequest) GetType() FlangeRequest_Type {
	if m != nil {
		return m.Type
	}
	return FlangeRequest_bolt
}

func (m *FlangeRequest) GetCondition() FlangeRequest_Condition {
	if m != nil {
		return m.Condition
	}
	return FlangeRequest_uncontrollable
}

func (m *FlangeRequest) GetCalculation() FlangeRequest_Calcutation {
	if m != nil {
		return m.Calculation
	}
	return FlangeRequest_basis
}

func (m *FlangeRequest) GetFlangesData() []*FlangeData {
	if m != nil {
		return m.FlangesData
	}
	return nil
}

func (m *FlangeRequest) GetBolts() *BoltData {
	if m != nil {
		return m.Bolts
	}
	return nil
}

func (m *FlangeRequest) GetGasket() *GasketData {
	if m != nil {
		return m.Gasket
	}
	return nil
}

func (m *FlangeRequest) GetEmbed() *EmbedData {
	if m != nil {
		return m.Embed
	}
	return nil
}

func (m *FlangeRequest) GetIsNeedFormulas() bool {
	if m != nil {
		return m.IsNeedFormulas
	}
	return false
}

type FlangeResult struct {
	DOut         float64 `protobuf:"fixed64,1,opt,name=dOut" json:"dOut,omitempty"`
	D            float64 `protobuf:"fixed64,2,opt,name=d" json:"d,omitempty"`
	Dk           float64 `protobuf:"fixed64,3,opt,name=dk" json:"dk,omitempty"`
	Dnk          float64 `protobuf:"fixed64,4,opt,name=dnk" json:"dnk,omitempty"`
	Ds           float64 `protobuf:"fixed64,5,opt,name=ds" json:"ds,omitempty"`
	H            float64 `protobuf:"fixed64,6,opt,name=h" json:"h,omitempty"`
	Hk           float64 `protobuf:"fixed64,7,opt,name=hk" json:"hk,omitempty"`
	S0           float64 `protobuf:"fixed64,8,opt,name=s0" json:"s0,omitempty"`
	S1           float64 `protobuf:"fixed64,9,opt,name=s1" json:"s1,omitempty"`
	L            float64 `protobuf:"fixed64,10,opt,name=l" json:"l,omitempty"`
	D6           float64 `protobuf:"fixed64,11,opt,name=d6" json:"d6,omitempty"`
	C            float64 `protobuf:"fixed64,12,opt,name=c" json:"c,omitempty"`
	Tf           float64 `protobuf:"fixed64,13,opt,name=tf" json:"tf,omitempty"`
	Tk           float64 `protobuf:"fixed64,14,opt,name=tk" json:"tk,omitempty"`
	AlphaK       float64 `protobuf:"fixed64,15,opt,name=alphaK" json:"alphaK,omitempty"`
	EpsilonKAt20 float64 `protobuf:"fixed64,16,opt,name=epsilonKAt20" json:"epsilonKAt20,omitempty"`
	EpsilonK     float64 `protobuf:"fixed64,17,opt,name=epsilonK" json:"epsilonK,omitempty"`
	SigmaKAt20   float64 `protobuf:"fixed64,18,opt,name=sigmaKAt20" json:"sigmaKAt20,omitempty"`
	SigmaK       float64 `protobuf:"fixed64,19,opt,name=sigmaK" json:"sigmaK,omitempty"`
	AlphaF       float64 `protobuf:"fixed64,20,opt,name=alphaF" json:"alphaF,omitempty"`
	EpsilonAt20  float64 `protobuf:"fixed64,21,opt,name=epsilonAt20" json:"epsilonAt20,omitempty"`
	Epsilon      float64 `protobuf:"fixed64,22,opt,name=epsilon" json:"epsilon,omitempty"`
	SigmaAt20    float64 `protobuf:"fixed64,23,opt,name=sigmaAt20" json:"sigmaAt20,omitempty"`
	Sigma        float64 `protobuf:"fixed64,24,opt,name=sigma" json:"sigma,omitempty"`
	SigmaM       float64 `protobuf:"fixed64,25,opt,name=sigmaM" json:"sigmaM,omitempty"`
	SigmaMAt20   float64 `protobuf:"fixed64,26,opt,name=sigmaMAt20" json:"sigmaMAt20,omitempty"`
	SigmaR       float64 `protobuf:"fixed64,27,opt,name=sigmaR" json:"sigmaR,omitempty"`
	SigmaRAt20   float64 `protobuf:"fixed64,28,opt,name=sigmaRAt20" json:"sigmaRAt20,omitempty"`
	Material     string  `protobuf:"bytes,29,opt,name=material" json:"material,omitempty"`
}

func (m *FlangeResult) Reset()                    { *m = FlangeResult{} }
func (m *FlangeResult) String() string            { return proto.CompactTextString(m) }
func (*FlangeResult) ProtoMessage()               {}
func (*FlangeResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{55} }

func (m *FlangeResult) GetDOut() float64 {
	if m != nil {
		return m.DOut
	}
	return 0
}

func (m *FlangeResult) GetD() float64 {
	if m != nil {
		return m.D
	}
	return 0
}

func (m *FlangeResult) GetDk() float64 {
	if m != nil {
		return m.Dk
	}
	return 0
}

func (m *FlangeResult) GetDnk() float64 {
	if m != nil {
		return m.Dnk
	}
	return 0
}

func (m *FlangeResult) GetDs() float64 {
	if m != nil {
		return m.Ds
	}
	return 0
}

func (m *FlangeResult) GetH() float64 {
	if m != nil {
		return m.H
	}
	return 0
}

func (m *FlangeResult) GetHk() float64 {
	if m != nil {
		return m.Hk
	}
	return 0
}

func (m *FlangeResult) GetS0() float64 {
	if m != nil {
		return m.S0
	}
	return 0
}

func (m *FlangeResult) GetS1() float64 {
	if m != nil {
		return m.S1
	}
	return 0
}

func (m *FlangeResult) GetL() float64 {
	if m != nil {
		return m.L
	}
	return 0
}

func (m *FlangeResult) GetD6() float64 {
	if m != nil {
		return m.D6
	}
	return 0
}

func (m *FlangeResult) GetC() float64 {
	if m != nil {
		return m.C
	}
	return 0
}

func (m *FlangeResult) GetTf() float64 {
	if m != nil {
		return m.Tf
	}
	return 0
}

func (m *FlangeResult) GetTk() float64 {
	if m != nil {
		return m.Tk
	}
	return 0
}

func (m *FlangeResult) GetAlphaK() float64 {
	if m != nil {
		return m.AlphaK
	}
	return 0
}

func (m *FlangeResult) GetEpsilonKAt20() float64 {
	if m != nil {
		return m.EpsilonKAt20
	}
	return 0
}

func (m *FlangeResult) GetEpsilonK() float64 {
	if m != nil {
		return m.EpsilonK
	}
	return 0
}

func (m *FlangeResult) GetSigmaKAt20() float64 {
	if m != nil {
		return m.SigmaKAt20
	}
	return 0
}

func (m *FlangeResult) GetSigmaK() float64 {
	if m != nil {
		return m.SigmaK
	}
	return 0
}

func (m *FlangeResult) GetAlphaF() float64 {
	if m != nil {
		return m.AlphaF
	}
	return 0
}

func (m *FlangeResult) GetEpsilonAt20() float64 {
	if m != nil {
		return m.EpsilonAt20
	}
	return 0
}

func (m *FlangeResult) GetEpsilon() float64 {
	if m != nil {
		return m.Epsilon
	}
	return 0
}

func (m *FlangeResult) GetSigmaAt20() float64 {
	if m != nil {
		return m.SigmaAt20
	}
	return 0
}

func (m *FlangeResult) GetSigma() float64 {
	if m != nil {
		return m.Sigma
	}
	return 0
}

func (m *FlangeResult) GetSigmaM() float64 {
	if m != nil {
		return m.SigmaM
	}
	return 0
}

func (m *FlangeResult) GetSigmaMAt20() float64 {
	if m != nil {
		return m.SigmaMAt20
	}
	return 0
}

func (m *FlangeResult) GetSigmaR() float64 {
	if m != nil {
		return m.SigmaR
	}
	return 0
}

func (m *FlangeResult) GetSigmaRAt20() float64 {
	if m != nil {
		return m.SigmaRAt20
	}
	return 0
}

func (m *FlangeResult) GetMaterial() string {
	if m != nil {
		return m.Material
	}
	return ""
}

type BoltResult struct {
	Diameter    int32   `protobuf:"varint,1,opt,name=diameter" json:"diameter,omitempty"`
	Area        float64 `protobuf:"fixed64,2,opt,name=area" json:"area,omitempty"`
	Count       int32   `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	Lenght      float64 `protobuf:"fixed64,4,opt,name=lenght" json:"lenght,omitempty"`
	Temp        float64 `protobuf:"fixed64,5,opt,name=temp" json:"temp,omitempty"`
	Alpha       float64 `protobuf:"fixed64,6,opt,name=alpha" json:"alpha,omitempty"`
	EpsilonAt20 float64 `protobuf:"fixed64,7,opt,name=epsilonAt20" json:"epsilonAt20,omitempty"`
	Epsilon     float64 `protobuf:"fixed64,8,opt,name=epsilon" json:"epsilon,omitempty"`
	SigmaAt20   float64 `protobuf:"fixed64,9,opt,name=sigmaAt20" json:"sigmaAt20,omitempty"`
	Sigma       float64 `protobuf:"fixed64,10,opt,name=sigma" json:"sigma,omitempty"`
}

func (m *BoltResult) Reset()                    { *m = BoltResult{} }
func (m *BoltResult) String() string            { return proto.CompactTextString(m) }
func (*BoltResult) ProtoMessage()               {}
func (*BoltResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{56} }

func (m *BoltResult) GetDiameter() int32 {
	if m != nil {
		return m.Diameter
	}
	return 0
}

func (m *BoltResult) GetArea() float64 {
	if m != nil {
		return m.Area
	}
	return 0
}

func (m *BoltResult) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *BoltResult) GetLenght() float64 {
	if m != nil {
		return m.Lenght
	}
	return 0
}

func (m *BoltResult) GetTemp() float64 {
	if m != nil {
		return m.Temp
	}
	return 0
}

func (m *BoltResult) GetAlpha() float64 {
	if m != nil {
		return m.Alpha
	}
	return 0
}

func (m *BoltResult) GetEpsilonAt20() float64 {
	if m != nil {
		return m.EpsilonAt20
	}
	return 0
}

func (m *BoltResult) GetEpsilon() float64 {
	if m != nil {
		return m.Epsilon
	}
	return 0
}

func (m *BoltResult) GetSigmaAt20() float64 {
	if m != nil {
		return m.SigmaAt20
	}
	return 0
}

func (m *BoltResult) GetSigma() float64 {
	if m != nil {
		return m.Sigma
	}
	return 0
}

type GasketResult struct {
	GasketId        string  `protobuf:"bytes,1,opt,name=gasketId" json:"gasketId,omitempty"`
	EnvId           string  `protobuf:"bytes,2,opt,name=envId" json:"envId,omitempty"`
	Thickness       float64 `protobuf:"fixed64,3,opt,name=thickness" json:"thickness,omitempty"`
	DOut            float64 `protobuf:"fixed64,4,opt,name=d_out,json=dOut" json:"d_out,omitempty"`
	Width           float64 `protobuf:"fixed64,5,opt,name=width" json:"width,omitempty"`
	M               float64 `protobuf:"fixed64,6,opt,name=m" json:"m,omitempty"`
	Pres            float64 `protobuf:"fixed64,7,opt,name=pres" json:"pres,omitempty"`
	Compression     float64 `protobuf:"fixed64,8,opt,name=compression" json:"compression,omitempty"`
	Epsilon         float64 `protobuf:"fixed64,9,opt,name=epsilon" json:"epsilon,omitempty"`
	PermissiblePres float64 `protobuf:"fixed64,10,opt,name=permissiblePres" json:"permissiblePres,omitempty"`
}

func (m *GasketResult) Reset()                    { *m = GasketResult{} }
func (m *GasketResult) String() string            { return proto.CompactTextString(m) }
func (*GasketResult) ProtoMessage()               {}
func (*GasketResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{57} }

func (m *GasketResult) GetGasketId() string {
	if m != nil {
		return m.GasketId
	}
	return ""
}

func (m *GasketResult) GetEnvId() string {
	if m != nil {
		return m.EnvId
	}
	return ""
}

func (m *GasketResult) GetThickness() float64 {
	if m != nil {
		return m.Thickness
	}
	return 0
}

func (m *GasketResult) GetDOut() float64 {
	if m != nil {
		return m.DOut
	}
	return 0
}

func (m *GasketResult) GetWidth() float64 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *GasketResult) GetM() float64 {
	if m != nil {
		return m.M
	}
	return 0
}

func (m *GasketResult) GetPres() float64 {
	if m != nil {
		return m.Pres
	}
	return 0
}

func (m *GasketResult) GetCompression() float64 {
	if m != nil {
		return m.Compression
	}
	return 0
}

func (m *GasketResult) GetEpsilon() float64 {
	if m != nil {
		return m.Epsilon
	}
	return 0
}

func (m *GasketResult) GetPermissiblePres() float64 {
	if m != nil {
		return m.PermissiblePres
	}
	return 0
}

type EmbedResult struct {
	MarkId    string  `protobuf:"bytes,1,opt,name=markId" json:"markId,omitempty"`
	Thickness float64 `protobuf:"fixed64,2,opt,name=thickness" json:"thickness,omitempty"`
	Alpfa     float64 `protobuf:"fixed64,3,opt,name=alpfa" json:"alpfa,omitempty"`
	Temp      float64 `protobuf:"fixed64,4,opt,name=temp" json:"temp,omitempty"`
}

func (m *EmbedResult) Reset()                    { *m = EmbedResult{} }
func (m *EmbedResult) String() string            { return proto.CompactTextString(m) }
func (*EmbedResult) ProtoMessage()               {}
func (*EmbedResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{58} }

func (m *EmbedResult) GetMarkId() string {
	if m != nil {
		return m.MarkId
	}
	return ""
}

func (m *EmbedResult) GetThickness() float64 {
	if m != nil {
		return m.Thickness
	}
	return 0
}

func (m *EmbedResult) GetAlpfa() float64 {
	if m != nil {
		return m.Alpfa
	}
	return 0
}

func (m *EmbedResult) GetTemp() float64 {
	if m != nil {
		return m.Temp
	}
	return 0
}

type StrengthResult struct {
	Mkp       float64 `protobuf:"fixed64,1,opt,name=Mkp,json=mkp" json:"Mkp,omitempty"`
	Mkp1      float64 `protobuf:"fixed64,2,opt,name=Mkp1,json=mkp1" json:"Mkp1,omitempty"`
	Cf        float64 `protobuf:"fixed64,3,opt,name=Cf,json=cf" json:"Cf,omitempty"`
	Dzv       float64 `protobuf:"fixed64,4,opt,name=Dzv,json=dzv" json:"Dzv,omitempty"`
	MM        float64 `protobuf:"fixed64,5,opt,name=MM,json=mM" json:"MM,omitempty"`
	MMk       float64 `protobuf:"fixed64,6,opt,name=MMk,json=mMk" json:"MMk,omitempty"`
	Mpk       float64 `protobuf:"fixed64,7,opt,name=Mpk,json=mpk" json:"Mpk,omitempty"`
	Mp        float64 `protobuf:"fixed64,8,opt,name=Mp,json=mp" json:"Mp,omitempty"`
	SigmaM1   float64 `protobuf:"fixed64,9,opt,name=sigmaM1" json:"sigmaM1,omitempty"`
	SigmaM0   float64 `protobuf:"fixed64,10,opt,name=sigmaM0" json:"sigmaM0,omitempty"`
	SigmaT    float64 `protobuf:"fixed64,11,opt,name=sigmaT" json:"sigmaT,omitempty"`
	SigmaR    float64 `protobuf:"fixed64,12,opt,name=sigmaR" json:"sigmaR,omitempty"`
	SigmaTp   float64 `protobuf:"fixed64,13,opt,name=sigmaTp" json:"sigmaTp,omitempty"`
	SigmaRp   float64 `protobuf:"fixed64,14,opt,name=sigmaRp" json:"sigmaRp,omitempty"`
	SigmaK    float64 `protobuf:"fixed64,15,opt,name=sigmaK" json:"sigmaK,omitempty"`
	SigmaP1   float64 `protobuf:"fixed64,16,opt,name=sigmaP1" json:"sigmaP1,omitempty"`
	SigmaP0   float64 `protobuf:"fixed64,17,opt,name=sigmaP0" json:"sigmaP0,omitempty"`
	SigmaMp   float64 `protobuf:"fixed64,18,opt,name=sigmaMp" json:"sigmaMp,omitempty"`
	SigmaMpm  float64 `protobuf:"fixed64,19,opt,name=sigmaMpm" json:"sigmaMpm,omitempty"`
	SigmaMp0  float64 `protobuf:"fixed64,20,opt,name=sigmaMp0" json:"sigmaMp0,omitempty"`
	SigmaMpm0 float64 `protobuf:"fixed64,21,opt,name=sigmaMpm0" json:"sigmaMpm0,omitempty"`
	SigmaMop  float64 `protobuf:"fixed64,22,opt,name=sigmaMop" json:"sigmaMop,omitempty"`
	SigmaKp   float64 `protobuf:"fixed64,23,opt,name=sigmaKp" json:"sigmaKp,omitempty"`
	Teta      float64 `protobuf:"fixed64,24,opt,name=teta" json:"teta,omitempty"`
	DTeta     float64 `protobuf:"fixed64,25,opt,name=dTeta" json:"dTeta,omitempty"`
	DTetaK    float64 `protobuf:"fixed64,26,opt,name=dTetaK" json:"dTetaK,omitempty"`
	TetaK     float64 `protobuf:"fixed64,27,opt,name=tetaK" json:"tetaK,omitempty"`
	Max1      float64 `protobuf:"fixed64,28,opt,name=Max1,json=max1" json:"Max1,omitempty"`
	Max2      float64 `protobuf:"fixed64,29,opt,name=Max2,json=max2" json:"Max2,omitempty"`
	Max3      float64 `protobuf:"fixed64,30,opt,name=Max3,json=max3" json:"Max3,omitempty"`
	Max4      float64 `protobuf:"fixed64,31,opt,name=Max4,json=max4" json:"Max4,omitempty"`
	Max5      float64 `protobuf:"fixed64,32,opt,name=Max5,json=max5" json:"Max5,omitempty"`
	Max6      float64 `protobuf:"fixed64,33,opt,name=Max6,json=max6" json:"Max6,omitempty"`
	Max7      float64 `protobuf:"fixed64,34,opt,name=Max7,json=max7" json:"Max7,omitempty"`
	Max8      float64 `protobuf:"fixed64,35,opt,name=Max8,json=max8" json:"Max8,omitempty"`
	Max9      float64 `protobuf:"fixed64,36,opt,name=Max9,json=max9" json:"Max9,omitempty"`
	Max10     float64 `protobuf:"fixed64,37,opt,name=Max10,json=max10" json:"Max10,omitempty"`
	Max11     float64 `protobuf:"fixed64,38,opt,name=Max11,json=max11" json:"Max11,omitempty"`
}

func (m *StrengthResult) Reset()                    { *m = StrengthResult{} }
func (m *StrengthResult) String() string            { return proto.CompactTextString(m) }
func (*StrengthResult) ProtoMessage()               {}
func (*StrengthResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{59} }

func (m *StrengthResult) GetMkp() float64 {
	if m != nil {
		return m.Mkp
	}
	return 0
}

func (m *StrengthResult) GetMkp1() float64 {
	if m != nil {
		return m.Mkp1
	}
	return 0
}

func (m *StrengthResult) GetCf() float64 {
	if m != nil {
		return m.Cf
	}
	return 0
}

func (m *StrengthResult) GetDzv() float64 {
	if m != nil {
		return m.Dzv
	}
	return 0
}

func (m *StrengthResult) GetMM() float64 {
	if m != nil {
		return m.MM
	}
	return 0
}

func (m *StrengthResult) GetMMk() float64 {
	if m != nil {
		return m.MMk
	}
	return 0
}

func (m *StrengthResult) GetMpk() float64 {
	if m != nil {
		return m.Mpk
	}
	return 0
}

func (m *StrengthResult) GetMp() float64 {
	if m != nil {
		return m.Mp
	}
	return 0
}

func (m *StrengthResult) GetSigmaM1() float64 {
	if m != nil {
		return m.SigmaM1
	}
	return 0
}

func (m *StrengthResult) GetSigmaM0() float64 {
	if m != nil {
		return m.SigmaM0
	}
	return 0
}

func (m *StrengthResult) GetSigmaT() float64 {
	if m != nil {
		return m.SigmaT
	}
	return 0
}

func (m *StrengthResult) GetSigmaR() float64 {
	if m != nil {
		return m.SigmaR
	}
	return 0
}

func (m *StrengthResult) GetSigmaTp() float64 {
	if m != nil {
		return m.SigmaTp
	}
	return 0
}

func (m *StrengthResult) GetSigmaRp() float64 {
	if m != nil {
		return m.SigmaRp
	}
	return 0
}

func (m *StrengthResult) GetSigmaK() float64 {
	if m != nil {
		return m.SigmaK
	}
	return 0
}

func (m *StrengthResult) GetSigmaP1() float64 {
	if m != nil {
		return m.SigmaP1
	}
	return 0
}

func (m *StrengthResult) GetSigmaP0() float64 {
	if m != nil {
		return m.SigmaP0
	}
	return 0
}

func (m *StrengthResult) GetSigmaMp() float64 {
	if m != nil {
		return m.SigmaMp
	}
	return 0
}

func (m *StrengthResult) GetSigmaMpm() float64 {
	if m != nil {
		return m.SigmaMpm
	}
	return 0
}

func (m *StrengthResult) GetSigmaMp0() float64 {
	if m != nil {
		return m.SigmaMp0
	}
	return 0
}

func (m *StrengthResult) GetSigmaMpm0() float64 {
	if m != nil {
		return m.SigmaMpm0
	}
	return 0
}

func (m *StrengthResult) GetSigmaMop() float64 {
	if m != nil {
		return m.SigmaMop
	}
	return 0
}

func (m *StrengthResult) GetSigmaKp() float64 {
	if m != nil {
		return m.SigmaKp
	}
	return 0
}

func (m *StrengthResult) GetTeta() float64 {
	if m != nil {
		return m.Teta
	}
	return 0
}

func (m *StrengthResult) GetDTeta() float64 {
	if m != nil {
		return m.DTeta
	}
	return 0
}

func (m *StrengthResult) GetDTetaK() float64 {
	if m != nil {
		return m.DTetaK
	}
	return 0
}

func (m *StrengthResult) GetTetaK() float64 {
	if m != nil {
		return m.TetaK
	}
	return 0
}

func (m *StrengthResult) GetMax1() float64 {
	if m != nil {
		return m.Max1
	}
	return 0
}

func (m *StrengthResult) GetMax2() float64 {
	if m != nil {
		return m.Max2
	}
	return 0
}

func (m *StrengthResult) GetMax3() float64 {
	if m != nil {
		return m.Max3
	}
	return 0
}

func (m *StrengthResult) GetMax4() float64 {
	if m != nil {
		return m.Max4
	}
	return 0
}

func (m *StrengthResult) GetMax5() float64 {
	if m != nil {
		return m.Max5
	}
	return 0
}

func (m *StrengthResult) GetMax6() float64 {
	if m != nil {
		return m.Max6
	}
	return 0
}

func (m *StrengthResult) GetMax7() float64 {
	if m != nil {
		return m.Max7
	}
	return 0
}

func (m *StrengthResult) GetMax8() float64 {
	if m != nil {
		return m.Max8
	}
	return 0
}

func (m *StrengthResult) GetMax9() float64 {
	if m != nil {
		return m.Max9
	}
	return 0
}

func (m *StrengthResult) GetMax10() float64 {
	if m != nil {
		return m.Max10
	}
	return 0
}

func (m *StrengthResult) GetMax11() float64 {
	if m != nil {
		return m.Max11
	}
	return 0
}

type CalcMomentStrength struct {
	FPb      float64           `protobuf:"fixed64,1,opt,name=fPb" json:"fPb,omitempty"`
	FPb1     float64           `protobuf:"fixed64,2,opt,name=fPb1" json:"fPb1,omitempty"`
	FPb2     float64           `protobuf:"fixed64,3,opt,name=fPb2" json:"fPb2,omitempty"`
	FPbr     float64           `protobuf:"fixed64,4,opt,name=fPbr" json:"fPbr,omitempty"`
	FSigmaB1 float64           `protobuf:"fixed64,5,opt,name=fSigmaB1" json:"fSigmaB1,omitempty"`
	FSigmaB2 float64           `protobuf:"fixed64,6,opt,name=fSigmaB2" json:"fSigmaB2,omitempty"`
	FDSigmaM float64           `protobuf:"fixed64,7,opt,name=fDSigmaM" json:"fDSigmaM,omitempty"`
	FDSigmaR float64           `protobuf:"fixed64,8,opt,name=fDSigmaR" json:"fDSigmaR,omitempty"`
	FQ       float64           `protobuf:"fixed64,9,opt,name=fQ" json:"fQ,omitempty"`
	SPb      float64           `protobuf:"fixed64,10,opt,name=sPb" json:"sPb,omitempty"`
	SPb1     float64           `protobuf:"fixed64,11,opt,name=sPb1" json:"sPb1,omitempty"`
	SPb2     float64           `protobuf:"fixed64,12,opt,name=sPb2" json:"sPb2,omitempty"`
	SPbr     float64           `protobuf:"fixed64,13,opt,name=sPbr" json:"sPbr,omitempty"`
	SSigmaB1 float64           `protobuf:"fixed64,14,opt,name=sSigmaB1" json:"sSigmaB1,omitempty"`
	SSigmaB2 float64           `protobuf:"fixed64,15,opt,name=sSigmaB2" json:"sSigmaB2,omitempty"`
	SDSigmaM float64           `protobuf:"fixed64,16,opt,name=sDSigmaM" json:"sDSigmaM,omitempty"`
	SDSigmaR float64           `protobuf:"fixed64,17,opt,name=sDSigmaR" json:"sDSigmaR,omitempty"`
	SQ       float64           `protobuf:"fixed64,18,opt,name=sQ" json:"sQ,omitempty"`
	QP       float64           `protobuf:"fixed64,19,opt,name=qP" json:"qP,omitempty"`
	Mkp      float64           `protobuf:"fixed64,20,opt,name=Mkp,json=mkp" json:"Mkp,omitempty"`
	Mkp1     float64           `protobuf:"fixed64,21,opt,name=Mkp1,json=mkp1" json:"Mkp1,omitempty"`
	Mrek     float64           `protobuf:"fixed64,22,opt,name=Mrek,json=mrek" json:"Mrek,omitempty"`
	Qrek     float64           `protobuf:"fixed64,23,opt,name=Qrek,json=qrek" json:"Qrek,omitempty"`
	Mmax     float64           `protobuf:"fixed64,24,opt,name=Mmax,json=mmax" json:"Mmax,omitempty"`
	Qmax     float64           `protobuf:"fixed64,25,opt,name=Qmax,json=qmax" json:"Qmax,omitempty"`
	Strength []*StrengthResult `protobuf:"bytes,26,rep,name=strength" json:"strength,omitempty"`
	VSigmaB1 bool              `protobuf:"varint,27,opt,name=vSigmaB1" json:"vSigmaB1,omitempty"`
	VSigmaB2 bool              `protobuf:"varint,28,opt,name=vSigmaB2" json:"vSigmaB2,omitempty"`
	VQmax    bool              `protobuf:"varint,29,opt,name=vQmax" json:"vQmax,omitempty"`
	VTeta1   bool              `protobuf:"varint,30,opt,name=vTeta1" json:"vTeta1,omitempty"`
	VTetaK1  bool              `protobuf:"varint,31,opt,name=vTetaK1" json:"vTetaK1,omitempty"`
	VTeta2   bool              `protobuf:"varint,32,opt,name=vTeta2" json:"vTeta2,omitempty"`
	VTetaK2  bool              `protobuf:"varint,33,opt,name=vTetaK2" json:"vTetaK2,omitempty"`
}

func (m *CalcMomentStrength) Reset()                    { *m = CalcMomentStrength{} }
func (m *CalcMomentStrength) String() string            { return proto.CompactTextString(m) }
func (*CalcMomentStrength) ProtoMessage()               {}
func (*CalcMomentStrength) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{60} }

func (m *CalcMomentStrength) GetFPb() float64 {
	if m != nil {
		return m.FPb
	}
	return 0
}

func (m *CalcMomentStrength) GetFPb1() float64 {
	if m != nil {
		return m.FPb1
	}
	return 0
}

func (m *CalcMomentStrength) GetFPb2() float64 {
	if m != nil {
		return m.FPb2
	}
	return 0
}

func (m *CalcMomentStrength) GetFPbr() float64 {
	if m != nil {
		return m.FPbr
	}
	return 0
}

func (m *CalcMomentStrength) GetFSigmaB1() float64 {
	if m != nil {
		return m.FSigmaB1
	}
	return 0
}

func (m *CalcMomentStrength) GetFSigmaB2() float64 {
	if m != nil {
		return m.FSigmaB2
	}
	return 0
}

func (m *CalcMomentStrength) GetFDSigmaM() float64 {
	if m != nil {
		return m.FDSigmaM
	}
	return 0
}

func (m *CalcMomentStrength) GetFDSigmaR() float64 {
	if m != nil {
		return m.FDSigmaR
	}
	return 0
}

func (m *CalcMomentStrength) GetFQ() float64 {
	if m != nil {
		return m.FQ
	}
	return 0
}

func (m *CalcMomentStrength) GetSPb() float64 {
	if m != nil {
		return m.SPb
	}
	return 0
}

func (m *CalcMomentStrength) GetSPb1() float64 {
	if m != nil {
		return m.SPb1
	}
	return 0
}

func (m *CalcMomentStrength) GetSPb2() float64 {
	if m != nil {
		return m.SPb2
	}
	return 0
}

func (m *CalcMomentStrength) GetSPbr() float64 {
	if m != nil {
		return m.SPbr
	}
	return 0
}

func (m *CalcMomentStrength) GetSSigmaB1() float64 {
	if m != nil {
		return m.SSigmaB1
	}
	return 0
}

func (m *CalcMomentStrength) GetSSigmaB2() float64 {
	if m != nil {
		return m.SSigmaB2
	}
	return 0
}

func (m *CalcMomentStrength) GetSDSigmaM() float64 {
	if m != nil {
		return m.SDSigmaM
	}
	return 0
}

func (m *CalcMomentStrength) GetSDSigmaR() float64 {
	if m != nil {
		return m.SDSigmaR
	}
	return 0
}

func (m *CalcMomentStrength) GetSQ() float64 {
	if m != nil {
		return m.SQ
	}
	return 0
}

func (m *CalcMomentStrength) GetQP() float64 {
	if m != nil {
		return m.QP
	}
	return 0
}

func (m *CalcMomentStrength) GetMkp() float64 {
	if m != nil {
		return m.Mkp
	}
	return 0
}

func (m *CalcMomentStrength) GetMkp1() float64 {
	if m != nil {
		return m.Mkp1
	}
	return 0
}

func (m *CalcMomentStrength) GetMrek() float64 {
	if m != nil {
		return m.Mrek
	}
	return 0
}

func (m *CalcMomentStrength) GetQrek() float64 {
	if m != nil {
		return m.Qrek
	}
	return 0
}

func (m *CalcMomentStrength) GetMmax() float64 {
	if m != nil {
		return m.Mmax
	}
	return 0
}

func (m *CalcMomentStrength) GetQmax() float64 {
	if m != nil {
		return m.Qmax
	}
	return 0
}

func (m *CalcMomentStrength) GetStrength() []*StrengthResult {
	if m != nil {
		return m.Strength
	}
	return nil
}

func (m *CalcMomentStrength) GetVSigmaB1() bool {
	if m != nil {
		return m.VSigmaB1
	}
	return false
}

func (m *CalcMomentStrength) GetVSigmaB2() bool {
	if m != nil {
		return m.VSigmaB2
	}
	return false
}

func (m *CalcMomentStrength) GetVQmax() bool {
	if m != nil {
		return m.VQmax
	}
	return false
}

func (m *CalcMomentStrength) GetVTeta1() bool {
	if m != nil {
		return m.VTeta1
	}
	return false
}

func (m *CalcMomentStrength) GetVTetaK1() bool {
	if m != nil {
		return m.VTetaK1
	}
	return false
}

func (m *CalcMomentStrength) GetVTeta2() bool {
	if m != nil {
		return m.VTeta2
	}
	return false
}

func (m *CalcMomentStrength) GetVTetaK2() bool {
	if m != nil {
		return m.VTetaK2
	}
	return false
}

type CalcMomentBasis struct {
	Pb       float64 `protobuf:"fixed64,1,opt,name=Pb,json=pb" json:"Pb,omitempty"`
	Pb1      float64 `protobuf:"fixed64,2,opt,name=Pb1,json=pb1" json:"Pb1,omitempty"`
	Pb2      float64 `protobuf:"fixed64,3,opt,name=Pb2,json=pb2" json:"Pb2,omitempty"`
	Pbr      float64 `protobuf:"fixed64,4,opt,name=Pbr,json=pbr" json:"Pbr,omitempty"`
	SigmaB1  float64 `protobuf:"fixed64,5,opt,name=sigmaB1" json:"sigmaB1,omitempty"`
	SigmaB2  float64 `protobuf:"fixed64,6,opt,name=sigmaB2" json:"sigmaB2,omitempty"`
	DSigmaM  float64 `protobuf:"fixed64,7,opt,name=dSigmaM" json:"dSigmaM,omitempty"`
	DSigmaR  float64 `protobuf:"fixed64,8,opt,name=dSigmaR" json:"dSigmaR,omitempty"`
	Q        float64 `protobuf:"fixed64,9,opt,name=q" json:"q,omitempty"`
	QP       float64 `protobuf:"fixed64,10,opt,name=qP" json:"qP,omitempty"`
	Mkp      float64 `protobuf:"fixed64,11,opt,name=Mkp,json=mkp" json:"Mkp,omitempty"`
	Mkp1     float64 `protobuf:"fixed64,12,opt,name=Mkp1,json=mkp1" json:"Mkp1,omitempty"`
	Mrek     float64 `protobuf:"fixed64,13,opt,name=Mrek,json=mrek" json:"Mrek,omitempty"`
	Qrek     float64 `protobuf:"fixed64,14,opt,name=Qrek,json=qrek" json:"Qrek,omitempty"`
	Mmax     float64 `protobuf:"fixed64,15,opt,name=Mmax,json=mmax" json:"Mmax,omitempty"`
	Qmax     float64 `protobuf:"fixed64,16,opt,name=Qmax,json=qmax" json:"Qmax,omitempty"`
	VSigmaB1 bool    `protobuf:"varint,17,opt,name=VSigmaB1,json=vSigmaB1" json:"VSigmaB1,omitempty"`
	VSigmaB2 bool    `protobuf:"varint,18,opt,name=VSigmaB2,json=vSigmaB2" json:"VSigmaB2,omitempty"`
}

func (m *CalcMomentBasis) Reset()                    { *m = CalcMomentBasis{} }
func (m *CalcMomentBasis) String() string            { return proto.CompactTextString(m) }
func (*CalcMomentBasis) ProtoMessage()               {}
func (*CalcMomentBasis) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{61} }

func (m *CalcMomentBasis) GetPb() float64 {
	if m != nil {
		return m.Pb
	}
	return 0
}

func (m *CalcMomentBasis) GetPb1() float64 {
	if m != nil {
		return m.Pb1
	}
	return 0
}

func (m *CalcMomentBasis) GetPb2() float64 {
	if m != nil {
		return m.Pb2
	}
	return 0
}

func (m *CalcMomentBasis) GetPbr() float64 {
	if m != nil {
		return m.Pbr
	}
	return 0
}

func (m *CalcMomentBasis) GetSigmaB1() float64 {
	if m != nil {
		return m.SigmaB1
	}
	return 0
}

func (m *CalcMomentBasis) GetSigmaB2() float64 {
	if m != nil {
		return m.SigmaB2
	}
	return 0
}

func (m *CalcMomentBasis) GetDSigmaM() float64 {
	if m != nil {
		return m.DSigmaM
	}
	return 0
}

func (m *CalcMomentBasis) GetDSigmaR() float64 {
	if m != nil {
		return m.DSigmaR
	}
	return 0
}

func (m *CalcMomentBasis) GetQ() float64 {
	if m != nil {
		return m.Q
	}
	return 0
}

func (m *CalcMomentBasis) GetQP() float64 {
	if m != nil {
		return m.QP
	}
	return 0
}

func (m *CalcMomentBasis) GetMkp() float64 {
	if m != nil {
		return m.Mkp
	}
	return 0
}

func (m *CalcMomentBasis) GetMkp1() float64 {
	if m != nil {
		return m.Mkp1
	}
	return 0
}

func (m *CalcMomentBasis) GetMrek() float64 {
	if m != nil {
		return m.Mrek
	}
	return 0
}

func (m *CalcMomentBasis) GetQrek() float64 {
	if m != nil {
		return m.Qrek
	}
	return 0
}

func (m *CalcMomentBasis) GetMmax() float64 {
	if m != nil {
		return m.Mmax
	}
	return 0
}

func (m *CalcMomentBasis) GetQmax() float64 {
	if m != nil {
		return m.Qmax
	}
	return 0
}

func (m *CalcMomentBasis) GetVSigmaB1() bool {
	if m != nil {
		return m.VSigmaB1
	}
	return false
}

func (m *CalcMomentBasis) GetVSigmaB2() bool {
	if m != nil {
		return m.VSigmaB2
	}
	return false
}

type CalculatedFlange struct {
	B0       float64             `protobuf:"fixed64,1,opt,name=b0" json:"b0,omitempty"`
	Dsp      float64             `protobuf:"fixed64,2,opt,name=Dsp,json=dsp" json:"Dsp,omitempty"`
	Po       float64             `protobuf:"fixed64,3,opt,name=Po,json=po" json:"Po,omitempty"`
	Rp       float64             `protobuf:"fixed64,4,opt,name=Rp,json=rp" json:"Rp,omitempty"`
	A        float64             `protobuf:"fixed64,5,opt,name=A,json=a" json:"A,omitempty"`
	Qd       float64             `protobuf:"fixed64,6,opt,name=Qd,json=qd" json:"Qd,omitempty"`
	Qfm      float64             `protobuf:"fixed64,7,opt,name=Qfm,json=qfm" json:"Qfm,omitempty"`
	Qt       float64             `protobuf:"fixed64,8,opt,name=Qt,json=qt" json:"Qt,omitempty"`
	Alpha    float64             `protobuf:"fixed64,9,opt,name=alpha" json:"alpha,omitempty"`
	AlphaM   float64             `protobuf:"fixed64,10,opt,name=alphaM" json:"alphaM,omitempty"`
	Strength *CalcMomentStrength `protobuf:"bytes,11,opt,name=strength" json:"strength,omitempty"`
	Basis    *CalcMomentBasis    `protobuf:"bytes,12,opt,name=basis" json:"basis,omitempty"`
}

func (m *CalculatedFlange) Reset()                    { *m = CalculatedFlange{} }
func (m *CalculatedFlange) String() string            { return proto.CompactTextString(m) }
func (*CalculatedFlange) ProtoMessage()               {}
func (*CalculatedFlange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{62} }

func (m *CalculatedFlange) GetB0() float64 {
	if m != nil {
		return m.B0
	}
	return 0
}

func (m *CalculatedFlange) GetDsp() float64 {
	if m != nil {
		return m.Dsp
	}
	return 0
}

func (m *CalculatedFlange) GetPo() float64 {
	if m != nil {
		return m.Po
	}
	return 0
}

func (m *CalculatedFlange) GetRp() float64 {
	if m != nil {
		return m.Rp
	}
	return 0
}

func (m *CalculatedFlange) GetA() float64 {
	if m != nil {
		return m.A
	}
	return 0
}

func (m *CalculatedFlange) GetQd() float64 {
	if m != nil {
		return m.Qd
	}
	return 0
}

func (m *CalculatedFlange) GetQfm() float64 {
	if m != nil {
		return m.Qfm
	}
	return 0
}

func (m *CalculatedFlange) GetQt() float64 {
	if m != nil {
		return m.Qt
	}
	return 0
}

func (m *CalculatedFlange) GetAlpha() float64 {
	if m != nil {
		return m.Alpha
	}
	return 0
}

func (m *CalculatedFlange) GetAlphaM() float64 {
	if m != nil {
		return m.AlphaM
	}
	return 0
}

func (m *CalculatedFlange) GetStrength() *CalcMomentStrength {
	if m != nil {
		return m.Strength
	}
	return nil
}

func (m *CalculatedFlange) GetBasis() *CalcMomentBasis {
	if m != nil {
		return m.Basis
	}
	return nil
}

type CalcFormulas struct {
	B0     string `protobuf:"bytes,1,opt,name=b0" json:"b0,omitempty"`
	Dcp    string `protobuf:"bytes,2,opt,name=Dcp,json=dcp" json:"Dcp,omitempty"`
	Po     string `protobuf:"bytes,3,opt,name=Po,json=po" json:"Po,omitempty"`
	Rp     string `protobuf:"bytes,4,opt,name=Rp,json=rp" json:"Rp,omitempty"`
	A      string `protobuf:"bytes,5,opt,name=A,json=a" json:"A,omitempty"`
	Qd     string `protobuf:"bytes,6,opt,name=Qd,json=qd" json:"Qd,omitempty"`
	Qfm    string `protobuf:"bytes,7,opt,name=Qfm,json=qfm" json:"Qfm,omitempty"`
	Qt     string `protobuf:"bytes,8,opt,name=Qt,json=qt" json:"Qt,omitempty"`
	Alpha  string `protobuf:"bytes,9,opt,name=alpha" json:"alpha,omitempty"`
	AlphaM string `protobuf:"bytes,10,opt,name=alphaM" json:"alphaM,omitempty"`
}

func (m *CalcFormulas) Reset()                    { *m = CalcFormulas{} }
func (m *CalcFormulas) String() string            { return proto.CompactTextString(m) }
func (*CalcFormulas) ProtoMessage()               {}
func (*CalcFormulas) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{63} }

func (m *CalcFormulas) GetB0() string {
	if m != nil {
		return m.B0
	}
	return ""
}

func (m *CalcFormulas) GetDcp() string {
	if m != nil {
		return m.Dcp
	}
	return ""
}

func (m *CalcFormulas) GetPo() string {
	if m != nil {
		return m.Po
	}
	return ""
}

func (m *CalcFormulas) GetRp() string {
	if m != nil {
		return m.Rp
	}
	return ""
}

func (m *CalcFormulas) GetA() string {
	if m != nil {
		return m.A
	}
	return ""
}

func (m *CalcFormulas) GetQd() string {
	if m != nil {
		return m.Qd
	}
	return ""
}

func (m *CalcFormulas) GetQfm() string {
	if m != nil {
		return m.Qfm
	}
	return ""
}

func (m *CalcFormulas) GetQt() string {
	if m != nil {
		return m.Qt
	}
	return ""
}

func (m *CalcFormulas) GetAlpha() string {
	if m != nil {
		return m.Alpha
	}
	return ""
}

func (m *CalcFormulas) GetAlphaM() string {
	if m != nil {
		return m.AlphaM
	}
	return ""
}

type FlangeResponse struct {
	IsSameFlange bool              `protobuf:"varint,1,opt,name=isSameFlange" json:"isSameFlange,omitempty"`
	Flanges      []*FlangeResult   `protobuf:"bytes,2,rep,name=flanges" json:"flanges,omitempty"`
	Bolt         *BoltResult       `protobuf:"bytes,3,opt,name=bolt" json:"bolt,omitempty"`
	Gasket       *GasketResult     `protobuf:"bytes,4,opt,name=gasket" json:"gasket,omitempty"`
	Embed        *EmbedResult      `protobuf:"bytes,5,opt,name=embed" json:"embed,omitempty"`
	Calc         *CalculatedFlange `protobuf:"bytes,6,opt,name=calc" json:"calc,omitempty"`
	Formulas     *CalcFormulas     `protobuf:"bytes,7,opt,name=formulas" json:"formulas,omitempty"`
}

func (m *FlangeResponse) Reset()                    { *m = FlangeResponse{} }
func (m *FlangeResponse) String() string            { return proto.CompactTextString(m) }
func (*FlangeResponse) ProtoMessage()               {}
func (*FlangeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{64} }

func (m *FlangeResponse) GetIsSameFlange() bool {
	if m != nil {
		return m.IsSameFlange
	}
	return false
}

func (m *FlangeResponse) GetFlanges() []*FlangeResult {
	if m != nil {
		return m.Flanges
	}
	return nil
}

func (m *FlangeResponse) GetBolt() *BoltResult {
	if m != nil {
		return m.Bolt
	}
	return nil
}

func (m *FlangeResponse) GetGasket() *GasketResult {
	if m != nil {
		return m.Gasket
	}
	return nil
}

func (m *FlangeResponse) GetEmbed() *EmbedResult {
	if m != nil {
		return m.Embed
	}
	return nil
}

func (m *FlangeResponse) GetCalc() *CalculatedFlange {
	if m != nil {
		return m.Calc
	}
	return nil
}

func (m *FlangeResponse) GetFormulas() *CalcFormulas {
	if m != nil {
		return m.Formulas
	}
	return nil
}

func init() {
	proto.RegisterType((*PingRequest)(nil), "moment_proto.PingRequest")
	proto.RegisterType((*PingResponse)(nil), "moment_proto.PingResponse")
	proto.RegisterType((*IdResponse)(nil), "moment_proto.IdResponse")
	proto.RegisterType((*Response)(nil), "moment_proto.Response")
	proto.RegisterType((*Material)(nil), "moment_proto.Material")
	proto.RegisterType((*MaterialWithIsEmpty)(nil), "moment_proto.MaterialWithIsEmpty")
	proto.RegisterType((*GetMaterialsRequest)(nil), "moment_proto.GetMaterialsRequest")
	proto.RegisterType((*CreateMaterialRequest)(nil), "moment_proto.CreateMaterialRequest")
	proto.RegisterType((*UpdateMaterialRequest)(nil), "moment_proto.UpdateMaterialRequest")
	proto.RegisterType((*DeleteMaterialRequest)(nil), "moment_proto.DeleteMaterialRequest")
	proto.RegisterType((*MaterialsResponse)(nil), "moment_proto.MaterialsResponse")
	proto.RegisterType((*MaterialsWithIsEmptyResponse)(nil), "moment_proto.MaterialsWithIsEmptyResponse")
	proto.RegisterType((*GetMaterialsDataRequest)(nil), "moment_proto.GetMaterialsDataRequest")
	proto.RegisterType((*MaterialsDataResponse)(nil), "moment_proto.MaterialsDataResponse")
	proto.RegisterType((*MaterialsDataResponse_Voltage)(nil), "moment_proto.MaterialsDataResponse.Voltage")
	proto.RegisterType((*MaterialsDataResponse_Elasticity)(nil), "moment_proto.MaterialsDataResponse.Elasticity")
	proto.RegisterType((*MaterialsDataResponse_Alpha)(nil), "moment_proto.MaterialsDataResponse.Alpha")
	proto.RegisterType((*Voltage)(nil), "moment_proto.Voltage")
	proto.RegisterType((*CreateVoltageRequest)(nil), "moment_proto.CreateVoltageRequest")
	proto.RegisterType((*UpdateVoltageRequest)(nil), "moment_proto.UpdateVoltageRequest")
	proto.RegisterType((*DeleteVoltageRequest)(nil), "moment_proto.DeleteVoltageRequest")
	proto.RegisterType((*Elasticity)(nil), "moment_proto.Elasticity")
	proto.RegisterType((*CreateElasticityRequest)(nil), "moment_proto.CreateElasticityRequest")
	proto.RegisterType((*UpdateElasticityRequest)(nil), "moment_proto.UpdateElasticityRequest")
	proto.RegisterType((*DeleteElasticityRequest)(nil), "moment_proto.DeleteElasticityRequest")
	proto.RegisterType((*Alpha)(nil), "moment_proto.Alpha")
	proto.RegisterType((*CreateAlphaRequest)(nil), "moment_proto.CreateAlphaRequest")
	proto.RegisterType((*UpdateAlphaRequest)(nil), "moment_proto.UpdateAlphaRequest")
	proto.RegisterType((*DeleteAlphaRequest)(nil), "moment_proto.DeleteAlphaRequest")
	proto.RegisterType((*Gasket)(nil), "moment_proto.Gasket")
	proto.RegisterType((*GetGasketRequest)(nil), "moment_proto.GetGasketRequest")
	proto.RegisterType((*CreateGasketRequest)(nil), "moment_proto.CreateGasketRequest")
	proto.RegisterType((*UpdateGasketRequest)(nil), "moment_proto.UpdateGasketRequest")
	proto.RegisterType((*DeleteGasketRequest)(nil), "moment_proto.DeleteGasketRequest")
	proto.RegisterType((*GasketResponse)(nil), "moment_proto.GasketResponse")
	proto.RegisterType((*GasketType)(nil), "moment_proto.GasketType")
	proto.RegisterType((*GetGasketTypeRequest)(nil), "moment_proto.GetGasketTypeRequest")
	proto.RegisterType((*CreateGasketTypeRequest)(nil), "moment_proto.CreateGasketTypeRequest")
	proto.RegisterType((*UpdateGasketTypeRequest)(nil), "moment_proto.UpdateGasketTypeRequest")
	proto.RegisterType((*DeleteGasketTypeRequest)(nil), "moment_proto.DeleteGasketTypeRequest")
	proto.RegisterType((*GasketTypeResponse)(nil), "moment_proto.GasketTypeResponse")
	proto.RegisterType((*Env)(nil), "moment_proto.Env")
	proto.RegisterType((*GetEnvRequest)(nil), "moment_proto.GetEnvRequest")
	proto.RegisterType((*CreateEnvRequest)(nil), "moment_proto.CreateEnvRequest")
	proto.RegisterType((*UpdateEnvRequest)(nil), "moment_proto.UpdateEnvRequest")
	proto.RegisterType((*DeleteEnvRequest)(nil), "moment_proto.DeleteEnvRequest")
	proto.RegisterType((*EnvResponse)(nil), "moment_proto.EnvResponse")
	proto.RegisterType((*CreateEnvDataRequest)(nil), "moment_proto.CreateEnvDataRequest")
	proto.RegisterType((*UpdateEnvDataRequest)(nil), "moment_proto.UpdateEnvDataRequest")
	proto.RegisterType((*DeleteEnvDataRequest)(nil), "moment_proto.DeleteEnvDataRequest")
	proto.RegisterType((*CreateGasketDataRequest)(nil), "moment_proto.CreateGasketDataRequest")
	proto.RegisterType((*UpdateGasketDataRequest)(nil), "moment_proto.UpdateGasketDataRequest")
	proto.RegisterType((*DeleteGasketDataRequest)(nil), "moment_proto.DeleteGasketDataRequest")
	proto.RegisterType((*FlangeData)(nil), "moment_proto.FlangeData")
	proto.RegisterType((*BoltData)(nil), "moment_proto.BoltData")
	proto.RegisterType((*GasketData)(nil), "moment_proto.GasketData")
	proto.RegisterType((*EmbedData)(nil), "moment_proto.EmbedData")
	proto.RegisterType((*FlangeRequest)(nil), "moment_proto.FlangeRequest")
	proto.RegisterType((*FlangeResult)(nil), "moment_proto.FlangeResult")
	proto.RegisterType((*BoltResult)(nil), "moment_proto.BoltResult")
	proto.RegisterType((*GasketResult)(nil), "moment_proto.GasketResult")
	proto.RegisterType((*EmbedResult)(nil), "moment_proto.EmbedResult")
	proto.RegisterType((*StrengthResult)(nil), "moment_proto.StrengthResult")
	proto.RegisterType((*CalcMomentStrength)(nil), "moment_proto.CalcMomentStrength")
	proto.RegisterType((*CalcMomentBasis)(nil), "moment_proto.CalcMomentBasis")
	proto.RegisterType((*CalculatedFlange)(nil), "moment_proto.CalculatedFlange")
	proto.RegisterType((*CalcFormulas)(nil), "moment_proto.CalcFormulas")
	proto.RegisterType((*FlangeResponse)(nil), "moment_proto.FlangeResponse")
	proto.RegisterEnum("moment_proto.FlangeData_Type", FlangeData_Type_name, FlangeData_Type_value)
	proto.RegisterEnum("moment_proto.FlangeRequest_Flanges", FlangeRequest_Flanges_name, FlangeRequest_Flanges_value)
	proto.RegisterEnum("moment_proto.FlangeRequest_Type", FlangeRequest_Type_name, FlangeRequest_Type_value)
	proto.RegisterEnum("moment_proto.FlangeRequest_Condition", FlangeRequest_Condition_name, FlangeRequest_Condition_value)
	proto.RegisterEnum("moment_proto.FlangeRequest_Calcutation", FlangeRequest_Calcutation_name, FlangeRequest_Calcutation_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PingService service

type PingServiceClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
}

type pingServiceClient struct {
	cc *grpc.ClientConn
}

func NewPingServiceClient(cc *grpc.ClientConn) PingServiceClient {
	return &pingServiceClient{cc}
}

func (c *pingServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := grpc.Invoke(ctx, "/moment_proto.PingService/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PingService service

type PingServiceServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
}

func RegisterPingServiceServer(s *grpc.Server, srv PingServiceServer) {
	s.RegisterService(&_PingService_serviceDesc, srv)
}

func _PingService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PingServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_proto.PingService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PingServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "moment_proto.PingService",
	HandlerType: (*PingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _PingService_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/moment.proto",
}

// Client API for MaterialsService service

type MaterialsServiceClient interface {
	GetMaterials(ctx context.Context, in *GetMaterialsRequest, opts ...grpc.CallOption) (*MaterialsResponse, error)
	GetMaterialsData(ctx context.Context, in *GetMaterialsDataRequest, opts ...grpc.CallOption) (*MaterialsDataResponse, error)
	GetMaterialsWithIsEmpty(ctx context.Context, in *GetMaterialsRequest, opts ...grpc.CallOption) (*MaterialsWithIsEmptyResponse, error)
	CreateMaterial(ctx context.Context, in *CreateMaterialRequest, opts ...grpc.CallOption) (*IdResponse, error)
	UpdateMaterial(ctx context.Context, in *UpdateMaterialRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteMaterial(ctx context.Context, in *DeleteMaterialRequest, opts ...grpc.CallOption) (*Response, error)
	CreateVoltage(ctx context.Context, in *CreateVoltageRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateVoltage(ctx context.Context, in *UpdateVoltageRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteVoltage(ctx context.Context, in *DeleteVoltageRequest, opts ...grpc.CallOption) (*Response, error)
	CreateElasticity(ctx context.Context, in *CreateElasticityRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateElasticity(ctx context.Context, in *UpdateElasticityRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteElasticity(ctx context.Context, in *DeleteElasticityRequest, opts ...grpc.CallOption) (*Response, error)
	CreateAlpha(ctx context.Context, in *CreateAlphaRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateAlpha(ctx context.Context, in *UpdateAlphaRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteAlpha(ctx context.Context, in *DeleteAlphaRequest, opts ...grpc.CallOption) (*Response, error)
}

type materialsServiceClient struct {
	cc *grpc.ClientConn
}

func NewMaterialsServiceClient(cc *grpc.ClientConn) MaterialsServiceClient {
	return &materialsServiceClient{cc}
}

func (c *materialsServiceClient) GetMaterials(ctx context.Context, in *GetMaterialsRequest, opts ...grpc.CallOption) (*MaterialsResponse, error) {
	out := new(MaterialsResponse)
	err := grpc.Invoke(ctx, "/moment_proto.MaterialsService/GetMaterials", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialsServiceClient) GetMaterialsData(ctx context.Context, in *GetMaterialsDataRequest, opts ...grpc.CallOption) (*MaterialsDataResponse, error) {
	out := new(MaterialsDataResponse)
	err := grpc.Invoke(ctx, "/moment_proto.MaterialsService/GetMaterialsData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialsServiceClient) GetMaterialsWithIsEmpty(ctx context.Context, in *GetMaterialsRequest, opts ...grpc.CallOption) (*MaterialsWithIsEmptyResponse, error) {
	out := new(MaterialsWithIsEmptyResponse)
	err := grpc.Invoke(ctx, "/moment_proto.MaterialsService/GetMaterialsWithIsEmpty", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialsServiceClient) CreateMaterial(ctx context.Context, in *CreateMaterialRequest, opts ...grpc.CallOption) (*IdResponse, error) {
	out := new(IdResponse)
	err := grpc.Invoke(ctx, "/moment_proto.MaterialsService/CreateMaterial", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialsServiceClient) UpdateMaterial(ctx context.Context, in *UpdateMaterialRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/moment_proto.MaterialsService/UpdateMaterial", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialsServiceClient) DeleteMaterial(ctx context.Context, in *DeleteMaterialRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/moment_proto.MaterialsService/DeleteMaterial", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialsServiceClient) CreateVoltage(ctx context.Context, in *CreateVoltageRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/moment_proto.MaterialsService/CreateVoltage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialsServiceClient) UpdateVoltage(ctx context.Context, in *UpdateVoltageRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/moment_proto.MaterialsService/UpdateVoltage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialsServiceClient) DeleteVoltage(ctx context.Context, in *DeleteVoltageRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/moment_proto.MaterialsService/DeleteVoltage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialsServiceClient) CreateElasticity(ctx context.Context, in *CreateElasticityRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/moment_proto.MaterialsService/CreateElasticity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialsServiceClient) UpdateElasticity(ctx context.Context, in *UpdateElasticityRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/moment_proto.MaterialsService/UpdateElasticity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialsServiceClient) DeleteElasticity(ctx context.Context, in *DeleteElasticityRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/moment_proto.MaterialsService/DeleteElasticity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialsServiceClient) CreateAlpha(ctx context.Context, in *CreateAlphaRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/moment_proto.MaterialsService/CreateAlpha", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialsServiceClient) UpdateAlpha(ctx context.Context, in *UpdateAlphaRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/moment_proto.MaterialsService/UpdateAlpha", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialsServiceClient) DeleteAlpha(ctx context.Context, in *DeleteAlphaRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/moment_proto.MaterialsService/DeleteAlpha", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MaterialsService service

type MaterialsServiceServer interface {
	GetMaterials(context.Context, *GetMaterialsRequest) (*MaterialsResponse, error)
	GetMaterialsData(context.Context, *GetMaterialsDataRequest) (*MaterialsDataResponse, error)
	GetMaterialsWithIsEmpty(context.Context, *GetMaterialsRequest) (*MaterialsWithIsEmptyResponse, error)
	CreateMaterial(context.Context, *CreateMaterialRequest) (*IdResponse, error)
	UpdateMaterial(context.Context, *UpdateMaterialRequest) (*Response, error)
	DeleteMaterial(context.Context, *DeleteMaterialRequest) (*Response, error)
	CreateVoltage(context.Context, *CreateVoltageRequest) (*Response, error)
	UpdateVoltage(context.Context, *UpdateVoltageRequest) (*Response, error)
	DeleteVoltage(context.Context, *DeleteVoltageRequest) (*Response, error)
	CreateElasticity(context.Context, *CreateElasticityRequest) (*Response, error)
	UpdateElasticity(context.Context, *UpdateElasticityRequest) (*Response, error)
	DeleteElasticity(context.Context, *DeleteElasticityRequest) (*Response, error)
	CreateAlpha(context.Context, *CreateAlphaRequest) (*Response, error)
	UpdateAlpha(context.Context, *UpdateAlphaRequest) (*Response, error)
	DeleteAlpha(context.Context, *DeleteAlphaRequest) (*Response, error)
}

func RegisterMaterialsServiceServer(s *grpc.Server, srv MaterialsServiceServer) {
	s.RegisterService(&_MaterialsService_serviceDesc, srv)
}

func _MaterialsService_GetMaterials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMaterialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialsServiceServer).GetMaterials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_proto.MaterialsService/GetMaterials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialsServiceServer).GetMaterials(ctx, req.(*GetMaterialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialsService_GetMaterialsData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMaterialsDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialsServiceServer).GetMaterialsData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_proto.MaterialsService/GetMaterialsData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialsServiceServer).GetMaterialsData(ctx, req.(*GetMaterialsDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialsService_GetMaterialsWithIsEmpty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMaterialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialsServiceServer).GetMaterialsWithIsEmpty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_proto.MaterialsService/GetMaterialsWithIsEmpty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialsServiceServer).GetMaterialsWithIsEmpty(ctx, req.(*GetMaterialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialsService_CreateMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMaterialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialsServiceServer).CreateMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_proto.MaterialsService/CreateMaterial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialsServiceServer).CreateMaterial(ctx, req.(*CreateMaterialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialsService_UpdateMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMaterialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialsServiceServer).UpdateMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_proto.MaterialsService/UpdateMaterial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialsServiceServer).UpdateMaterial(ctx, req.(*UpdateMaterialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialsService_DeleteMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMaterialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialsServiceServer).DeleteMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_proto.MaterialsService/DeleteMaterial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialsServiceServer).DeleteMaterial(ctx, req.(*DeleteMaterialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialsService_CreateVoltage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVoltageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialsServiceServer).CreateVoltage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_proto.MaterialsService/CreateVoltage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialsServiceServer).CreateVoltage(ctx, req.(*CreateVoltageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialsService_UpdateVoltage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVoltageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialsServiceServer).UpdateVoltage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_proto.MaterialsService/UpdateVoltage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialsServiceServer).UpdateVoltage(ctx, req.(*UpdateVoltageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialsService_DeleteVoltage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVoltageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialsServiceServer).DeleteVoltage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_proto.MaterialsService/DeleteVoltage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialsServiceServer).DeleteVoltage(ctx, req.(*DeleteVoltageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialsService_CreateElasticity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateElasticityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialsServiceServer).CreateElasticity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_proto.MaterialsService/CreateElasticity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialsServiceServer).CreateElasticity(ctx, req.(*CreateElasticityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialsService_UpdateElasticity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateElasticityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialsServiceServer).UpdateElasticity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_proto.MaterialsService/UpdateElasticity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialsServiceServer).UpdateElasticity(ctx, req.(*UpdateElasticityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialsService_DeleteElasticity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteElasticityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialsServiceServer).DeleteElasticity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_proto.MaterialsService/DeleteElasticity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialsServiceServer).DeleteElasticity(ctx, req.(*DeleteElasticityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialsService_CreateAlpha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAlphaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialsServiceServer).CreateAlpha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_proto.MaterialsService/CreateAlpha",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialsServiceServer).CreateAlpha(ctx, req.(*CreateAlphaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialsService_UpdateAlpha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAlphaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialsServiceServer).UpdateAlpha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_proto.MaterialsService/UpdateAlpha",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialsServiceServer).UpdateAlpha(ctx, req.(*UpdateAlphaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialsService_DeleteAlpha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAlphaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialsServiceServer).DeleteAlpha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_proto.MaterialsService/DeleteAlpha",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialsServiceServer).DeleteAlpha(ctx, req.(*DeleteAlphaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MaterialsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "moment_proto.MaterialsService",
	HandlerType: (*MaterialsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMaterials",
			Handler:    _MaterialsService_GetMaterials_Handler,
		},
		{
			MethodName: "GetMaterialsData",
			Handler:    _MaterialsService_GetMaterialsData_Handler,
		},
		{
			MethodName: "GetMaterialsWithIsEmpty",
			Handler:    _MaterialsService_GetMaterialsWithIsEmpty_Handler,
		},
		{
			MethodName: "CreateMaterial",
			Handler:    _MaterialsService_CreateMaterial_Handler,
		},
		{
			MethodName: "UpdateMaterial",
			Handler:    _MaterialsService_UpdateMaterial_Handler,
		},
		{
			MethodName: "DeleteMaterial",
			Handler:    _MaterialsService_DeleteMaterial_Handler,
		},
		{
			MethodName: "CreateVoltage",
			Handler:    _MaterialsService_CreateVoltage_Handler,
		},
		{
			MethodName: "UpdateVoltage",
			Handler:    _MaterialsService_UpdateVoltage_Handler,
		},
		{
			MethodName: "DeleteVoltage",
			Handler:    _MaterialsService_DeleteVoltage_Handler,
		},
		{
			MethodName: "CreateElasticity",
			Handler:    _MaterialsService_CreateElasticity_Handler,
		},
		{
			MethodName: "UpdateElasticity",
			Handler:    _MaterialsService_UpdateElasticity_Handler,
		},
		{
			MethodName: "DeleteElasticity",
			Handler:    _MaterialsService_DeleteElasticity_Handler,
		},
		{
			MethodName: "CreateAlpha",
			Handler:    _MaterialsService_CreateAlpha_Handler,
		},
		{
			MethodName: "UpdateAlpha",
			Handler:    _MaterialsService_UpdateAlpha_Handler,
		},
		{
			MethodName: "DeleteAlpha",
			Handler:    _MaterialsService_DeleteAlpha_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/moment.proto",
}

// Client API for GasketService service

type GasketServiceClient interface {
	GetGasket(ctx context.Context, in *GetGasketRequest, opts ...grpc.CallOption) (*GasketResponse, error)
	CreateGasket(ctx context.Context, in *CreateGasketRequest, opts ...grpc.CallOption) (*IdResponse, error)
	UpdateGasket(ctx context.Context, in *UpdateGasketRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteGasket(ctx context.Context, in *DeleteGasketRequest, opts ...grpc.CallOption) (*Response, error)
	GetGasketType(ctx context.Context, in *GetGasketTypeRequest, opts ...grpc.CallOption) (*GasketTypeResponse, error)
	CreateGasketType(ctx context.Context, in *CreateGasketTypeRequest, opts ...grpc.CallOption) (*IdResponse, error)
	UpdateGasketType(ctx context.Context, in *UpdateGasketTypeRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteGasketType(ctx context.Context, in *DeleteGasketTypeRequest, opts ...grpc.CallOption) (*Response, error)
	GetEnv(ctx context.Context, in *GetEnvRequest, opts ...grpc.CallOption) (*EnvResponse, error)
	CreateEnv(ctx context.Context, in *CreateEnvRequest, opts ...grpc.CallOption) (*IdResponse, error)
	UpdateEnv(ctx context.Context, in *UpdateEnvRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteEnv(ctx context.Context, in *DeleteEnvRequest, opts ...grpc.CallOption) (*Response, error)
	CreateEnvData(ctx context.Context, in *CreateEnvDataRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateEnvData(ctx context.Context, in *UpdateEnvDataRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteEnvData(ctx context.Context, in *DeleteEnvDataRequest, opts ...grpc.CallOption) (*Response, error)
	CreateGasketData(ctx context.Context, in *CreateGasketDataRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateGasketData(ctx context.Context, in *UpdateGasketDataRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteGasketData(ctx context.Context, in *DeleteGasketDataRequest, opts ...grpc.CallOption) (*Response, error)
}

type gasketServiceClient struct {
	cc *grpc.ClientConn
}

func NewGasketServiceClient(cc *grpc.ClientConn) GasketServiceClient {
	return &gasketServiceClient{cc}
}

func (c *gasketServiceClient) GetGasket(ctx context.Context, in *GetGasketRequest, opts ...grpc.CallOption) (*GasketResponse, error) {
	out := new(GasketResponse)
	err := grpc.Invoke(ctx, "/moment_proto.GasketService/GetGasket", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) CreateGasket(ctx context.Context, in *CreateGasketRequest, opts ...grpc.CallOption) (*IdResponse, error) {
	out := new(IdResponse)
	err := grpc.Invoke(ctx, "/moment_proto.GasketService/CreateGasket", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) UpdateGasket(ctx context.Context, in *UpdateGasketRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/moment_proto.GasketService/UpdateGasket", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) DeleteGasket(ctx context.Context, in *DeleteGasketRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/moment_proto.GasketService/DeleteGasket", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) GetGasketType(ctx context.Context, in *GetGasketTypeRequest, opts ...grpc.CallOption) (*GasketTypeResponse, error) {
	out := new(GasketTypeResponse)
	err := grpc.Invoke(ctx, "/moment_proto.GasketService/GetGasketType", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) CreateGasketType(ctx context.Context, in *CreateGasketTypeRequest, opts ...grpc.CallOption) (*IdResponse, error) {
	out := new(IdResponse)
	err := grpc.Invoke(ctx, "/moment_proto.GasketService/CreateGasketType", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) UpdateGasketType(ctx context.Context, in *UpdateGasketTypeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/moment_proto.GasketService/UpdateGasketType", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) DeleteGasketType(ctx context.Context, in *DeleteGasketTypeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/moment_proto.GasketService/DeleteGasketType", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) GetEnv(ctx context.Context, in *GetEnvRequest, opts ...grpc.CallOption) (*EnvResponse, error) {
	out := new(EnvResponse)
	err := grpc.Invoke(ctx, "/moment_proto.GasketService/GetEnv", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) CreateEnv(ctx context.Context, in *CreateEnvRequest, opts ...grpc.CallOption) (*IdResponse, error) {
	out := new(IdResponse)
	err := grpc.Invoke(ctx, "/moment_proto.GasketService/CreateEnv", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) UpdateEnv(ctx context.Context, in *UpdateEnvRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/moment_proto.GasketService/UpdateEnv", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) DeleteEnv(ctx context.Context, in *DeleteEnvRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/moment_proto.GasketService/DeleteEnv", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) CreateEnvData(ctx context.Context, in *CreateEnvDataRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/moment_proto.GasketService/CreateEnvData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) UpdateEnvData(ctx context.Context, in *UpdateEnvDataRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/moment_proto.GasketService/UpdateEnvData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) DeleteEnvData(ctx context.Context, in *DeleteEnvDataRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/moment_proto.GasketService/DeleteEnvData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) CreateGasketData(ctx context.Context, in *CreateGasketDataRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/moment_proto.GasketService/CreateGasketData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) UpdateGasketData(ctx context.Context, in *UpdateGasketDataRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/moment_proto.GasketService/UpdateGasketData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasketServiceClient) DeleteGasketData(ctx context.Context, in *DeleteGasketDataRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/moment_proto.GasketService/DeleteGasketData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GasketService service

type GasketServiceServer interface {
	GetGasket(context.Context, *GetGasketRequest) (*GasketResponse, error)
	CreateGasket(context.Context, *CreateGasketRequest) (*IdResponse, error)
	UpdateGasket(context.Context, *UpdateGasketRequest) (*Response, error)
	DeleteGasket(context.Context, *DeleteGasketRequest) (*Response, error)
	GetGasketType(context.Context, *GetGasketTypeRequest) (*GasketTypeResponse, error)
	CreateGasketType(context.Context, *CreateGasketTypeRequest) (*IdResponse, error)
	UpdateGasketType(context.Context, *UpdateGasketTypeRequest) (*Response, error)
	DeleteGasketType(context.Context, *DeleteGasketTypeRequest) (*Response, error)
	GetEnv(context.Context, *GetEnvRequest) (*EnvResponse, error)
	CreateEnv(context.Context, *CreateEnvRequest) (*IdResponse, error)
	UpdateEnv(context.Context, *UpdateEnvRequest) (*Response, error)
	DeleteEnv(context.Context, *DeleteEnvRequest) (*Response, error)
	CreateEnvData(context.Context, *CreateEnvDataRequest) (*Response, error)
	UpdateEnvData(context.Context, *UpdateEnvDataRequest) (*Response, error)
	DeleteEnvData(context.Context, *DeleteEnvDataRequest) (*Response, error)
	CreateGasketData(context.Context, *CreateGasketDataRequest) (*Response, error)
	UpdateGasketData(context.Context, *UpdateGasketDataRequest) (*Response, error)
	DeleteGasketData(context.Context, *DeleteGasketDataRequest) (*Response, error)
}

func RegisterGasketServiceServer(s *grpc.Server, srv GasketServiceServer) {
	s.RegisterService(&_GasketService_serviceDesc, srv)
}

func _GasketService_GetGasket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGasketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).GetGasket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_proto.GasketService/GetGasket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).GetGasket(ctx, req.(*GetGasketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_CreateGasket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGasketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).CreateGasket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_proto.GasketService/CreateGasket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).CreateGasket(ctx, req.(*CreateGasketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_UpdateGasket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGasketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).UpdateGasket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_proto.GasketService/UpdateGasket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).UpdateGasket(ctx, req.(*UpdateGasketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_DeleteGasket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGasketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).DeleteGasket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_proto.GasketService/DeleteGasket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).DeleteGasket(ctx, req.(*DeleteGasketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_GetGasketType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGasketTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).GetGasketType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_proto.GasketService/GetGasketType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).GetGasketType(ctx, req.(*GetGasketTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_CreateGasketType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGasketTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).CreateGasketType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_proto.GasketService/CreateGasketType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).CreateGasketType(ctx, req.(*CreateGasketTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_UpdateGasketType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGasketTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).UpdateGasketType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_proto.GasketService/UpdateGasketType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).UpdateGasketType(ctx, req.(*UpdateGasketTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_DeleteGasketType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGasketTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).DeleteGasketType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_proto.GasketService/DeleteGasketType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).DeleteGasketType(ctx, req.(*DeleteGasketTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_GetEnv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEnvRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).GetEnv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_proto.GasketService/GetEnv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).GetEnv(ctx, req.(*GetEnvRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_CreateEnv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEnvRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).CreateEnv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_proto.GasketService/CreateEnv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).CreateEnv(ctx, req.(*CreateEnvRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_UpdateEnv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEnvRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).UpdateEnv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_proto.GasketService/UpdateEnv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).UpdateEnv(ctx, req.(*UpdateEnvRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_DeleteEnv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEnvRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).DeleteEnv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_proto.GasketService/DeleteEnv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).DeleteEnv(ctx, req.(*DeleteEnvRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_CreateEnvData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEnvDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).CreateEnvData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_proto.GasketService/CreateEnvData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).CreateEnvData(ctx, req.(*CreateEnvDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_UpdateEnvData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEnvDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).UpdateEnvData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_proto.GasketService/UpdateEnvData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).UpdateEnvData(ctx, req.(*UpdateEnvDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_DeleteEnvData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEnvDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).DeleteEnvData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_proto.GasketService/DeleteEnvData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).DeleteEnvData(ctx, req.(*DeleteEnvDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_CreateGasketData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGasketDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).CreateGasketData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_proto.GasketService/CreateGasketData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).CreateGasketData(ctx, req.(*CreateGasketDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_UpdateGasketData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGasketDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).UpdateGasketData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_proto.GasketService/UpdateGasketData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).UpdateGasketData(ctx, req.(*UpdateGasketDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasketService_DeleteGasketData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGasketDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasketServiceServer).DeleteGasketData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_proto.GasketService/DeleteGasketData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasketServiceServer).DeleteGasketData(ctx, req.(*DeleteGasketDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GasketService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "moment_proto.GasketService",
	HandlerType: (*GasketServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGasket",
			Handler:    _GasketService_GetGasket_Handler,
		},
		{
			MethodName: "CreateGasket",
			Handler:    _GasketService_CreateGasket_Handler,
		},
		{
			MethodName: "UpdateGasket",
			Handler:    _GasketService_UpdateGasket_Handler,
		},
		{
			MethodName: "DeleteGasket",
			Handler:    _GasketService_DeleteGasket_Handler,
		},
		{
			MethodName: "GetGasketType",
			Handler:    _GasketService_GetGasketType_Handler,
		},
		{
			MethodName: "CreateGasketType",
			Handler:    _GasketService_CreateGasketType_Handler,
		},
		{
			MethodName: "UpdateGasketType",
			Handler:    _GasketService_UpdateGasketType_Handler,
		},
		{
			MethodName: "DeleteGasketType",
			Handler:    _GasketService_DeleteGasketType_Handler,
		},
		{
			MethodName: "GetEnv",
			Handler:    _GasketService_GetEnv_Handler,
		},
		{
			MethodName: "CreateEnv",
			Handler:    _GasketService_CreateEnv_Handler,
		},
		{
			MethodName: "UpdateEnv",
			Handler:    _GasketService_UpdateEnv_Handler,
		},
		{
			MethodName: "DeleteEnv",
			Handler:    _GasketService_DeleteEnv_Handler,
		},
		{
			MethodName: "CreateEnvData",
			Handler:    _GasketService_CreateEnvData_Handler,
		},
		{
			MethodName: "UpdateEnvData",
			Handler:    _GasketService_UpdateEnvData_Handler,
		},
		{
			MethodName: "DeleteEnvData",
			Handler:    _GasketService_DeleteEnvData_Handler,
		},
		{
			MethodName: "CreateGasketData",
			Handler:    _GasketService_CreateGasketData_Handler,
		},
		{
			MethodName: "UpdateGasketData",
			Handler:    _GasketService_UpdateGasketData_Handler,
		},
		{
			MethodName: "DeleteGasketData",
			Handler:    _GasketService_DeleteGasketData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/moment.proto",
}

// Client API for FlangeService service

type FlangeServiceClient interface {
	CalculateFlange(ctx context.Context, in *FlangeRequest, opts ...grpc.CallOption) (*FlangeResponse, error)
}

type flangeServiceClient struct {
	cc *grpc.ClientConn
}

func NewFlangeServiceClient(cc *grpc.ClientConn) FlangeServiceClient {
	return &flangeServiceClient{cc}
}

func (c *flangeServiceClient) CalculateFlange(ctx context.Context, in *FlangeRequest, opts ...grpc.CallOption) (*FlangeResponse, error) {
	out := new(FlangeResponse)
	err := grpc.Invoke(ctx, "/moment_proto.FlangeService/CalculateFlange", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FlangeService service

type FlangeServiceServer interface {
	CalculateFlange(context.Context, *FlangeRequest) (*FlangeResponse, error)
}

func RegisterFlangeServiceServer(s *grpc.Server, srv FlangeServiceServer) {
	s.RegisterService(&_FlangeService_serviceDesc, srv)
}

func _FlangeService_CalculateFlange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlangeServiceServer).CalculateFlange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment_proto.FlangeService/CalculateFlange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlangeServiceServer).CalculateFlange(ctx, req.(*FlangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FlangeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "moment_proto.FlangeService",
	HandlerType: (*FlangeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CalculateFlange",
			Handler:    _FlangeService_CalculateFlange_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/moment.proto",
}

func init() { proto.RegisterFile("proto/moment.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 3467 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x5a, 0x5f, 0x73, 0xdb, 0xc6,
	0x11, 0x37, 0x40, 0x52, 0x22, 0x97, 0x14, 0x45, 0x9d, 0x24, 0x1b, 0xa6, 0x1d, 0x47, 0x81, 0x63,
	0xc7, 0x69, 0x1c, 0x59, 0xa4, 0x1d, 0xc7, 0x69, 0x9a, 0xba, 0xfe, 0x3f, 0x1a, 0x87, 0x8e, 0x04,
	0x3b, 0xc9, 0x4c, 0x67, 0x1a, 0x0f, 0x48, 0x80, 0x12, 0x86, 0x04, 0x09, 0x11, 0x90, 0x62, 0xe5,
	0xb1, 0xcd, 0x53, 0xfb, 0xd2, 0xbe, 0xf7, 0xa9, 0xdf, 0x21, 0xaf, 0xfd, 0x0e, 0x7d, 0xed, 0x4c,
	0x3b, 0xd3, 0xc7, 0x7e, 0x82, 0xbe, 0x76, 0xee, 0x6e, 0xef, 0x70, 0x00, 0x01, 0x88, 0xe9, 0xa4,
	0x4f, 0xc4, 0xee, 0xed, 0x2d, 0x76, 0xf7, 0xf6, 0xb7, 0x77, 0x38, 0x2e, 0x90, 0x60, 0x36, 0x8d,
	0xa6, 0xb7, 0xfc, 0xa9, 0xef, 0x4e, 0xa2, 0x6d, 0x46, 0x90, 0x06, 0xa7, 0x5e, 0x33, 0xca, 0x5c,
	0x81, 0xfa, 0x9e, 0x37, 0x39, 0xb0, 0xdc, 0xa3, 0x63, 0x37, 0x8c, 0x4c, 0x13, 0x1a, 0x9c, 0x0c,
	0x83, 0xe9, 0x24, 0x74, 0x09, 0x81, 0x72, 0xe0, 0x4d, 0x0e, 0x0c, 0x6d, 0x4b, 0xbb, 0x51, 0xb3,
	0xd8, 0xb3, 0x79, 0x19, 0x60, 0xd7, 0x91, 0x12, 0x4d, 0xd0, 0x3d, 0x07, 0xc7, 0x75, 0xcf, 0x31,
	0x01, 0xaa, 0x62, 0xcc, 0xdc, 0x81, 0x6a, 0xcf, 0x8e, 0xdc, 0x99, 0x67, 0x8f, 0xd3, 0x72, 0x64,
	0x03, 0x2a, 0x91, 0x17, 0x8d, 0x5d, 0x43, 0x67, 0x2c, 0x4e, 0x98, 0x3f, 0x68, 0xb0, 0x2e, 0xa6,
	0x7c, 0xed, 0x45, 0x87, 0xbb, 0xe1, 0x13, 0x3f, 0x88, 0x4e, 0x17, 0x9b, 0x4d, 0x4c, 0x68, 0xe0,
	0x84, 0x07, 0xe3, 0xe0, 0xd0, 0x36, 0x4a, 0x5b, 0xda, 0x8d, 0xaa, 0xd5, 0xf0, 0x14, 0x1e, 0xb9,
	0x09, 0x6b, 0x28, 0xf3, 0x64, 0x6c, 0x87, 0x91, 0x37, 0xf0, 0xa2, 0x53, 0xa3, 0xcc, 0x04, 0xd7,
	0xbc, 0xf4, 0x00, 0xb9, 0x0e, 0x4d, 0x94, 0xfe, 0x6a, 0x3a, 0x8e, 0xec, 0x03, 0xd7, 0xa8, 0x30,
	0xd1, 0xa6, 0x97, 0xe0, 0x9a, 0x9b, 0xb0, 0xfe, 0xcc, 0x8d, 0x84, 0xe5, 0xa1, 0x08, 0xe7, 0x87,
	0xb0, 0xf9, 0x68, 0xe6, 0xda, 0x91, 0x2b, 0x46, 0x70, 0x20, 0xb6, 0x5f, 0x53, 0xbd, 0xff, 0x0c,
	0x36, 0xbf, 0x0c, 0x9c, 0x0c, 0xf1, 0xc5, 0x82, 0xf7, 0x1e, 0x6c, 0x3e, 0x76, 0xc7, 0xee, 0x99,
	0xd3, 0xcd, 0x5d, 0x58, 0x53, 0x4c, 0xc5, 0x85, 0xbc, 0x03, 0x35, 0x5f, 0x30, 0x0d, 0x6d, 0xab,
	0x74, 0xa3, 0xde, 0x3d, 0xbf, 0xad, 0xe6, 0xca, 0xb6, 0x54, 0x1b, 0x0b, 0x9a, 0xaf, 0xe1, 0xb2,
	0x54, 0xa5, 0x2c, 0x98, 0xd4, 0x7a, 0x7f, 0x5e, 0xeb, 0x3b, 0xd9, 0x5a, 0xd5, 0xd9, 0xca, 0x0b,
	0x3a, 0x70, 0x41, 0x8d, 0xec, 0x63, 0x3b, 0xb2, 0x85, 0x5b, 0xe7, 0x61, 0xc9, 0xb7, 0x67, 0xa3,
	0x5d, 0xe1, 0x1a, 0x52, 0xe6, 0x7f, 0x4a, 0xb0, 0x99, 0x9a, 0x80, 0xd6, 0x3c, 0x81, 0xe5, 0x13,
	0x5c, 0x47, 0x6e, 0xcb, 0x07, 0xd9, 0xb6, 0x24, 0x66, 0x6d, 0xe3, 0x22, 0x5b, 0x62, 0x2e, 0x79,
	0x01, 0xe0, 0xc6, 0xc9, 0xa3, 0x33, 0x4d, 0xdb, 0x8b, 0x68, 0x8a, 0x33, 0xcb, 0x52, 0x34, 0x90,
	0xfb, 0x50, 0xb1, 0x31, 0x61, 0xa9, 0xaa, 0xf7, 0x17, 0x51, 0xc5, 0xb2, 0xd9, 0xe2, 0xf3, 0xda,
	0x5f, 0xc2, 0x32, 0x1a, 0x39, 0x97, 0x2a, 0x5b, 0x50, 0x8f, 0x5c, 0x3f, 0x70, 0x67, 0x76, 0x74,
	0x3c, 0xe3, 0x09, 0xa3, 0x59, 0x2a, 0x8b, 0x18, 0x71, 0x50, 0x4a, 0x6c, 0x54, 0x90, 0xed, 0x6f,
	0x00, 0x14, 0x2c, 0xfc, 0x78, 0xcd, 0x57, 0x12, 0x71, 0xe2, 0xca, 0x15, 0x4e, 0xfb, 0x0b, 0xa8,
	0x70, 0x50, 0xfe, 0x78, 0xd5, 0x1b, 0x71, 0xc8, 0xe8, 0x18, 0x27, 0xcc, 0x27, 0x71, 0x1c, 0x52,
	0x2a, 0xb4, 0x42, 0xbf, 0xf5, 0x84, 0xdf, 0xe6, 0x6b, 0xd8, 0xe0, 0xb0, 0x15, 0x2b, 0x5f, 0x9c,
	0x70, 0xe4, 0x96, 0xaa, 0x89, 0xae, 0xe0, 0x66, 0x72, 0x05, 0xd3, 0x09, 0x64, 0x7e, 0x07, 0x1b,
	0x1c, 0xe8, 0xa9, 0x17, 0xa4, 0xe3, 0x10, 0xbf, 0x50, 0x4f, 0xbc, 0x30, 0xe5, 0x5c, 0xa9, 0xd0,
	0xb9, 0x72, 0xd2, 0xb9, 0xeb, 0xb0, 0xc1, 0xab, 0x44, 0xf1, 0xbb, 0xcd, 0x17, 0x89, 0xc5, 0x3f,
	0x3b, 0x9c, 0x57, 0x52, 0xa0, 0x48, 0x2d, 0xb6, 0x39, 0x82, 0x0b, 0x3c, 0xa8, 0x0a, 0x08, 0xce,
	0x88, 0xeb, 0xbd, 0x0c, 0x9c, 0x19, 0xc9, 0xd0, 0x66, 0x23, 0xca, 0xfc, 0x9d, 0x06, 0x17, 0x78,
	0x84, 0xe7, 0xdf, 0xf6, 0xd3, 0x05, 0x39, 0xe9, 0x72, 0x79, 0xce, 0xe5, 0xf7, 0xe1, 0x02, 0x0f,
	0xf5, 0x99, 0x46, 0x98, 0xf7, 0x05, 0x14, 0xce, 0x0e, 0xb4, 0x4c, 0x7d, 0x5d, 0x4d, 0xfd, 0xaf,
	0x81, 0xf0, 0xf0, 0xf2, 0xc2, 0x70, 0x46, 0x64, 0xdf, 0x8f, 0x75, 0xd0, 0xa0, 0xae, 0x27, 0x83,
	0xaa, 0xd6, 0x16, 0x33, 0x02, 0xc2, 0x23, 0x99, 0x50, 0xfc, 0xd3, 0x05, 0x51, 0xba, 0x53, 0x56,
	0xdd, 0x79, 0x17, 0x08, 0x0f, 0x5d, 0xd1, 0x5b, 0xcd, 0x6d, 0x58, 0x7a, 0x66, 0x87, 0x23, 0x77,
	0xd1, 0x1d, 0x92, 0x40, 0xeb, 0x99, 0x1b, 0xf1, 0x29, 0x62, 0x8f, 0xfe, 0x00, 0xd6, 0x79, 0xe0,
	0x12, 0xec, 0x9c, 0x1d, 0xfa, 0x53, 0x58, 0xe7, 0xc1, 0x48, 0x0a, 0x2f, 0xf6, 0xf6, 0x6b, 0xb0,
	0xce, 0x7d, 0x2a, 0x9c, 0x6c, 0xfe, 0x12, 0x9a, 0x42, 0x00, 0xb7, 0xad, 0x9b, 0xb0, 0x74, 0xc0,
	0x38, 0xb8, 0x6b, 0x6d, 0x24, 0x97, 0x0b, 0xa5, 0x51, 0xc6, 0xec, 0x02, 0x70, 0xce, 0xab, 0xd3,
	0xc0, 0x5d, 0xd0, 0xb4, 0xf3, 0xb0, 0x21, 0x03, 0x43, 0xa7, 0x89, 0xe0, 0xdc, 0x12, 0xa0, 0x9d,
	0x1b, 0xca, 0x09, 0xd0, 0x7d, 0x81, 0xbb, 0xf9, 0x09, 0x8b, 0x59, 0x22, 0x31, 0x73, 0xa6, 0x02,
	0xf3, 0x05, 0x10, 0x55, 0x08, 0x83, 0x75, 0x0f, 0xe0, 0x40, 0x72, 0x31, 0x60, 0x46, 0x56, 0xc0,
	0xd8, 0x2c, 0x45, 0xd6, 0xfc, 0x00, 0x4a, 0x4f, 0x26, 0x27, 0x0b, 0xda, 0xb9, 0x0a, 0x2b, 0xcf,
	0xdc, 0xe8, 0xc9, 0xe4, 0x44, 0x84, 0xea, 0x06, 0xb4, 0xb0, 0xbe, 0x49, 0x5e, 0x4e, 0x8c, 0xee,
	0x41, 0x0b, 0x6b, 0x53, 0x2c, 0xb9, 0xd8, 0x4b, 0x4d, 0x68, 0x61, 0x41, 0xc9, 0x9d, 0x69, 0x76,
	0xa1, 0xce, 0x46, 0x31, 0x1c, 0x57, 0xa1, 0xe4, 0x4e, 0x4e, 0x30, 0x0e, 0x6b, 0xa9, 0xe2, 0x39,
	0x39, 0xb1, 0xe8, 0x28, 0xdd, 0x8f, 0xa4, 0xed, 0xea, 0x09, 0x6b, 0x03, 0x2a, 0xee, 0xe4, 0x44,
	0x56, 0x0f, 0x4e, 0x90, 0x36, 0x54, 0x79, 0xd4, 0x24, 0xda, 0x25, 0x4d, 0x1a, 0xa0, 0xf9, 0x88,
	0x72, 0xcd, 0xa7, 0x07, 0xf2, 0x30, 0x70, 0x07, 0xde, 0xd0, 0x1b, 0xec, 0xcd, 0xdc, 0x10, 0x21,
	0x9e, 0xe0, 0x99, 0xbf, 0xd7, 0xc4, 0x66, 0x98, 0x7a, 0x79, 0x46, 0x48, 0xb8, 0x31, 0x7a, 0x9e,
	0x31, 0xa5, 0x2c, 0x63, 0xca, 0x79, 0xc6, 0x54, 0x32, 0x8c, 0x91, 0x9b, 0x63, 0xb1, 0x2d, 0xe6,
	0xdf, 0xb4, 0x24, 0x30, 0x54, 0x59, 0xd5, 0x22, 0x2d, 0x65, 0xd1, 0x0d, 0x58, 0x0d, 0xdc, 0x99,
	0xef, 0x85, 0xa1, 0xd7, 0x1f, 0xbb, 0xcc, 0x0c, 0x5e, 0xc5, 0xd3, 0x6c, 0x5a, 0x38, 0x07, 0x53,
	0x3f, 0x98, 0xb9, 0x61, 0xe8, 0x4d, 0x27, 0xa2, 0x70, 0x2a, 0x2c, 0xba, 0xc5, 0xbb, 0x41, 0xe8,
	0x8d, 0xa7, 0x13, 0xb1, 0xc5, 0x23, 0x49, 0x2e, 0x43, 0x2d, 0x3a, 0xf4, 0x06, 0xa3, 0x89, 0x1b,
	0x0a, 0x37, 0x63, 0x06, 0x2d, 0xd5, 0xd1, 0x69, 0xe0, 0xee, 0x3a, 0xc6, 0x12, 0x2f, 0xd5, 0x9c,
	0x32, 0xff, 0xa5, 0x25, 0xb1, 0x5b, 0xb4, 0x16, 0x45, 0x29, 0x90, 0xe1, 0x63, 0x69, 0x21, 0x1f,
	0xcb, 0x85, 0x3e, 0x56, 0x0a, 0x7c, 0x5c, 0xca, 0xf7, 0x71, 0x39, 0xe1, 0x63, 0xaa, 0xba, 0x14,
	0x2d, 0xf1, 0x3f, 0x34, 0x80, 0xa7, 0x63, 0x7b, 0x72, 0xe0, 0x52, 0x29, 0xd2, 0x81, 0x72, 0xc4,
	0x0b, 0x8a, 0x76, 0xa3, 0xd9, 0x7d, 0x2b, 0x09, 0xa4, 0x58, 0x6e, 0x9b, 0x55, 0x15, 0x26, 0x4a,
	0x8f, 0x07, 0x61, 0x64, 0x4f, 0x1c, 0x7b, 0x16, 0x87, 0x49, 0xe1, 0x28, 0x7b, 0x66, 0x29, 0xb1,
	0x67, 0x36, 0x41, 0x77, 0xf8, 0x71, 0xa2, 0x62, 0xe9, 0x0e, 0x3b, 0x78, 0x07, 0xa7, 0xe8, 0xbf,
	0x1e, 0x9c, 0x52, 0xd7, 0x07, 0xd3, 0xd9, 0x6c, 0xca, 0x82, 0x86, 0xae, 0x4b, 0x86, 0x79, 0x1d,
	0xca, 0xac, 0xf0, 0x03, 0x2c, 0x7d, 0xeb, 0x8e, 0x1d, 0xd7, 0x69, 0x9d, 0x23, 0x55, 0x28, 0x0f,
	0xc7, 0x76, 0xd4, 0xd2, 0xd8, 0xd3, 0xcc, 0x75, 0x5b, 0xba, 0x69, 0x42, 0xf5, 0xe1, 0x74, 0xcc,
	0x42, 0x90, 0xfb, 0x25, 0xf5, 0xbd, 0x26, 0xf6, 0x12, 0x26, 0x56, 0x94, 0xd9, 0xd9, 0xe8, 0x4c,
	0xac, 0x52, 0x29, 0xbd, 0x4a, 0xeb, 0x50, 0x71, 0x5e, 0x4f, 0x8f, 0x23, 0x5c, 0xf9, 0xb2, 0xf3,
	0xc5, 0x71, 0x44, 0xd6, 0xa0, 0xec, 0xbc, 0xf6, 0xc4, 0x7a, 0x97, 0x9c, 0xdd, 0x89, 0xf9, 0x00,
	0x6a, 0x4f, 0xfc, 0xbe, 0xeb, 0x14, 0xd9, 0x9a, 0x7c, 0x95, 0x9e, 0x7a, 0x95, 0xf9, 0xe7, 0x65,
	0x58, 0xe1, 0xab, 0xa4, 0xc0, 0x94, 0xa5, 0x59, 0x7c, 0xca, 0x92, 0x34, 0x5d, 0x39, 0xfb, 0x8d,
	0x67, 0x8f, 0x9f, 0x4e, 0x67, 0x03, 0x5e, 0x82, 0x2b, 0x96, 0xc2, 0x21, 0xef, 0xc2, 0x4a, 0xdf,
	0x9d, 0x38, 0xde, 0xe4, 0xa0, 0xc7, 0xd2, 0x80, 0xb9, 0x56, 0xb1, 0x92, 0x4c, 0x42, 0xa0, 0x4c,
	0x0f, 0x3a, 0xc2, 0x3b, 0xfa, 0x4c, 0xad, 0xf7, 0xc2, 0xaf, 0xa7, 0xb3, 0x11, 0x5e, 0x24, 0x20,
	0x45, 0x3e, 0x83, 0xe5, 0x21, 0x33, 0x8f, 0x27, 0x73, 0xb3, 0x7b, 0x35, 0x2b, 0xc3, 0xd0, 0x76,
	0xa4, 0x42, 0x4b, 0xcc, 0xa1, 0xb5, 0xcd, 0x0b, 0x5f, 0xda, 0xbe, 0xcb, 0x47, 0x58, 0xd6, 0xb3,
	0x9b, 0x8f, 0x98, 0x47, 0x9d, 0xf2, 0x42, 0x16, 0x47, 0xc7, 0x75, 0x8c, 0x2a, 0x93, 0x50, 0x38,
	0xe4, 0x0e, 0x66, 0x78, 0x8d, 0xbd, 0x7f, 0xab, 0xe8, 0xfd, 0x4a, 0x92, 0x3f, 0xa2, 0xc9, 0x38,
	0x71, 0xbc, 0x88, 0x26, 0x23, 0xb0, 0xa9, 0xd7, 0x8a, 0xa6, 0x3e, 0x12, 0xc2, 0x56, 0x3c, 0x8f,
	0xec, 0x42, 0x7d, 0x60, 0x8f, 0x07, 0xc7, 0x63, 0x9b, 0xa9, 0xa9, 0x33, 0x35, 0xef, 0x15, 0xaa,
	0xa1, 0xe2, 0x11, 0x13, 0xb7, 0xd4, 0xb9, 0xe4, 0xe7, 0x50, 0xc7, 0xa0, 0xd0, 0x6c, 0x31, 0x1a,
	0x59, 0xfb, 0x7f, 0x0c, 0x57, 0x4b, 0x15, 0x26, 0x37, 0xa1, 0xd2, 0x9f, 0x8e, 0xa3, 0xd0, 0x58,
	0xd9, 0xd2, 0xe6, 0xaf, 0x3f, 0x04, 0x5a, 0x2c, 0x2e, 0x44, 0x76, 0xe4, 0xa9, 0xac, 0xc9, 0xc4,
	0x33, 0x0f, 0x19, 0x6c, 0x02, 0xca, 0x91, 0x0f, 0xa1, 0xe2, 0xd2, 0x68, 0x1b, 0xab, 0x6c, 0xc2,
	0x85, 0xd4, 0x6e, 0x2c, 0x52, 0xdc, 0xe2, 0x52, 0xe4, 0x3a, 0x34, 0xbd, 0xf0, 0x85, 0xeb, 0x3a,
	0x4f, 0xa7, 0x33, 0xff, 0x78, 0x6c, 0x87, 0x46, 0x4b, 0x5c, 0x3e, 0xa9, 0x5c, 0xf3, 0x2e, 0x2c,
	0x63, 0x42, 0x90, 0x06, 0x54, 0xbd, 0x70, 0x3a, 0xb6, 0x23, 0x06, 0xfb, 0x55, 0xa8, 0x4f, 0xa6,
	0x93, 0x5d, 0xc1, 0xd0, 0xe8, 0xb0, 0x6f, 0x4f, 0x8e, 0xed, 0xf1, 0xf8, 0xb4, 0xa5, 0x9b, 0x17,
	0xb1, 0x52, 0x54, 0xa1, 0x4c, 0x3d, 0x6a, 0x9d, 0x23, 0xcb, 0x50, 0x0a, 0xbc, 0x49, 0x4b, 0x33,
	0x9f, 0x42, 0x4d, 0x2e, 0x14, 0x21, 0xd0, 0x3c, 0x9e, 0x0c, 0xa6, 0x93, 0x68, 0x36, 0x1d, 0x8f,
	0xed, 0xfe, 0xd8, 0x6d, 0x9d, 0x23, 0x2d, 0x68, 0x24, 0x38, 0x1a, 0x59, 0x87, 0x55, 0x95, 0xb3,
	0xe7, 0x4d, 0x5a, 0xba, 0x79, 0x1d, 0xea, 0xca, 0x4a, 0x91, 0x1a, 0x54, 0xfa, 0x76, 0xe8, 0x85,
	0xad, 0x73, 0xd4, 0x94, 0x30, 0x9a, 0xb9, 0x93, 0x83, 0xe8, 0xb0, 0xa5, 0x99, 0x7f, 0xac, 0x40,
	0x43, 0x2c, 0x70, 0x78, 0x3c, 0x66, 0xd8, 0xa1, 0xd5, 0x00, 0x91, 0xc9, 0x2b, 0x43, 0x03, 0x34,
	0x07, 0x91, 0xad, 0xf1, 0x2a, 0x39, 0xc2, 0x9a, 0xa2, 0x3b, 0x23, 0xd2, 0x82, 0x92, 0x33, 0x19,
	0x21, 0xd8, 0xe8, 0x23, 0x93, 0x10, 0xfb, 0x9f, 0xee, 0xd0, 0xe0, 0x68, 0x87, 0x58, 0x2f, 0xb5,
	0x43, 0x3a, 0x7a, 0x38, 0x62, 0x40, 0xd1, 0x2c, 0xfd, 0x90, 0x49, 0x87, 0x3b, 0x0c, 0x16, 0x9a,
	0xa5, 0x87, 0x3b, 0x8c, 0xee, 0x30, 0x30, 0x50, 0xba, 0x43, 0x67, 0x8f, 0x59, 0x82, 0x6b, 0x96,
	0xc6, 0xae, 0x33, 0x9d, 0xbb, 0x2c, 0x51, 0xa9, 0xee, 0xbb, 0x74, 0x74, 0x60, 0x34, 0xf8, 0xe8,
	0x80, 0x8e, 0x46, 0x43, 0x96, 0x45, 0x9a, 0xa5, 0x47, 0x43, 0x46, 0x8f, 0x58, 0x9a, 0x50, 0x7a,
	0x44, 0xab, 0x00, 0xfb, 0xcc, 0x79, 0xce, 0x32, 0x41, 0xb3, 0x90, 0xa2, 0x30, 0xc6, 0xfd, 0xed,
	0xf9, 0x83, 0xa8, 0xbb, 0xc3, 0xd6, 0x5b, 0xb3, 0x12, 0x3c, 0x5a, 0xb7, 0x04, 0x6d, 0xac, 0xf1,
	0xba, 0x25, 0x68, 0xb6, 0xe3, 0x78, 0x07, 0xbe, 0xcd, 0x67, 0x13, 0xfe, 0x41, 0x1a, 0x73, 0xe8,
	0x7b, 0x39, 0x65, 0xac, 0xf3, 0xf7, 0x72, 0x4a, 0xda, 0xf3, 0xd4, 0xd8, 0x50, 0xec, 0x79, 0x4a,
	0x37, 0x68, 0xd4, 0xcd, 0x14, 0x6e, 0xf2, 0x0d, 0x5a, 0x61, 0xa9, 0x1b, 0xf4, 0xf9, 0xb9, 0x0d,
	0x9a, 0x69, 0x67, 0x33, 0x2f, 0xf0, 0x7a, 0x2c, 0x19, 0x74, 0xbb, 0x60, 0x84, 0x61, 0xf0, 0xaf,
	0x3e, 0x46, 0x48, 0xfb, 0x7a, 0xc6, 0x45, 0xc5, 0xbe, 0x9e, 0xf4, 0xab, 0xc7, 0x94, 0xb5, 0x15,
	0xbf, 0x7a, 0x09, 0xbf, 0x2c, 0xe3, 0x92, 0x32, 0xcf, 0x92, 0xf3, 0x2c, 0x36, 0xef, 0xb2, 0x32,
	0xcf, 0x12, 0xb1, 0x14, 0x37, 0x8d, 0xc6, 0x5b, 0x7c, 0x43, 0x13, 0xb4, 0xf9, 0xbd, 0x0e, 0x40,
	0x21, 0x8f, 0x09, 0xd9, 0x86, 0xaa, 0xe3, 0xd9, 0xbe, 0x1b, 0xb9, 0x33, 0x96, 0x94, 0x15, 0x4b,
	0xd2, 0x34, 0x59, 0xed, 0x99, 0x2b, 0x3e, 0xc8, 0xd9, 0x33, 0x75, 0x70, 0x30, 0x3d, 0x96, 0x5b,
	0x03, 0x27, 0xa8, 0xa1, 0x63, 0x77, 0x72, 0x70, 0x28, 0xb6, 0x3c, 0xa4, 0xe4, 0x56, 0x51, 0x51,
	0xb6, 0x0a, 0xf9, 0x61, 0xbc, 0xa4, 0x7c, 0x18, 0xa7, 0x97, 0x64, 0xb9, 0x70, 0x49, 0xaa, 0x05,
	0x4b, 0x52, 0xcb, 0x5d, 0x12, 0x50, 0x96, 0xc4, 0xfc, 0x93, 0x0e, 0x0d, 0xf9, 0x39, 0x8a, 0x81,
	0xf8, 0xff, 0x1f, 0x02, 0x36, 0xa0, 0xf2, 0xad, 0xe7, 0x44, 0x87, 0x18, 0x10, 0x4e, 0xf0, 0xf3,
	0xfc, 0x92, 0x38, 0xcf, 0x13, 0x28, 0xd3, 0x0d, 0x1b, 0x43, 0xc0, 0x9e, 0xd3, 0x27, 0xca, 0x6a,
	0xe1, 0x89, 0xb2, 0x96, 0x8c, 0x4e, 0xc6, 0xb9, 0x15, 0x32, 0xcf, 0xad, 0xa6, 0x0f, 0x75, 0x56,
	0xac, 0x31, 0x22, 0xff, 0xd3, 0x89, 0x04, 0x97, 0x77, 0xa8, 0xde, 0x60, 0x0e, 0xed, 0xac, 0x33,
	0x83, 0xf9, 0xcf, 0x25, 0x68, 0xbe, 0xc4, 0x5a, 0x89, 0xaf, 0x6c, 0x41, 0xa9, 0x37, 0x0a, 0xb0,
	0x3a, 0x96, 0xfc, 0x51, 0x40, 0x27, 0xf6, 0x46, 0x41, 0x47, 0xe4, 0xa0, 0x3f, 0x0a, 0x3a, 0xb4,
	0xec, 0x3c, 0x1a, 0x8a, 0x12, 0x39, 0x18, 0xd2, 0x59, 0x8f, 0xbf, 0x3b, 0x91, 0x25, 0xf2, 0x3b,
	0xf6, 0xad, 0xdb, 0xeb, 0x89, 0x12, 0xe9, 0xf7, 0x98, 0xde, 0xde, 0x08, 0x63, 0x5c, 0xf2, 0x7b,
	0xac, 0xac, 0xf6, 0x02, 0x51, 0x27, 0x4b, 0x7e, 0xc0, 0x0a, 0x65, 0x2f, 0x10, 0x85, 0xd2, 0x0f,
	0x68, 0x44, 0x39, 0x14, 0x45, 0xb5, 0x14, 0x64, 0x3c, 0xb2, 0x83, 0x91, 0x14, 0xa4, 0x04, 0xec,
	0x2b, 0x2c, 0xa1, 0x48, 0x29, 0x40, 0x6e, 0x24, 0x80, 0x2c, 0x34, 0xbd, 0x0a, 0xb0, 0xaa, 0x0a,
	0x52, 0x8e, 0x58, 0x01, 0xd6, 0x57, 0x41, 0x2a, 0xc5, 0x6e, 0x35, 0x51, 0xec, 0xc4, 0x8c, 0xbd,
	0x0e, 0xd6, 0x57, 0x41, 0xc6, 0x23, 0x3b, 0x58, 0x59, 0x05, 0x19, 0x7b, 0x12, 0x60, 0x55, 0x15,
	0x24, 0x85, 0x03, 0x3e, 0xfa, 0x58, 0x54, 0x25, 0xad, 0x8c, 0xed, 0x60, 0x61, 0x95, 0xb4, 0xc4,
	0x62, 0x2f, 0xf0, 0x45, 0x61, 0x8d, 0x19, 0xf1, 0xcc, 0x69, 0x80, 0x75, 0x55, 0xd2, 0xd2, 0x96,
	0xe7, 0x01, 0x96, 0x55, 0x41, 0xf2, 0xe4, 0x89, 0x44, 0x4d, 0x65, 0xcf, 0x34, 0xcd, 0x9c, 0x57,
	0x94, 0xc9, 0x2b, 0x2a, 0x27, 0x68, 0x6c, 0xd8, 0xc3, 0x73, 0x2c, 0xa6, 0x48, 0xb1, 0x6b, 0x07,
	0xc6, 0xe6, 0x75, 0x94, 0x13, 0x2c, 0xb7, 0xec, 0x37, 0x1d, 0x2c, 0xa0, 0x65, 0xdf, 0x7e, 0xd3,
	0x41, 0x5e, 0x97, 0x95, 0x4d, 0xce, 0xeb, 0x22, 0xef, 0xb6, 0x71, 0x45, 0xf2, 0x6e, 0x23, 0xef,
	0x8e, 0xf1, 0xb6, 0xe4, 0xdd, 0x41, 0xde, 0x47, 0xc6, 0x96, 0xe4, 0x7d, 0x84, 0xbc, 0xbb, 0xc6,
	0x3b, 0x92, 0x77, 0x17, 0x79, 0x1f, 0x1b, 0xa6, 0xe4, 0x7d, 0x8c, 0xbc, 0x7b, 0xc6, 0x55, 0xc9,
	0xbb, 0x87, 0xbc, 0x4f, 0x8c, 0x77, 0x25, 0xef, 0x13, 0xea, 0x09, 0xb5, 0x79, 0xc7, 0xb8, 0xc6,
	0x3d, 0xa1, 0x46, 0xef, 0x08, 0x6e, 0xc7, 0xb8, 0x1e, 0x73, 0x3b, 0xe6, 0x5f, 0x96, 0x80, 0xd0,
	0x63, 0x0a, 0x3f, 0xb7, 0x0b, 0xa8, 0xd1, 0xd4, 0x1f, 0xee, 0xf5, 0x05, 0xc8, 0x86, 0x7b, 0x7d,
	0xfa, 0xa2, 0xe1, 0x5e, 0x5f, 0x82, 0x8c, 0x3e, 0x23, 0xaf, 0x8b, 0x30, 0x63, 0xcf, 0xc8, 0x9b,
	0x09, 0x14, 0xd3, 0x67, 0xba, 0xa4, 0xc3, 0x97, 0x74, 0xa1, 0x1e, 0x76, 0x10, 0x70, 0x92, 0x56,
	0xc6, 0xba, 0x88, 0x3d, 0x49, 0xb3, 0xb1, 0xc7, 0x2f, 0xf9, 0xae, 0xb8, 0x8c, 0x63, 0x48, 0x2b,
	0x63, 0x16, 0x02, 0x52, 0xd2, 0x14, 0xa6, 0xc3, 0x7d, 0x71, 0x7e, 0x19, 0xee, 0x53, 0x6f, 0xc2,
	0xbd, 0x3e, 0x02, 0x91, 0x3e, 0x52, 0x2b, 0x43, 0xea, 0x0d, 0x87, 0x20, 0x7b, 0x46, 0x5e, 0x17,
	0xe1, 0xc7, 0x9e, 0x91, 0x37, 0x43, 0xe4, 0xb1, 0x67, 0x96, 0xa0, 0xc2, 0x9b, 0x26, 0x26, 0xa8,
	0xe2, 0x4d, 0x28, 0xbc, 0x59, 0x4d, 0x8c, 0x31, 0x6f, 0x42, 0xe1, 0x4d, 0x0b, 0xc7, 0x14, 0x6f,
	0x42, 0xe1, 0xcd, 0x5a, 0x62, 0x8c, 0x79, 0x13, 0xee, 0x23, 0xf6, 0xf4, 0x70, 0x9f, 0xd2, 0x47,
	0x7b, 0x08, 0x38, 0xfd, 0x68, 0x4f, 0x14, 0xc4, 0x8d, 0xf9, 0x82, 0xb8, 0xa9, 0x14, 0x44, 0xca,
	0x9b, 0xb9, 0x23, 0x84, 0x54, 0xd9, 0x9f, 0xb9, 0x23, 0xca, 0xdb, 0xa7, 0x3c, 0x8e, 0xa5, 0xf2,
	0x11, 0xf2, 0x7a, 0xbe, 0xfd, 0x46, 0x00, 0xc9, 0xf7, 0xed, 0x37, 0x4c, 0x8e, 0xf2, 0x2e, 0xa2,
	0x1c, 0xe5, 0xdd, 0x8b, 0x0f, 0xb1, 0x46, 0x9b, 0x7d, 0x69, 0x5c, 0x4e, 0x9e, 0xe9, 0x93, 0x65,
	0xdb, 0x92, 0xd2, 0xd4, 0xd7, 0x13, 0x11, 0xbf, 0x4b, 0xec, 0x54, 0x2f, 0x69, 0x65, 0xac, 0xcb,
	0x20, 0x17, 0x8f, 0x75, 0x69, 0x02, 0x9f, 0x30, 0x33, 0xde, 0x62, 0x03, 0x9c, 0xa0, 0x70, 0x3e,
	0xa1, 0x00, 0xee, 0x30, 0xe8, 0x55, 0x2d, 0xa4, 0xd8, 0xbf, 0x40, 0x0c, 0xd8, 0x1d, 0x86, 0xbf,
	0xaa, 0x25, 0x48, 0x39, 0xa3, 0xcb, 0x40, 0x28, 0x66, 0x74, 0xe3, 0x19, 0x5d, 0x86, 0x44, 0x39,
	0xa3, 0x6b, 0xfe, 0xa1, 0x04, 0xab, 0x31, 0x48, 0x1e, 0xd2, 0x63, 0x3c, 0x5d, 0x05, 0x09, 0x10,
	0x3d, 0xe8, 0xd3, 0x55, 0x88, 0xe1, 0x51, 0x0a, 0xfa, 0x1d, 0xce, 0x11, 0xe0, 0x28, 0x05, 0xfd,
	0x2e, 0xe7, 0x08, 0x68, 0x94, 0x82, 0xfe, 0x4c, 0x16, 0x34, 0x09, 0x0c, 0x41, 0xc6, 0x23, 0x02,
	0x16, 0x82, 0xa4, 0x23, 0x4e, 0x02, 0x14, 0x82, 0x8c, 0x47, 0x04, 0x24, 0x04, 0x49, 0x8f, 0x0f,
	0x47, 0x08, 0x08, 0xed, 0x08, 0x33, 0x08, 0xd2, 0x19, 0x54, 0x9f, 0xcf, 0xa0, 0x46, 0x46, 0x06,
	0xad, 0x64, 0x64, 0x50, 0x33, 0x23, 0x83, 0x56, 0x33, 0x32, 0xa8, 0xa5, 0x64, 0x50, 0x1b, 0xaa,
	0x5f, 0x89, 0x3c, 0x58, 0x9b, 0xcf, 0x83, 0xaf, 0x44, 0x1e, 0x90, 0x64, 0x1e, 0x98, 0x3f, 0xe8,
	0xd0, 0x7a, 0x84, 0x9f, 0xbd, 0xae, 0x83, 0x5f, 0xf8, 0x4d, 0xd0, 0xfb, 0x3b, 0x62, 0x39, 0xfa,
	0x3b, 0x6c, 0xbf, 0x0f, 0x03, 0xb1, 0x1c, 0x4e, 0x18, 0xb0, 0x05, 0x9b, 0x8a, 0x13, 0x41, 0x30,
	0xa5, 0xb4, 0x25, 0x0e, 0x1b, 0xfa, 0x2c, 0xa0, 0x21, 0x7a, 0x80, 0x8b, 0xa0, 0xb1, 0xbf, 0x65,
	0xf7, 0x1d, 0x8c, 0xbc, 0x7e, 0xe4, 0x50, 0x7d, 0xfb, 0x43, 0x5f, 0x9c, 0x05, 0x8e, 0x86, 0x3e,
	0x93, 0x88, 0xc4, 0x59, 0xe0, 0x28, 0x8a, 0xcf, 0xac, 0x35, 0xf5, 0xcc, 0x2a, 0x3e, 0x2f, 0x7a,
	0x18, 0x6e, 0xa4, 0xc8, 0x2f, 0x14, 0xf8, 0xd4, 0xd9, 0x27, 0x71, 0xea, 0xd6, 0x61, 0xbe, 0x28,
	0x2b, 0x10, 0xba, 0x8d, 0x1f, 0x93, 0x6c, 0x7d, 0xea, 0xe9, 0x2b, 0xb9, 0x54, 0xaa, 0x5a, 0x5c,
	0xd6, 0xfc, 0xab, 0x06, 0x0d, 0x3a, 0x24, 0x3e, 0x9e, 0x95, 0x98, 0xd5, 0x64, 0xcc, 0x06, 0x01,
	0x1e, 0x60, 0x4b, 0xce, 0x40, 0x8d, 0x59, 0x2d, 0x15, 0xb3, 0x5a, 0x32, 0x66, 0xb5, 0x64, 0xcc,
	0x6a, 0xe9, 0x98, 0xd5, 0xd2, 0x31, 0xab, 0xcd, 0xc7, 0xac, 0x96, 0x1d, 0xb3, 0x9a, 0x88, 0x99,
	0xf9, 0x6f, 0x1d, 0x9a, 0xf2, 0x4b, 0x99, 0x5f, 0xf1, 0xa7, 0x2f, 0x7f, 0xb4, 0x8c, 0xcb, 0x9f,
	0x3b, 0xf1, 0xfd, 0x12, 0xff, 0xcb, 0xaf, 0x9d, 0x7d, 0xbb, 0xc2, 0xca, 0x94, 0xbc, 0x56, 0xba,
	0xc9, 0x6f, 0x06, 0x98, 0xf3, 0x73, 0x17, 0x1c, 0xf1, 0xc7, 0x91, 0xc5, 0xa4, 0x48, 0x57, 0x5e,
	0x88, 0x94, 0x99, 0x7c, 0x3b, 0xf3, 0x6f, 0x2a, 0x3e, 0x43, 0x5c, 0x89, 0xdc, 0x12, 0x57, 0x22,
	0x15, 0x36, 0xe5, 0x62, 0xc6, 0x95, 0x08, 0xce, 0xc0, 0x4b, 0x91, 0x2e, 0x94, 0x07, 0xf6, 0x78,
	0xc0, 0x22, 0x5c, 0xef, 0x5e, 0x99, 0x5f, 0x74, 0x15, 0x11, 0x16, 0x93, 0x25, 0x77, 0xa1, 0x3a,
	0x14, 0x57, 0x28, 0xcb, 0x59, 0xa6, 0xa9, 0x19, 0x61, 0x49, 0xd9, 0xee, 0xe7, 0xbc, 0x39, 0xea,
	0xa5, 0x3b, 0x3b, 0xf1, 0x06, 0x2e, 0xf9, 0x0c, 0xca, 0x94, 0x24, 0x29, 0x23, 0x95, 0xfe, 0xa9,
	0x76, 0x3b, 0x6b, 0x88, 0x2f, 0x53, 0xf7, 0xef, 0x35, 0x68, 0xc9, 0x5e, 0x0e, 0xa1, 0xd3, 0x82,
	0x86, 0xda, 0xde, 0x42, 0x52, 0xcd, 0x31, 0x19, 0x4d, 0x45, 0xed, 0xb7, 0x73, 0xda, 0x43, 0x64,
	0x3e, 0x7c, 0xc3, 0xfe, 0xe5, 0x4c, 0xb4, 0x8d, 0x90, 0x6b, 0xf9, 0x7a, 0x95, 0x4b, 0xf0, 0xf6,
	0xd5, 0x05, 0x5a, 0x4f, 0xc8, 0x61, 0xb2, 0x25, 0x47, 0xed, 0xd3, 0x5a, 0xc0, 0xfc, 0x9f, 0xe5,
	0xbc, 0x22, 0xab, 0x7b, 0xe8, 0x0b, 0x68, 0x26, 0xfb, 0xa7, 0x48, 0xca, 0xc0, 0xcc, 0xee, 0xaa,
	0x76, 0x2a, 0x51, 0x95, 0x6e, 0xb5, 0x1e, 0x34, 0x93, 0x1d, 0x56, 0x69, 0x85, 0x99, 0xfd, 0x57,
	0xed, 0xd4, 0x4d, 0xa0, 0xaa, 0x2e, 0xd9, 0x71, 0x95, 0x56, 0x97, 0xd9, 0x8f, 0x95, 0xab, 0xee,
	0x39, 0xac, 0x24, 0xfa, 0x4e, 0x88, 0x99, 0xe5, 0x6d, 0xb2, 0x6f, 0xa3, 0x48, 0x59, 0xa2, 0xc7,
	0x24, 0xad, 0x2c, 0xab, 0x01, 0xa5, 0x48, 0x59, 0xa2, 0x69, 0x24, 0xad, 0x2c, 0xab, 0xa3, 0x24,
	0x57, 0xd9, 0xbe, 0xfc, 0xa7, 0x34, 0xee, 0x2f, 0xb9, 0x96, 0xe5, 0xe9, 0x5c, 0xdb, 0x44, 0x91,
	0xca, 0x74, 0xbb, 0x47, 0x5a, 0x65, 0x4e, 0x3b, 0x48, 0x91, 0xca, 0x74, 0xf3, 0x46, 0x5a, 0x65,
	0x4e, 0x73, 0x47, 0xae, 0xca, 0x67, 0x50, 0x57, 0x7a, 0x34, 0xc8, 0x56, 0x96, 0xcf, 0x6a, 0xbf,
	0x43, 0x91, 0x22, 0xa5, 0x27, 0x23, 0xad, 0x68, 0xbe, 0x5d, 0xa3, 0x48, 0x91, 0xd2, 0x66, 0x91,
	0x56, 0x34, 0xdf, 0x81, 0x91, 0xa7, 0xa8, 0xfb, 0xdb, 0x3a, 0xac, 0xf0, 0x02, 0x2f, 0x2a, 0xdb,
	0x2e, 0xd4, 0x64, 0x4b, 0x01, 0xb9, 0x32, 0x57, 0x17, 0x12, 0x3d, 0x10, 0xed, 0xcb, 0x39, 0x5b,
	0x85, 0xc8, 0xbe, 0x86, 0xfa, 0x67, 0x6b, 0xba, 0xca, 0x64, 0xb4, 0x6f, 0x14, 0x94, 0x80, 0x5d,
	0x68, 0xa8, 0xff, 0x72, 0xa6, 0x95, 0x65, 0xb4, 0x77, 0xe4, 0x46, 0x6f, 0x17, 0x1a, 0xea, 0xbf,
	0x89, 0x69, 0x55, 0x19, 0xcd, 0x1e, 0xb9, 0xaa, 0xbe, 0x64, 0xed, 0x04, 0x4a, 0xdf, 0x86, 0x99,
	0x13, 0x31, 0xa5, 0x21, 0xa2, 0xbd, 0x95, 0xdb, 0xd6, 0x20, 0xd4, 0xbe, 0x14, 0x50, 0x53, 0x34,
	0x5f, 0xcb, 0x8f, 0x9e, 0xaa, 0x3c, 0x3f, 0x82, 0x12, 0x6c, 0xf9, 0x4a, 0x73, 0x7a, 0x40, 0xce,
	0x06, 0x5b, 0xbe, 0xca, 0x9c, 0xae, 0x90, 0x5c, 0x95, 0xbf, 0x82, 0x25, 0xde, 0xa0, 0x41, 0x2e,
	0xcd, 0x85, 0x32, 0x6e, 0x9f, 0x68, 0x5f, 0x9c, 0x6f, 0x89, 0x88, 0xbb, 0x45, 0x6b, 0xb2, 0x2b,
	0x22, 0x9d, 0xc1, 0xe9, 0x56, 0x8f, 0x82, 0x70, 0x3d, 0x82, 0x9a, 0xec, 0x6f, 0x48, 0xab, 0x49,
	0xf7, 0x81, 0xe4, 0x7a, 0xf3, 0x08, 0x6a, 0xb2, 0x31, 0x21, 0xad, 0x24, 0xdd, 0x12, 0x72, 0xf6,
	0xfe, 0x82, 0xdd, 0x0d, 0xd9, 0xfb, 0x4b, 0xb2, 0xf5, 0xe1, 0xec, 0xfd, 0x25, 0x47, 0x59, 0x56,
	0x4f, 0xc7, 0xd9, 0xfb, 0x4b, 0x8e, 0xb2, 0xac, 0xa6, 0x8c, 0xb3, 0xf7, 0x17, 0xe5, 0xaf, 0xeb,
	0x82, 0xa4, 0x5f, 0x50, 0x65, 0xba, 0x35, 0xa2, 0x28, 0xe5, 0x17, 0x54, 0x99, 0x6e, 0x45, 0x28,
	0x4a, 0xf9, 0x05, 0x54, 0x76, 0x7f, 0x23, 0xfe, 0xe3, 0x16, 0x35, 0xf8, 0x73, 0xfe, 0xc9, 0xce,
	0x8e, 0xc4, 0xf8, 0x21, 0x70, 0xa9, 0xe0, 0x5f, 0xd5, 0x74, 0x19, 0x4e, 0x7e, 0x67, 0x3c, 0x5c,
	0xfb, 0xf5, 0xea, 0xf6, 0xad, 0x4f, 0x55, 0x89, 0xfe, 0x12, 0xfb, 0xb9, 0xfd, 0xdf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x33, 0x33, 0x11, 0xef, 0x69, 0x30, 0x00, 0x00,
}
