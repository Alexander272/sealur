package service

import (
	"math"

	"github.com/Alexander272/sealur/moment_service/internal/constants"
)

type GraphicService struct{}

func NewGraphicService() *GraphicService {
	return &GraphicService{}
}

// функция тупо скопирована из оригинала
// расчет аппроксимированной функции (функция разная и зависит от значения х. исходные значения Рисунок К.2 ГОСТ 34233.4-2017)
func (s *GraphicService) CalculateBettaF(betta, x float64) float64 {
	var f, f1, f2 float64

	switch {
	case x >= 0 && x < 0.1:
		f1 = constants.InitBettaF
		f2 = (-0.000000685709774295162)*math.Pow(betta, 6) + 0.00000179042442916*math.Pow(betta, 5) + 0.00121342871946961*math.Pow(betta, 4) - 0.0156079520766816*math.Pow(betta, 3) + 0.0713852548204228*math.Pow(betta, 2) - 0.132033833830155*betta + 0.983961997348035
		f = ((x-0.0)/(0.10-0.0))*(f2-f1) + f1
	case x >= 0.1 && x < 0.2:
		f1 = -0.000000685709774295162*math.Pow(betta, 6) + 0.00000179042442916*math.Pow(betta, 5) + 0.00121342871946961*math.Pow(betta, 4) - 0.0156079520766816*math.Pow(betta, 3) + 0.0713852548204228*math.Pow(betta, 2) - 0.132033833830155*betta + 0.983961997348035
		f2 = -0.000186958718629171*math.Pow(betta, 6) + 0.00270260935854338*math.Pow(betta, 5) - 0.0132402054724494*math.Pow(betta, 4) + 0.0177314503113593*math.Pow(betta, 3) + 0.0496071668843001*math.Pow(betta, 2) - 0.163661061259418*betta + 1.01596699859481
		f = ((x-0.10)/(0.20-0.10))*(f2-f1) + f1
	case x >= 0.2 && x < 0.25:
		f2 = 0.00173545909976035*math.Pow(betta, 4) - 0.0229593274470913*math.Pow(betta, 3) + 0.109804849073091*math.Pow(betta, 2) - 0.221341587836258*betta + 1.04140676493752
		f1 = -0.000186958718629171*math.Pow(betta, 6) + 0.00270260935854338*math.Pow(betta, 5) - 0.0132402054724494*math.Pow(betta, 4) + 0.0177314503113593*math.Pow(betta, 3) + 0.0496071668843001*math.Pow(betta, 2) - 0.163661061259418*betta + 1.01596699859481
		f = ((x-0.20)/(0.25-0.20))*(f2-f1) + f1
	case x >= 0.25 && x < 0.3:
		f1 = 0.00173545909976035*math.Pow(betta, 4) - 0.0229593274470913*math.Pow(betta, 3) + 0.109804849073091*math.Pow(betta, 2) - 0.221341587836258*betta + 1.04140676493752
		f2 = 0.00193732076800754*math.Pow(betta, 4) - 0.026106230052389*math.Pow(betta, 3) + 0.128138534713705*math.Pow(betta, 2) - 0.268021034819988*betta + 1.07275733229217
		f = ((x-0.25)/(0.30-0.25))*(f2-f1) + f1
	case x >= 0.3 && x < 0.35:
		f2 = 0.00297469010544045*math.Pow(betta, 4) - 0.0392245779011808*math.Pow(betta, 3) + 0.187025725151586*math.Pow(betta, 2) - 0.379373192875038*betta + 1.13713660128899
		f1 = 0.00193732076800754*math.Pow(betta, 4) - 0.026106230052389*math.Pow(betta, 3) + 0.128138534713705*math.Pow(betta, 2) - 0.268021034819988*betta + 1.07275733229217
		f = ((x-0.30)/(0.35-0.30))*(f2-f1) + f1
	case x >= 0.35 && x < 0.4:
		f1 = 0.00297469010544045*math.Pow(betta, 4) - 0.0392245779011808*math.Pow(betta, 3) + 0.187025725151586*math.Pow(betta, 2) - 0.379373192875038*betta + 1.13713660128899
		f2 = 0.00309341530338601*math.Pow(betta, 4) - 0.0410675648368301*math.Pow(betta, 3) + 0.198159262817235*math.Pow(betta, 2) - 0.411556783898828*betta + 1.15989660189039
		f = ((x-0.35)/(0.40-0.35))*(f2-f1) + f1
	case x >= 0.4 && x < 0.45:
		f2 = 0.00317467263939489*math.Pow(betta, 4) - 0.0425118835549549*math.Pow(betta, 3) + 0.208444710817431*math.Pow(betta, 2) - 0.445219873114703*betta + 1.18481173816372
		f1 = 0.00309341530338601*math.Pow(betta, 4) - 0.0410675648368301*math.Pow(betta, 3) + 0.198159262817235*math.Pow(betta, 2) - 0.411556783898828*betta + 1.15989660189039
		f = ((x-0.40)/(0.45-0.40))*(f2-f1) + f1
	case x >= 0.45 && x < 0.5:
		f1 = 0.00317467263939489*math.Pow(betta, 4) - 0.0425118835549549*math.Pow(betta, 3) + 0.208444710817431*math.Pow(betta, 2) - 0.445219873114703*betta + 1.18481173816372
		f2 = 0.00306882111532593*math.Pow(betta, 4) - 0.042363393407285*math.Pow(betta, 3) + 0.214087116035717*math.Pow(betta, 2) - 0.472733357010185*betta + 1.20668840864142
		f = ((x-0.45)/(0.50-0.45))*(f2-f1) + f1
	case x >= 0.5 && x < 0.6:
		f2 = 0.00431853154006122*math.Pow(betta, 4) - 0.0569156296982365*math.Pow(betta, 3) + 0.27529595841789*math.Pow(betta, 2) - 0.593152205919012*betta + 1.27878144516105
		f1 = 0.00306882111532593*math.Pow(betta, 4) - 0.042363393407285*math.Pow(betta, 3) + 0.214087116035717*math.Pow(betta, 2) - 0.47273335701018*betta + 1.20668840864142
		f = ((x-0.50)/(0.60-0.50))*(f2-f1) + f1
	case x >= 0.6 && x < 0.7:
		f1 = 0.00431853154006122*math.Pow(betta, 4) - 0.0569156296982365*math.Pow(betta, 3) + 0.27529595841789*math.Pow(betta, 2) - 0.593152205919012*betta + 1.27878144516105
		f2 = 0.00431178957617191*math.Pow(betta, 4) - 0.0578175725367722*math.Pow(betta, 3) + 0.285866341996179*math.Pow(betta, 2) - 0.636970282296766*betta + 1.31307260935091
		f = ((x-0.60)/(0.70-0.60))*(f2-f1) + f1
	case x >= 0.7 && x < 0.8:
		f2 = 0.00393976776368533*math.Pow(betta, 4) - 0.0534852765914117*math.Pow(betta, 3) + 0.271834547060149*math.Pow(betta, 2) - 0.638055491315338*betta + 1.32441823957794
		f1 = 0.00431178957617191*math.Pow(betta, 4) - 0.0578175725367722*math.Pow(betta, 3) + 0.285866341996179*math.Pow(betta, 2) - 0.636970282296766*betta + 1.31307260935091
		f = ((x-0.70)/(0.80-0.70))*(f2-f1) + f1
	case x >= 0.8 && x < 0.9:
		f1 = 0.00393976776368533*math.Pow(betta, 4) - 0.0534852765914117*math.Pow(betta, 3) + 0.271834547060149*math.Pow(betta, 2) - 0.638055491315338*betta + 1.32441823957794
		f2 = 0.00363323914800826*math.Pow(betta, 4) - 0.0499385883869711*math.Pow(betta, 3) + 0.260490073019555*math.Pow(betta, 2) - 0.638780633392638*betta + 1.33322874436111
		f = ((x-0.80)/(0.90-0.80))*(f2-f1) + f1
	case x >= 0.9 && x < 1.0:
		f2 = 0.00299986224072718*math.Pow(betta, 4) - 0.0446144019584678*math.Pow(betta, 3) + 0.250623474976823*math.Pow(betta, 2) - 0.652327954427285*betta + 1.35223617351659
		f1 = 0.00363323914800826*math.Pow(betta, 4) - 0.0499385883869711*math.Pow(betta, 3) + 0.260490073019555*math.Pow(betta, 2) - 0.638780633392638*betta + 1.333228744361110
		f = ((x-0.90)/(1.00-0.90))*(f2-f1) + f1
	case x >= 1.0 && x < 1.25:
		f1 = 0.00299986224072718*math.Pow(betta, 4) - 0.0446144019584678*math.Pow(betta, 3) + 0.250623474976823*math.Pow(betta, 2) - 0.652327954427285*betta + 1.35223617351659
		f2 = 0.0033531053559551*math.Pow(betta, 4) - 0.0486525640644669*math.Pow(betta, 3) + 0.269830627381706*math.Pow(betta, 2) - 0.71019936691933*betta + 1.39509574273625
		f = ((x-1.00)/(1.25-1.00))*(f2-f1) + f1
	case x >= 1.25 && x < 1.5:
		f2 = 0.00182411866696994*math.Pow(betta, 4) - 0.0316872884067056*math.Pow(betta, 3) + 0.208614913810006*math.Pow(betta, 2) - 0.638753657258849*betta + 1.36921673184627
		f1 = 0.0033531053559551*math.Pow(betta, 4) - 0.0486525640644669*math.Pow(betta, 3) + 0.269830627381706*math.Pow(betta, 2) - 0.710199366919334*betta + 1.3950957427362
		f = ((x-1.25)/(1.50-1.25))*(f2-f1) + f1
	case x >= 1.5 && x < 2.0:
		f1 = 0.00182411866696994*math.Pow(betta, 4) - 0.0316872884067056*math.Pow(betta, 3) + 0.208614913810006*math.Pow(betta, 2) - 0.638753657258849*betta + 1.36921673184627
		f2 = 0.00367635524977048*math.Pow(betta, 4) - 0.0521127245261192*math.Pow(betta, 3) + 0.285486147354332*math.Pow(betta, 2) - 0.770646859391461*betta + 1.44245799891866
		f = ((x-1.50)/(2.00-1.50))*(f2-f1) + f1
	default:
		f = 0.91
	}

	return f
}

// функция тупо скопирована из оригинала
// расчет аппроксимированной функции (функция разная и зависит от значения х. исходные значения Рисунок К.3 ГОСТ 34233.4-2017)
func (s *GraphicService) CalculateBettaV(betta, x float64) float64 {
	var f, f1, f2 float64

	switch {
	case x >= 0 && x < 0.10:
		f1 = constants.InitBettaV
		f2 = 0.0058641634223339*math.Pow(betta, 4) - 0.0748566044272087*math.Pow(betta, 3) + 0.345864798973686*math.Pow(betta, 2) - 0.708412154836844*betta + 0.980776349799449
		f = ((x-0.00)/(0.10-0.00))*(f2-f1) + f1
	case x >= 0.10 && x < 0.12:
		f1 = 0.0058641634223339*math.Pow(betta, 4) - 0.0748566044272087*math.Pow(betta, 3) + 0.345864798973686*math.Pow(betta, 2) - 0.708412154836844*betta + 0.980776349799449
		f2 = 0.00427218489206168*math.Pow(betta, 4) - 0.0576696700450847*math.Pow(betta, 3) + 0.287137267810623*math.Pow(betta, 2) - 0.646191390760794*betta + 0.961227872571484
		f = ((x-0.10)/(0.12-0.10))*(f2-f1) + f1
	case x >= 0.12 && x < 0.14:
		f1 = 0.00427218489206168*math.Pow(betta, 4) - 0.0576696700450847*math.Pow(betta, 3) + 0.287137267810623*math.Pow(betta, 2) - 0.646191390760794*betta + 0.961227872571484
		f2 = 0.00488737597016667*math.Pow(betta, 4) - 0.0658758226608894*math.Pow(betta, 3) + 0.327951390871681*math.Pow(betta, 2) - 0.738605356451387*betta + 1.02085861681089
		f = ((x-0.12)/(0.14-0.12))*(f2-f1) + f1
	case x >= 0.14 && x < 0.16:
		f1 = 0.00488737597016667*math.Pow(betta, 4) - 0.0658758226608894*math.Pow(betta, 3) + 0.327951390871681*math.Pow(betta, 2) - 0.738605356451387*betta + 1.02085861681089
		f2 = 0.00460271797088437*math.Pow(betta, 4) - 0.0648314897948872*math.Pow(betta, 3) + 0.336874456161432*math.Pow(betta, 2) - 0.786864847395865*betta + 1.05975954575613
		f = ((x-0.14)/(0.16-0.14))*(f2-f1) + f1
	case x >= 0.16 && x < 0.18:
		f1 = 0.00460271797088437*math.Pow(betta, 4) - 0.0648314897948872*math.Pow(betta, 3) + 0.336874456161432*math.Pow(betta, 2) - 0.786864847395865*betta + 1.05975954575613
		f2 = 0.00727051843506902*math.Pow(betta, 4) - 0.0961034781946584*math.Pow(betta, 3) + 0.464213008066531*math.Pow(betta, 2) - 1.00451378998363*betta + 1.1794064225988
		f = ((x-0.16)/(0.18-0.16))*(f2-f1) + f1
	case x >= 0.18 && x < 0.20:
		f1 = 0.00727051843506902*math.Pow(betta, 4) - 0.0961034781946584*math.Pow(betta, 3) + 0.464213008066531*math.Pow(betta, 2) - 1.00451378998363*betta + 1.1794064225988
		f2 = 0.00721173540592826*math.Pow(betta, 4) - 0.0969773506657811*math.Pow(betta, 3) + 0.477324201645806*math.Pow(betta, 2) - 1.05026603954099*betta + 1.21260244931179
		f = ((x-0.18)/(0.20-0.18))*(f2-f1) + f1
	case x >= 0.20 && x < 0.25:
		f1 = 0.00721173540592826*math.Pow(betta, 4) - 0.0969773506657811*math.Pow(betta, 3) + 0.477324201645806*math.Pow(betta, 2) - 1.05026603954099*betta + 1.21260244931179
		f2 = 0.00896333858044817*math.Pow(betta, 4) - 0.120259167814502*math.Pow(betta, 3) + 0.589015612657559*math.Pow(betta, 2) - 1.28321099000847*betta + 1.35440762589571
		f = ((x-0.20)/(0.25-0.20))*(f2-f1) + f1
	case x >= 0.25 && x < 0.30:
		f1 = 0.00896333858044817*math.Pow(betta, 4) - 0.120259167814502*math.Pow(betta, 3) + 0.589015612657559*math.Pow(betta, 2) - 1.28321099000847*betta + 1.35440762589571
		f2 = 0.00902846050543231*math.Pow(betta, 4) - 0.123389873098499*math.Pow(betta, 3) + 0.619559493162865*math.Pow(betta, 2) - 1.38799290494019*betta + 1.43200269598774
		f = ((x-0.25)/(0.30-0.25))*(f2-f1) + f1
	case x >= 0.30 && x < 0.35:
		f1 = 0.00902846050543231*math.Pow(betta, 4) - 0.123389873098499*math.Pow(betta, 3) + 0.619559493162865*math.Pow(betta, 2) - 1.38799290494019*betta + 1.43200269598774
		f2 = 0.0106958465978694*math.Pow(betta, 4) - 0.144294474129544*math.Pow(betta, 3) + 0.714737216488311*math.Pow(betta, 2) - 1.57772826558575*betta + 1.54552304975696
		f = ((x-0.30)/(0.35-0.30))*(f2-f1) + f1
	case x >= 0.35 && x < 0.40:
		f1 = 0.0106958465978694*math.Pow(betta, 4) - 0.144294474129544*math.Pow(betta, 3) + 0.714737216488311*math.Pow(betta, 2) - 1.57772826558575*betta + 1.54552304975696
		f2 = 0.0115878660766977*math.Pow(betta, 4) - 0.154969504488504*math.Pow(betta, 3) + 0.763360337275698*math.Pow(betta, 2) - 1.68118717343578*betta + 1.61074399314188
		f = ((x-0.35)/(0.40-0.35))*(f2-f1) + f1
	case x >= 0.40 && x < 0.45:
		f1 = 0.0115878660766977*math.Pow(betta, 4) - 0.154969504488504*math.Pow(betta, 3) + 0.763360337275698*math.Pow(betta, 2) - 1.68118717343578*betta + 1.61074399314188
		f2 = 0.0105350930422201*math.Pow(betta, 4) - 0.146169586118234*math.Pow(betta, 3) + 0.746373050400579*math.Pow(betta, 2) - 1.69254839191381*betta + 1.63032133505873
		f = ((x-0.40)/(0.45-0.40))*(f2-f1) + f1
	case x >= 0.45 && x < 0.50:
		f1 = 0.0105350930422201*math.Pow(betta, 4) - 0.146169586118234*math.Pow(betta, 3) + 0.746373050400579*math.Pow(betta, 2) - 1.69254839191381*betta + 1.63032133505873
		f2 = 0.0147272650480606*math.Pow(betta, 4) - 0.194226556641698*math.Pow(betta, 3) + 0.936899618560913*math.Pow(betta, 2) - 2.00513152244893*betta + 1.79700919379159
		f = ((x-0.45)/(0.50-0.45))*(f2-f1) + f1
	case x >= 0.50 && x < 0.60:
		f1 = 0.0147272650480606*math.Pow(betta, 4) - 0.194226556641698*math.Pow(betta, 3) + 0.936899618560913*math.Pow(betta, 2) - 2.00513152244893*betta + 1.79700919379159
		f2 = 0.0148410699644414*math.Pow(betta, 4) - 0.196084859543171*math.Pow(betta, 3) + 0.950648672240747*math.Pow(betta, 2) - 2.05089726707408*betta + 1.83003049816558
		f = ((x-0.50)/(0.60-0.50))*(f2-f1) + f1
	case x >= 0.60 && x < 0.70:
		f1 = 0.0148410699644414*math.Pow(betta, 4) - 0.196084859543171*math.Pow(betta, 3) + 0.950648672240747*math.Pow(betta, 2) - 2.05089726707408*betta + 1.83003049816558
		f2 = 0.0138984227474326*math.Pow(betta, 4) - 0.188197118526749*math.Pow(betta, 3) + 0.935272559601286*math.Pow(betta, 2) - 2.0628061986072*betta + 1.85045077372066
		f = ((x-0.60)/(0.70-0.60))*(f2-f1) + f1
	case x >= 0.7 && x < 0.8:
		f1 = 0.0138984227474326*math.Pow(betta, 4) - 0.188197118526749*math.Pow(betta, 3) + 0.935272559601286*math.Pow(betta, 2) - 2.0628061986072*betta + 1.85045077372066
		f2 = 0.0161105067667355*math.Pow(betta, 4) - 0.214306039151065*math.Pow(betta, 3) + 1.04396963732146*math.Pow(betta, 2) - 2.2533121521015*betta + 1.95659929065701
		f = ((x-0.70)/(0.80-0.70))*(f2-f1) + f1
	case x >= 0.8 && x < 0.9:
		f1 = 0.0161105067667355*math.Pow(betta, 4) - 0.214306039151065*math.Pow(betta, 3) + 1.04396963732146*math.Pow(betta, 2) - 2.2533121521015*betta + 1.95659929065701
		f2 = 0.0171585631685489*math.Pow(betta, 4) - 0.225971160127992*math.Pow(betta, 3) + 1.09015746815975*math.Pow(betta, 2) - 2.33460469421229*betta + 2.0015405396793
		f = ((x-0.80)/(0.90-0.80))*(f2-f1) + f1
	case x >= 0.9 && x < 1:
		f1 = 0.0171585631685489*math.Pow(betta, 4) - 0.225971160127992*math.Pow(betta, 3) + 1.09015746815975*math.Pow(betta, 2) - 2.33460469421229*betta + 2.0015405396793
		f2 = 0.0181832719615506*math.Pow(betta, 4) - 0.238474483719479*math.Pow(betta, 3) + 1.14422460739396*math.Pow(betta, 2) - 2.43362479844938*betta + 2.0574674694669
		f = ((x-0.90)/(1.00-0.90))*(f2-f1) + f1
	case x >= 1 && x < 1.25:
		f1 = 0.0181832719615506*math.Pow(betta, 4) - 0.238474483719479*math.Pow(betta, 3) + 1.14422460739396*math.Pow(betta, 2) - 2.43362479844938*betta + 2.0574674694669
		f2 = 0.0193245080393135*math.Pow(betta, 4) - 0.252719162624534*math.Pow(betta, 3) + 1.20730036223498*math.Pow(betta, 2) - 2.55097264670514*betta + 2.12464092473434
		f = ((x-1.00)/(1.25-1.00))*(f2-f1) + f1
	case x >= 1.25 && x < 1.50:
		f1 = 0.0193245080393135*math.Pow(betta, 4) - 0.252719162624534*math.Pow(betta, 3) + 1.20730036223498*math.Pow(betta, 2) - 2.55097264670514*betta + 2.12464092473434
		f2 = 0.0210833381428893*math.Pow(betta, 4) - 0.275706486072612*math.Pow(betta, 3) + 1.31244377792127*math.Pow(betta, 2) - 2.74660578969882*betta + 2.23635760844775
		f = ((x-1.25)/(1.50-1.25))*(f2-f1) + f1
	case x >= 1.5 && x <= 2.00:
		f1 = 0.0210833381428893*math.Pow(betta, 4) - 0.275706486072612*math.Pow(betta, 3) + 1.31244377792127*math.Pow(betta, 2) - 2.74660578969882*betta + 2.23635760844775
		f2 = 0.021767904764524*math.Pow(betta, 4) - 0.285402818872975*math.Pow(betta, 3) + 1.36155533631857*math.Pow(betta, 2) - 2.84937881931514*betta + 2.29865470248542
		f = ((x-1.5)/(2.00-1.5))*(f2-f1) + f1
	default:
		f = 0.55
	}

	return f
}

// Поправочный коэффициент для напряжений во втулке фланца f | функция тупо скопирована из оригинала
func (s *GraphicService) CalculateF(betta, x float64) float64 {
	var f, f1, f2 float64

	switch {
	case x >= 0 && x < 0.05:
		f1 = ((betta-1.0)/(5.0-1.0))*(25.0-1.0) + 1.0
		f2 = ((betta-1.03333)/(5.0-1.03333))*(23.33333-1.0) + 1.0
		f = ((x-0.0)/(0.05-0.0))*(f2-f1) + f1
	case x >= 0.05 && x < 0.10:
		f1 = ((betta-1.03333)/(5.0-1.03333))*(23.33333-1.0) + 1.0
		f2 = ((betta-1.12)/(5.0-1.12))*(21.0-1.0) + 1.0
		f = ((x-0.05)/(0.10-0.05))*(f2-f1) + f1
	case x >= 0.10 && x < 0.15:
		f1 = ((betta-1.2)/(5.0-1.2))*(21.0-1.0) + 1.0
		f2 = ((betta-1.18)/(5.0-1.18))*(19.0-1.0) + 1.0
		f = ((x-0.10)/(0.15-0.10))*(f2-f1) + f1
	case x >= 0.15 && x < 0.20:
		f1 = ((betta-1.18)/(5.0-1.18))*(19.0-1.0) + 1.0
		f2 = ((betta-1.24)/(5.0-1.24))*(16.2-1.0) + 1.0
		f = ((x-0.15)/(0.20-0.15))*(f2-f1) + f1
	case x >= 0.20 && x < 0.25:
		f1 = ((betta-1.24)/(5.0-1.24))*(16.2-1.0) + 1.0
		f2 = ((betta-1.33)/(5.0-1.33))*(15.0-1.0) + 1.0
		f = ((x-0.20)/(0.25-0.20))*(f2-f1) + f1
	case x >= 0.25 && x < 0.30:
		f1 = ((betta-1.33)/(5.0-1.33))*(15.0-1.0) + 1.0
		f2 = ((betta-1.4)/(5.0-1.4))*(13.5-1.0) + 1.0
		f = ((x-0.25)/(0.30-0.25))*(f2-f1) + f1
	case x >= 0.30 && x < 0.35:
		f1 = ((betta-1.4)/(5.0-1.4))*(13.5-1.0) + 1.0
		f2 = ((betta-1.48)/(5.0-1.48))*(12.5-1.0) + 1.0
		f = ((x-0.30)/(0.35-0.30))*(f2-f1) + f1
	case x >= 0.35 && x < 0.40:
		f1 = ((betta-1.48)/(5.0-1.48))*(12.5-1.0) + 1.0
		f2 = ((betta-1.6)/(5.0-1.6))*(10.5-1.0) + 1.0
		f = ((x-0.35)/(0.40-0.35))*(f2-f1) + f1
	case x >= 0.40 && x < 0.45:
		f1 = ((betta-1.6)/(5.0-1.6))*(10.5-1.0) + 1.0
		f2 = ((betta-1.7)/(5.0-1.7))*(9.0-1.0) + 1.0
		f = ((x-0.40)/(0.45-0.40))*(f2-f1) + f1
	case x >= 0.45 && x < 0.50:
		f1 = ((betta-1.7)/(5.0-1.7))*(9.0-1.0) + 1.0
		f2 = ((betta-1.8)/(5.0-1.8))*(8.25-1.0) + 1.0
		f = ((x-0.45)/(0.50-0.45))*(f2-f1) + f1
	case x >= 0.50 && x < 0.60:
		f1 = ((betta-1.8)/(5.0-1.8))*(8.25-1.0) + 1.0
		f2 = ((betta-2.05)/(5.0-2.05))*(6.5-1.0) + 1.0
		f = ((x-0.50)/(0.60-0.50))*(f2-f1) + f1
	case x >= 0.60 && x < 0.70:
		f1 = ((betta-2.05)/(5.0-2.05))*(6.5-1.0) + 1.0
		f2 = ((betta-2.35)/(5.0-2.35))*(5.0-1.0) + 1.0
		f = ((x-0.60)/(0.70-0.60))*(f2-f1) + f1
	case x >= 0.70 && x < 0.80:
		f1 = ((betta-2.35)/(5.0-2.35))*(5.0-1.0) + 1.0
		f2 = ((betta-2.65)/(5.0-2.65))*(4.42-1.0) + 1.0
		f = ((x-0.70)/(0.80-0.70))*(f2-f1) + f1
	case x >= 0.80 && x < 0.90:
		f1 = ((betta-2.65)/(5.0-2.65))*(4.42-1.0) + 1.0
		f2 = ((betta-3.0)/(5.0-3.0))*(3.5-1.0) + 1.0
		f = ((x-0.80)/(0.90-0.80))*(f2-f1) + f1
	case x >= 0.90 && x < 1.00:
		f1 = ((betta-3.0)/(5.0-3.0))*(3.5-1.0) + 1.0
		f2 = ((betta-3.4)/(5.0-3.4))*(2.7-1.0) + 1.0
		f = ((x-0.90)/(1.00-0.90))*(f2-f1) + f1
	case x >= 1.00 && x < 1.10:
		f1 = ((betta-3.4)/(5.0-3.4))*(2.7-1.0) + 1.0
		f2 = ((betta-3.8)/(5.0-3.8))*(2.4-1.0) + 1.0
		f = ((x-1.00)/(1.10-1.00))*(f2-f1) + f1
	case x >= 1.10 && x < 1.20:
		f1 = ((betta-3.8)/(5.0-3.8))*(2.4-1.0) + 1.0
		f2 = ((betta-4.2)/(5.0-4.2))*(1.9-1.0) + 1.0
		f = ((x-1.10)/(1.20-1.10))*(f2-f1) + f1
	case x >= 1.20 && x <= 1.30:
		f1 = ((betta-4.2)/(5.0-4.2))*(1.9-1.0) + 1.0
		f2 = ((betta-4.63)/(5.0-4.63))*(1.3-1.0) + 1.0
		f = ((x-1.20)/(1.30-1.20))*(f2-f1) + f1
	default:
		f = constants.InitF
	}

	return f
}

// Крутящий момент при затяжке для болтов | функция тупо скопирована из оригинала
func (s *GraphicService) CalculateMkp(diameter int32, sigma float64) float64 {
	var mkp, max, m float64

	switch {
	case diameter >= 20 && diameter < 22:
		m = 0.963*sigma + 24.21
		max = 1.340*sigma + 17.11
		mkp = float64(diameter-20)*(max-m)/(22-20) + m
	case diameter >= 22 && diameter < 24:
		m = 1.340*sigma + 17.11
		max = 1.997*sigma - 25.29
		mkp = float64(diameter-22)*(max-m)/(24-22) + m
	case diameter >= 24 && diameter < 27:
		m = 1.997*sigma - 25.29
		max = 2.620*sigma - 11.01
		mkp = float64(diameter-24)*(max-m)/(27-24) + m
	case diameter >= 27 && diameter < 30:
		m = 2.620*sigma - 11.01
		max = 3.308*sigma + 36.68
		mkp = float64(diameter-27)*(max-m)/(30-27) + m
	case diameter >= 30 && diameter < 36:
		m = 3.308*sigma + 36.68
		max = 6.191*sigma - 47.80
		mkp = float64(diameter-30)*(max-m)/(36-30) + m
	case diameter >= 36 && diameter < 42:
		m = 6.191*sigma - 47.80
		max = 9.862*sigma - 69.96
		mkp = float64(diameter-36)*(max-m)/(42-36) + m
	case diameter >= 42 && diameter < 48:
		m = 9.862*sigma - 69.96
		max = 14.55*sigma - 54.94
		mkp = float64(diameter-42)*(max-m)/(48-42) + m
	case diameter >= 48 && diameter <= 52:
		m = 14.55*sigma - 54.94
		max = 15.58*sigma + 304.4
		mkp = float64(diameter-48)*(max-m)/(52-48) + m
	}

	return mkp
}
