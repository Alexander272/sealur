// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/user.proto

/*
Package proto_user is a generated protocol buffer package.

It is generated from these files:
	proto/user.proto

It has these top-level messages:
	IdResponse
	SuccessResponse
	PingRequest
	PingResponse
	GetUserRequest
	GetAllUserRequest
	GetNewUserRequest
	CreateUserRequest
	UpdateUserRequest
	DeleteUserRequest
	ConfirmUserRequest
	User
	UserResponse
	UsersResponse
	GetRolesRequest
	GetAllRolesRequest
	CreateRoleRequest
	UpdateRoleRequest
	DeleteRoleRequest
	Role
	RolesResponse
*/
package proto_user

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type IdResponse struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *IdResponse) Reset()                    { *m = IdResponse{} }
func (m *IdResponse) String() string            { return proto.CompactTextString(m) }
func (*IdResponse) ProtoMessage()               {}
func (*IdResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *IdResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type SuccessResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *SuccessResponse) Reset()                    { *m = SuccessResponse{} }
func (m *SuccessResponse) String() string            { return proto.CompactTextString(m) }
func (*SuccessResponse) ProtoMessage()               {}
func (*SuccessResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SuccessResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type PingRequest struct {
}

func (m *PingRequest) Reset()                    { *m = PingRequest{} }
func (m *PingRequest) String() string            { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()               {}
func (*PingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type PingResponse struct {
	Ping string `protobuf:"bytes,1,opt,name=ping" json:"ping,omitempty"`
}

func (m *PingResponse) Reset()                    { *m = PingResponse{} }
func (m *PingResponse) String() string            { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()               {}
func (*PingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PingResponse) GetPing() string {
	if m != nil {
		return m.Ping
	}
	return ""
}

// User Service ----------------------------------------------------------------------
type GetUserRequest struct {
	Login    string `protobuf:"bytes,1,opt,name=login" json:"login,omitempty"`
	Id       string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
}

func (m *GetUserRequest) Reset()                    { *m = GetUserRequest{} }
func (m *GetUserRequest) String() string            { return proto.CompactTextString(m) }
func (*GetUserRequest) ProtoMessage()               {}
func (*GetUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetUserRequest) GetLogin() string {
	if m != nil {
		return m.Login
	}
	return ""
}

func (m *GetUserRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GetUserRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type GetAllUserRequest struct {
}

func (m *GetAllUserRequest) Reset()                    { *m = GetAllUserRequest{} }
func (m *GetAllUserRequest) String() string            { return proto.CompactTextString(m) }
func (*GetAllUserRequest) ProtoMessage()               {}
func (*GetAllUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type GetNewUserRequest struct {
}

func (m *GetNewUserRequest) Reset()                    { *m = GetNewUserRequest{} }
func (m *GetNewUserRequest) String() string            { return proto.CompactTextString(m) }
func (*GetNewUserRequest) ProtoMessage()               {}
func (*GetNewUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type CreateUserRequest struct {
	Organization string `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Email        string `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	City         string `protobuf:"bytes,4,opt,name=city" json:"city,omitempty"`
	Position     string `protobuf:"bytes,5,opt,name=position" json:"position,omitempty"`
	Phone        string `protobuf:"bytes,6,opt,name=phone" json:"phone,omitempty"`
}

func (m *CreateUserRequest) Reset()                    { *m = CreateUserRequest{} }
func (m *CreateUserRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateUserRequest) ProtoMessage()               {}
func (*CreateUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *CreateUserRequest) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *CreateUserRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateUserRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *CreateUserRequest) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *CreateUserRequest) GetPosition() string {
	if m != nil {
		return m.Position
	}
	return ""
}

func (m *CreateUserRequest) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

type UpdateUserRequest struct {
	Id       string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Email    string `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	Position string `protobuf:"bytes,4,opt,name=position" json:"position,omitempty"`
	Phone    string `protobuf:"bytes,5,opt,name=phone" json:"phone,omitempty"`
}

func (m *UpdateUserRequest) Reset()                    { *m = UpdateUserRequest{} }
func (m *UpdateUserRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateUserRequest) ProtoMessage()               {}
func (*UpdateUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *UpdateUserRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateUserRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateUserRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UpdateUserRequest) GetPosition() string {
	if m != nil {
		return m.Position
	}
	return ""
}

func (m *UpdateUserRequest) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

type DeleteUserRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteUserRequest) Reset()                    { *m = DeleteUserRequest{} }
func (m *DeleteUserRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteUserRequest) ProtoMessage()               {}
func (*DeleteUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *DeleteUserRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ConfirmUserRequest struct {
	Id       string  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Login    string  `protobuf:"bytes,2,opt,name=login" json:"login,omitempty"`
	Password string  `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
	Roles    []*Role `protobuf:"bytes,4,rep,name=roles" json:"roles,omitempty"`
}

func (m *ConfirmUserRequest) Reset()                    { *m = ConfirmUserRequest{} }
func (m *ConfirmUserRequest) String() string            { return proto.CompactTextString(m) }
func (*ConfirmUserRequest) ProtoMessage()               {}
func (*ConfirmUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ConfirmUserRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ConfirmUserRequest) GetLogin() string {
	if m != nil {
		return m.Login
	}
	return ""
}

func (m *ConfirmUserRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *ConfirmUserRequest) GetRoles() []*Role {
	if m != nil {
		return m.Roles
	}
	return nil
}

type User struct {
	Id           string  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Organization string  `protobuf:"bytes,2,opt,name=organization" json:"organization,omitempty"`
	Name         string  `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Email        string  `protobuf:"bytes,4,opt,name=email" json:"email,omitempty"`
	City         string  `protobuf:"bytes,5,opt,name=city" json:"city,omitempty"`
	Position     string  `protobuf:"bytes,6,opt,name=position" json:"position,omitempty"`
	Phone        string  `protobuf:"bytes,7,opt,name=phone" json:"phone,omitempty"`
	Roles        []*Role `protobuf:"bytes,8,rep,name=roles" json:"roles,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *User) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *User) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *User) GetPosition() string {
	if m != nil {
		return m.Position
	}
	return ""
}

func (m *User) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *User) GetRoles() []*Role {
	if m != nil {
		return m.Roles
	}
	return nil
}

type UserResponse struct {
	User *User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *UserResponse) Reset()                    { *m = UserResponse{} }
func (m *UserResponse) String() string            { return proto.CompactTextString(m) }
func (*UserResponse) ProtoMessage()               {}
func (*UserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *UserResponse) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type UsersResponse struct {
	Users []*User `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"`
}

func (m *UsersResponse) Reset()                    { *m = UsersResponse{} }
func (m *UsersResponse) String() string            { return proto.CompactTextString(m) }
func (*UsersResponse) ProtoMessage()               {}
func (*UsersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *UsersResponse) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

// Role Service ----------------------------------------------------------------------
type GetRolesRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=userId" json:"userId,omitempty"`
}

func (m *GetRolesRequest) Reset()                    { *m = GetRolesRequest{} }
func (m *GetRolesRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRolesRequest) ProtoMessage()               {}
func (*GetRolesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *GetRolesRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type GetAllRolesRequest struct {
}

func (m *GetAllRolesRequest) Reset()                    { *m = GetAllRolesRequest{} }
func (m *GetAllRolesRequest) String() string            { return proto.CompactTextString(m) }
func (*GetAllRolesRequest) ProtoMessage()               {}
func (*GetAllRolesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

type CreateRoleRequest struct {
	UserId  string `protobuf:"bytes,1,opt,name=userId" json:"userId,omitempty"`
	Service string `protobuf:"bytes,2,opt,name=service" json:"service,omitempty"`
	Role    string `protobuf:"bytes,3,opt,name=role" json:"role,omitempty"`
}

func (m *CreateRoleRequest) Reset()                    { *m = CreateRoleRequest{} }
func (m *CreateRoleRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRoleRequest) ProtoMessage()               {}
func (*CreateRoleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *CreateRoleRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *CreateRoleRequest) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *CreateRoleRequest) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

type UpdateRoleRequest struct {
	Id      string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Service string `protobuf:"bytes,2,opt,name=service" json:"service,omitempty"`
	Role    string `protobuf:"bytes,3,opt,name=role" json:"role,omitempty"`
}

func (m *UpdateRoleRequest) Reset()                    { *m = UpdateRoleRequest{} }
func (m *UpdateRoleRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRoleRequest) ProtoMessage()               {}
func (*UpdateRoleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *UpdateRoleRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateRoleRequest) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *UpdateRoleRequest) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

type DeleteRoleRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteRoleRequest) Reset()                    { *m = DeleteRoleRequest{} }
func (m *DeleteRoleRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRoleRequest) ProtoMessage()               {}
func (*DeleteRoleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *DeleteRoleRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Role struct {
	Id      string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Service string `protobuf:"bytes,2,opt,name=service" json:"service,omitempty"`
	Role    string `protobuf:"bytes,3,opt,name=role" json:"role,omitempty"`
}

func (m *Role) Reset()                    { *m = Role{} }
func (m *Role) String() string            { return proto.CompactTextString(m) }
func (*Role) ProtoMessage()               {}
func (*Role) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *Role) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Role) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *Role) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

type RolesResponse struct {
	Roles []*Role `protobuf:"bytes,1,rep,name=roles" json:"roles,omitempty"`
}

func (m *RolesResponse) Reset()                    { *m = RolesResponse{} }
func (m *RolesResponse) String() string            { return proto.CompactTextString(m) }
func (*RolesResponse) ProtoMessage()               {}
func (*RolesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *RolesResponse) GetRoles() []*Role {
	if m != nil {
		return m.Roles
	}
	return nil
}

func init() {
	proto.RegisterType((*IdResponse)(nil), "proto_user.IdResponse")
	proto.RegisterType((*SuccessResponse)(nil), "proto_user.SuccessResponse")
	proto.RegisterType((*PingRequest)(nil), "proto_user.PingRequest")
	proto.RegisterType((*PingResponse)(nil), "proto_user.PingResponse")
	proto.RegisterType((*GetUserRequest)(nil), "proto_user.GetUserRequest")
	proto.RegisterType((*GetAllUserRequest)(nil), "proto_user.GetAllUserRequest")
	proto.RegisterType((*GetNewUserRequest)(nil), "proto_user.GetNewUserRequest")
	proto.RegisterType((*CreateUserRequest)(nil), "proto_user.CreateUserRequest")
	proto.RegisterType((*UpdateUserRequest)(nil), "proto_user.UpdateUserRequest")
	proto.RegisterType((*DeleteUserRequest)(nil), "proto_user.DeleteUserRequest")
	proto.RegisterType((*ConfirmUserRequest)(nil), "proto_user.ConfirmUserRequest")
	proto.RegisterType((*User)(nil), "proto_user.User")
	proto.RegisterType((*UserResponse)(nil), "proto_user.UserResponse")
	proto.RegisterType((*UsersResponse)(nil), "proto_user.UsersResponse")
	proto.RegisterType((*GetRolesRequest)(nil), "proto_user.GetRolesRequest")
	proto.RegisterType((*GetAllRolesRequest)(nil), "proto_user.GetAllRolesRequest")
	proto.RegisterType((*CreateRoleRequest)(nil), "proto_user.CreateRoleRequest")
	proto.RegisterType((*UpdateRoleRequest)(nil), "proto_user.UpdateRoleRequest")
	proto.RegisterType((*DeleteRoleRequest)(nil), "proto_user.DeleteRoleRequest")
	proto.RegisterType((*Role)(nil), "proto_user.Role")
	proto.RegisterType((*RolesResponse)(nil), "proto_user.RolesResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UserService service

type UserServiceClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	// User Service ----------------------------------------------------------------------
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	GetAllUsers(ctx context.Context, in *GetAllUserRequest, opts ...grpc.CallOption) (*UsersResponse, error)
	GetNewUsers(ctx context.Context, in *GetNewUserRequest, opts ...grpc.CallOption) (*UsersResponse, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	ConfirmUser(ctx context.Context, in *ConfirmUserRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*IdResponse, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*IdResponse, error)
	// Role Service ----------------------------------------------------------------------
	GetRoles(ctx context.Context, in *GetRolesRequest, opts ...grpc.CallOption) (*RolesResponse, error)
	CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*IdResponse, error)
	DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*IdResponse, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := grpc.Invoke(ctx, "/proto_user.UserService/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := grpc.Invoke(ctx, "/proto_user.UserService/GetUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetAllUsers(ctx context.Context, in *GetAllUserRequest, opts ...grpc.CallOption) (*UsersResponse, error) {
	out := new(UsersResponse)
	err := grpc.Invoke(ctx, "/proto_user.UserService/GetAllUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetNewUsers(ctx context.Context, in *GetNewUserRequest, opts ...grpc.CallOption) (*UsersResponse, error) {
	out := new(UsersResponse)
	err := grpc.Invoke(ctx, "/proto_user.UserService/GetNewUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := grpc.Invoke(ctx, "/proto_user.UserService/CreateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ConfirmUser(ctx context.Context, in *ConfirmUserRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := grpc.Invoke(ctx, "/proto_user.UserService/ConfirmUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*IdResponse, error) {
	out := new(IdResponse)
	err := grpc.Invoke(ctx, "/proto_user.UserService/UpdateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*IdResponse, error) {
	out := new(IdResponse)
	err := grpc.Invoke(ctx, "/proto_user.UserService/DeleteUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetRoles(ctx context.Context, in *GetRolesRequest, opts ...grpc.CallOption) (*RolesResponse, error) {
	out := new(RolesResponse)
	err := grpc.Invoke(ctx, "/proto_user.UserService/GetRoles", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := grpc.Invoke(ctx, "/proto_user.UserService/CreateRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*IdResponse, error) {
	out := new(IdResponse)
	err := grpc.Invoke(ctx, "/proto_user.UserService/UpdateRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*IdResponse, error) {
	out := new(IdResponse)
	err := grpc.Invoke(ctx, "/proto_user.UserService/DeleteRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	// User Service ----------------------------------------------------------------------
	GetUser(context.Context, *GetUserRequest) (*UserResponse, error)
	GetAllUsers(context.Context, *GetAllUserRequest) (*UsersResponse, error)
	GetNewUsers(context.Context, *GetNewUserRequest) (*UsersResponse, error)
	CreateUser(context.Context, *CreateUserRequest) (*SuccessResponse, error)
	ConfirmUser(context.Context, *ConfirmUserRequest) (*SuccessResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*IdResponse, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*IdResponse, error)
	// Role Service ----------------------------------------------------------------------
	GetRoles(context.Context, *GetRolesRequest) (*RolesResponse, error)
	CreateRole(context.Context, *CreateRoleRequest) (*SuccessResponse, error)
	UpdateRole(context.Context, *UpdateRoleRequest) (*IdResponse, error)
	DeleteRole(context.Context, *DeleteRoleRequest) (*IdResponse, error)
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_user.UserService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_user.UserService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetAllUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetAllUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_user.UserService/GetAllUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetAllUsers(ctx, req.(*GetAllUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetNewUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNewUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetNewUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_user.UserService/GetNewUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetNewUsers(ctx, req.(*GetNewUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_user.UserService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ConfirmUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ConfirmUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_user.UserService/ConfirmUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ConfirmUser(ctx, req.(*ConfirmUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_user.UserService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_user.UserService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_user.UserService/GetRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetRoles(ctx, req.(*GetRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_user.UserService/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateRole(ctx, req.(*CreateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_user.UserService/UpdateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateRole(ctx, req.(*UpdateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_user.UserService/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteRole(ctx, req.(*DeleteRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto_user.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _UserService_Ping_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UserService_GetUser_Handler,
		},
		{
			MethodName: "GetAllUsers",
			Handler:    _UserService_GetAllUsers_Handler,
		},
		{
			MethodName: "GetNewUsers",
			Handler:    _UserService_GetNewUsers_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _UserService_CreateUser_Handler,
		},
		{
			MethodName: "ConfirmUser",
			Handler:    _UserService_ConfirmUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserService_DeleteUser_Handler,
		},
		{
			MethodName: "GetRoles",
			Handler:    _UserService_GetRoles_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _UserService_CreateRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _UserService_UpdateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _UserService_DeleteRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/user.proto",
}

func init() { proto.RegisterFile("proto/user.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 698 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0xdf, 0x6e, 0xd3, 0x3e,
	0x14, 0x56, 0xdb, 0xa4, 0xeb, 0xef, 0x74, 0x5d, 0x57, 0xff, 0xa6, 0x11, 0x32, 0x40, 0x93, 0x41,
	0xd3, 0x10, 0x52, 0x27, 0x0d, 0xa4, 0x09, 0x71, 0x81, 0x58, 0x27, 0x95, 0x71, 0x81, 0x20, 0xd3,
	0x2e, 0xe0, 0x06, 0x85, 0xd6, 0x14, 0x4b, 0x69, 0x1c, 0xe2, 0x94, 0x09, 0x2e, 0xe0, 0x71, 0x78,
	0x1f, 0x78, 0x21, 0x64, 0xc7, 0x69, 0xec, 0xb8, 0x0d, 0x4c, 0x5c, 0xc5, 0xc7, 0xe7, 0xf8, 0xf3,
	0xe7, 0xf3, 0xe7, 0x0b, 0x6c, 0x27, 0x29, 0xcb, 0xd8, 0xd1, 0x82, 0x93, 0x74, 0x28, 0x97, 0x08,
	0xe4, 0xe7, 0x9d, 0xd8, 0xc1, 0xb7, 0x00, 0xce, 0xa7, 0x01, 0xe1, 0x09, 0x8b, 0x39, 0x41, 0x5b,
	0xd0, 0xa4, 0x53, 0xaf, 0xb1, 0xdf, 0x38, 0xfc, 0x2f, 0x68, 0xd2, 0x29, 0x7e, 0x00, 0xfd, 0x8b,
	0xc5, 0x64, 0x42, 0x38, 0x5f, 0x86, 0x78, 0xb0, 0xc1, 0xf3, 0x2d, 0x19, 0xd7, 0x09, 0x0a, 0x13,
	0xf7, 0xa0, 0xfb, 0x8a, 0xc6, 0xb3, 0x80, 0x7c, 0x5a, 0x10, 0x9e, 0x61, 0x0c, 0x9b, 0xb9, 0xa9,
	0x0e, 0x22, 0x70, 0x12, 0x1a, 0xcf, 0x14, 0xba, 0x5c, 0xe3, 0x00, 0xb6, 0xc6, 0x24, 0xbb, 0xe4,
	0x24, 0x55, 0xa7, 0xd0, 0x0e, 0xb8, 0x11, 0x9b, 0xd1, 0x58, 0x85, 0xe5, 0x86, 0xe2, 0xd5, 0x2c,
	0x78, 0x21, 0x1f, 0x3a, 0x49, 0xc8, 0xf9, 0x15, 0x4b, 0xa7, 0x5e, 0x4b, 0xee, 0x2e, 0x6d, 0xfc,
	0x3f, 0x0c, 0xc6, 0x24, 0x7b, 0x16, 0x45, 0x1a, 0xac, 0xda, 0x7c, 0x49, 0xae, 0xf4, 0xcd, 0x1f,
	0x0d, 0x18, 0x8c, 0x52, 0x12, 0x66, 0x44, 0x67, 0x80, 0x61, 0x93, 0xa5, 0xb3, 0x30, 0xa6, 0x5f,
	0xc3, 0x8c, 0xb2, 0x82, 0x88, 0xb1, 0x27, 0xde, 0x12, 0x87, 0x73, 0xa2, 0x18, 0xc9, 0xb5, 0x60,
	0x4e, 0xe6, 0x21, 0x8d, 0x14, 0xa1, 0xdc, 0x10, 0x91, 0x13, 0x9a, 0x7d, 0xf1, 0x9c, 0x3c, 0x52,
	0xac, 0x25, 0x7b, 0xc6, 0xa9, 0x44, 0x77, 0x15, 0x7b, 0x65, 0x0b, 0x94, 0xe4, 0x23, 0x8b, 0x89,
	0xd7, 0xce, 0x51, 0xa4, 0x81, 0xbf, 0xc3, 0xe0, 0x32, 0x99, 0x56, 0x88, 0x56, 0x8a, 0x75, 0x0d,
	0x52, 0x3a, 0x01, 0x67, 0x1d, 0x01, 0x57, 0x27, 0x70, 0x17, 0x06, 0x67, 0x24, 0x22, 0xb5, 0x04,
	0xf0, 0x37, 0x40, 0x23, 0x16, 0x7f, 0xa0, 0xe9, 0xbc, 0x8e, 0xe6, 0xb2, 0xc2, 0x4d, 0xbd, 0xc2,
	0x35, 0x15, 0x45, 0x07, 0xe0, 0xa6, 0x2c, 0x22, 0xdc, 0x73, 0xf6, 0x5b, 0x87, 0xdd, 0xe3, 0xed,
	0x61, 0xd9, 0xbf, 0xc3, 0x80, 0x45, 0x24, 0xc8, 0xdd, 0xf8, 0x67, 0x03, 0x1c, 0x71, 0xb3, 0x75,
	0x65, 0xb5, 0xa4, 0xcd, 0x9a, 0x92, 0xb6, 0x56, 0x65, 0xcf, 0x59, 0x55, 0x52, 0x77, 0x4d, 0x49,
	0xdb, 0xeb, 0x32, 0xba, 0xa1, 0x65, 0xb4, 0x7c, 0x54, 0xa7, 0xfe, 0x51, 0x8f, 0x60, 0x33, 0xcf,
	0xa6, 0x1a, 0xa3, 0x7b, 0xe0, 0x88, 0x18, 0xf9, 0xba, 0xca, 0x31, 0x19, 0x27, 0xbd, 0xf8, 0x04,
	0x7a, 0xc2, 0x2a, 0xc7, 0xf6, 0x00, 0x5c, 0xe1, 0x10, 0x43, 0xdb, 0x5a, 0x79, 0x2e, 0x77, 0xe3,
	0xfb, 0xd0, 0x1f, 0x93, 0x4c, 0x10, 0xe0, 0x45, 0x01, 0x77, 0xa1, 0x2d, 0x7c, 0xe7, 0x45, 0x46,
	0x95, 0x85, 0x77, 0x00, 0xe5, 0x83, 0xa6, 0x47, 0xe3, 0x37, 0xc5, 0x4c, 0xc9, 0x47, 0xd4, 0x43,
	0x48, 0x31, 0x21, 0xe9, 0x67, 0x3a, 0x29, 0xba, 0xb6, 0x30, 0x45, 0x92, 0xc5, 0xfb, 0x8b, 0x72,
	0x88, 0x35, 0x7e, 0x5d, 0x4c, 0x81, 0x0e, 0x5d, 0xad, 0xf5, 0xf5, 0x20, 0x97, 0x7d, 0x5d, 0x03,
	0x89, 0xcf, 0xc0, 0x11, 0xee, 0x7f, 0xbc, 0xea, 0x04, 0x7a, 0x2a, 0x51, 0x65, 0x49, 0xf2, 0x0e,
	0x68, 0xd4, 0x76, 0xc0, 0xf1, 0xaf, 0x36, 0x74, 0x45, 0x89, 0x2e, 0x14, 0xf8, 0x63, 0x70, 0x84,
	0xb0, 0xa2, 0x1b, 0xfa, 0x01, 0x4d, 0x79, 0x7d, 0xcf, 0x76, 0xa8, 0x2b, 0x9f, 0xc2, 0x86, 0xd2,
	0x5b, 0xe4, 0xeb, 0x41, 0xa6, 0x08, 0x9b, 0x00, 0x46, 0xf7, 0x8d, 0xa1, 0x5b, 0x8a, 0x2b, 0x47,
	0xb7, 0x2b, 0x20, 0xa6, 0xea, 0xfa, 0x37, 0xab, 0x38, 0xbc, 0x02, 0xa4, 0x04, 0xd9, 0x06, 0x32,
	0x95, 0xba, 0x0e, 0xe8, 0x39, 0x40, 0xa9, 0xe1, 0x26, 0x8e, 0xa5, 0xed, 0xfe, 0x9e, 0xee, 0xae,
	0xfe, 0xd9, 0x5e, 0x40, 0x57, 0x93, 0x2f, 0x74, 0xc7, 0x80, 0xb2, 0x74, 0xad, 0x1e, 0x6b, 0x04,
	0x50, 0x0a, 0xb6, 0xc9, 0xca, 0x12, 0x72, 0x7f, 0x57, 0x77, 0x6b, 0x7f, 0xe3, 0x11, 0x40, 0x29,
	0xba, 0x26, 0x88, 0x25, 0xc6, 0x6b, 0x41, 0x4e, 0xa1, 0x53, 0x0c, 0x34, 0xda, 0xab, 0x64, 0x59,
	0x1f, 0x5c, 0x33, 0xc7, 0x66, 0xa7, 0x2e, 0x73, 0x2c, 0xc7, 0x60, 0x45, 0x8e, 0xb5, 0xe9, 0xf9,
	0xcb, 0xbc, 0xd8, 0x48, 0xd6, 0x68, 0xff, 0x39, 0x2f, 0x36, 0x88, 0x35, 0xcc, 0xeb, 0x40, 0x4e,
	0xfb, 0x6f, 0x7b, 0xc3, 0xa3, 0x27, 0xa5, 0xef, 0x7d, 0x5b, 0xae, 0x1f, 0xfe, 0x0e, 0x00, 0x00,
	0xff, 0xff, 0x39, 0xfc, 0x55, 0x04, 0x30, 0x09, 0x00, 0x00,
}
